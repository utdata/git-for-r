[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git for R",
    "section": "",
    "text": "About this book\nI’m finding I’m not happy with existing resources on using Git with R, so I want to make a very opinionated guide specifically for my students.",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html",
    "href": "intro-to-git/00-introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "3 Introduction to Version control\nWhat is version control?\nVersion control is a system that helps you track and manage changes to files over time. It lets you save different versions of your work, go back to earlier versions if you make a mistake, and work with other people without overwriting each other’s changes.\nImagine you’re writing a paper. Every time you make a big edit, you save a new copy: paper_v1.docx, paper_v2.docx, paper_final.docx, etc.\nVersion control keeps track of these versions for you. Have you ever used the versions feature in Google docs when working on an article draft? Then you’ve interacted with version control.\nWhat is Git?\nTo keep track of versions of coding projects, programmers use a version control tool called Git. It runs on your computer and helps you:\nYou can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.\nHow GitHub fits into this:\nGitHub is a website that hosts Git repositories (your project + its history) online.\nIt lets you:\nIf Git is your notebook where you track all your work, GitHub is like an online library where you can store a copy of your notebook — and invite others to read it or even help you write it.\nIn short:",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-setup-tools.html",
    "href": "intro-to-git/02-setup-tools.html",
    "title": "4  Setup: Tools You’ll Need",
    "section": "",
    "text": "(instructions for installing Git, GitHub account, RStudio, and Quarto)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setup: Tools You’ll Need</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html",
    "href": "terminal/terminal.html",
    "title": "1  Using a Terminal",
    "section": "",
    "text": "2 Terminal\nA short chapter to explain basic bash commands like ls, cd, mkdir, etc.\nTerminal (Mac) and Git Bash (Windows) are programs that can run a shell, which is a text-based user interface where you type commands that your computer understands.\nDevelopers use a shell to issue commands to their computer to do things, like to install programs, change what folder their are in, etc. Using a terminal program to use your computer can be confusing at first, but it will become second-nature as you progress through this class.\nThe shell programming language we will use for these text-based interactions is called Bash. Bash is a Unix-based program and most of the Internet runs on Unix (or Linux) computers.\nWindows doesn’t understand Bash at all without the help of another program. This is why we installed Git and Git Bash so we can all speak the same language.\nMacs understand Bash natively, but some day they will change to a similar language called zsh. When you launch a shell on newer Macs you might get a message The default interactive shell is now zsh. To update your account to use zsh, please run chsh -s /bin/zsh. DON’T DO THIS! JUST IGNORE IT. We will continue to use Bash. Later we will add a command to disable this message.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#launch-your-terminal-in-rstudio",
    "href": "terminal/terminal.html#launch-your-terminal-in-rstudio",
    "title": "1  Using a Terminal",
    "section": "2.1 Launch your terminal in RStudio",
    "text": "2.1 Launch your terminal in RStudio\n\nI’ll show you how in person",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#the-terminal-prompt",
    "href": "terminal/terminal.html#the-terminal-prompt",
    "title": "1  Using a Terminal",
    "section": "2.2 The terminal prompt",
    "text": "2.2 The terminal prompt\nBefore I adjusted it, I would see this when I launched my terminal:\nCOMM-A54338:~ ccm346$\n\nThe first part before the ~ is my computer name.\nThe part after the ~ is is my username.\nLastly we have the $. This is the “prompt” where you type commands. You type your commands AFTER the $ and then hit Return on your keyboard to execute them.\n\nIn this book you might see examples of a command that includes an output. That first line will have the $ before the command so you know that it is a command, but DON’T TYPE IN THE $. For instance:\n$ pwd\n/Users/ccm346/icj/myproject\nMeans you type in just pwd and then hit return.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#typing-vs-copypaste",
    "href": "terminal/terminal.html#typing-vs-copypaste",
    "title": "1  Using a Terminal",
    "section": "2.3 Typing vs copy/paste",
    "text": "2.3 Typing vs copy/paste\nI encourage you to type commands into your terminal instead of copy and pasting them from the lessons. Build muscle and mind memory. Typing a command wrong and then having to figure out why it broke will help you learn it and remember it. If you just copy and paste blindly, then you won’t learn anything other than command-c and command-v.\n\n\n\n\n\n\nI use the terms “folder” and “directory” interchangeably here. They are the same thing.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#print-working-directory",
    "href": "terminal/terminal.html#print-working-directory",
    "title": "1  Using a Terminal",
    "section": "2.4 Print working directory",
    "text": "2.4 Print working directory\nOne of the hardest things to get a handle on when first working in the terminal is to figure out where you are on your computer. It’s important, because you can run commands on any file on your computer from where you are, but you gotta know where that is before you can do so. So, we’ll use pwd, or “print working directory”.\n\nIn your Terminal, type and execute:\n\npwd\nWhen I do this on my machine, here is what the command and response look like:\n$ pwd\n/Users/ccm346\nBecause I’m using my work computer my user directory is called “ccm346”. Yours might be your name or part of your name. This user directory is called your “home directory”. All of your computer files are stored inside your home directory.\nWhen you launch a new terminal it starts you out inside this directory.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#list-directory",
    "href": "terminal/terminal.html#list-directory",
    "title": "1  Using a Terminal",
    "section": "2.5 List directory",
    "text": "2.5 List directory\nLet’s see what is inside our home directory.\n\nDo this:\n\nls\nThis will list everything in the directory you are in. Mine looks like this:\n$ ls\nApplications        Library         google-cloud-sdk\nCreative Cloud Files    Movies          miniforge3\nDesktop         Music           thingy.html\nDocuments       Pictures\nDownloads       Public\nIt listed the names of all the folders and files of the directory I’m in. This is similar to opening a folder browser on your computer and then opening your home folder and looking inside of it.\n\n\n\nHome directory",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#flags",
    "href": "terminal/terminal.html#flags",
    "title": "1  Using a Terminal",
    "section": "2.6 Flags",
    "text": "2.6 Flags\nBut sometimes, I want to know more information about the files, like their modification date. To do this, we introduce something called flags, which add nuance or detail to a terminal command. They start with a dash, and you can pile them on, as I’ll demonstrate.\n\nFirst, try this:\n\nls -l\n\n\n\n\n\n\nImportant\n\n\n\nThat is “dash L”, not a number 1. Watch the spaces, too.\n\n\nMy output looks like this:\ncrit:~$ ls -l\ntotal 0\ndrwx------@   5 ccm346  AUSTIN\\Domain Users   160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users   128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users   256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users  3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users   192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users   128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users   160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users   128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users   672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users   480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     0 Nov 14  2022 thingy.html\nWell, that’s a lot of info, and much of it jibberish. Here is what each part of those lines means …\n\ndrwxr-xr-x and similar is the permission information for a that file or folder. We aren’t going to get into it here, but you can read more if you like.\nThe next number is the number of files inside the folder, sort of. If this is a file, the number will be “1”. If it is a folder, the number will always be at least “2”. We’ll come back to this.\nNext is the owner of the file or folder.\nNext is a permission level for the user when the file was created.\nNext is the file size in bytes.\nNext is the last modified date of the file or when a file was added to the folder.\nFile or folder name.\n\n\n2.6.1 Hidden files\nLet’s add another flag to your command.\n\nDo this:\n\nls -al\nMy list got a TON longer. I snipped out the middle part here:\ncrit:~$ ls -al\ntotal 352\ndrwxr-x---+  54 ccm346  AUSTIN\\Domain Users   1728 Jul 10 10:50 .\ndrwxr-xr-x    7 root    admin                  224 Jun 24 13:21 ..\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_EngineServer\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_StreemToSync\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_SyncToStreem\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_UIServer\n-r--------    1 ccm346  AUSTIN\\Domain Users      7 Nov  5  2021 .CFUserTextEncoding\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users  14340 Jul 11 09:31 .DS_Store\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     35 May 22 14:09 .Rapp.history\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users    510 Mar 30 11:45 .Renviron\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     73 Nov  5  2021 .Rhistory\n&lt;snip&gt;\ndrwx------@   5 ccm346  AUSTIN\\Domain Users    160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users    128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users    256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users   3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users    192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users    128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users    160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users    128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users    672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users    480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users      0 Nov 14  2022 thingy.html\n\nThe -a flag means “all” files and folders, including hidden ones. All the files or folders at the top that start with a dot like .Box_EngineServer are on the computer but not visible normally. There can be a lot of hidden them … I have 40+, far more than regular files and folders.\n\nLet’s list again with just the -a flag:\n\nls -a\nHere is the top of my list:\ncrit:~$ ls -a\n.\n..\n.Box_EngineServer\n.Box_StreemToSync\n.Box_SyncToStreem\n.Box_UIServer\n.CFUserTextEncoding\n.DS_Store\n\n\n2.6.2 Dot directories\nBut let’s consider the first two returns:\n$ ls -a\n.\n..\nThese are two special designations in the Unix world. A single period . designates “this directory” and two periods .. designates the “parent directory”, i.e. the folder “above” this one. Every directory has these, so that’s why the ls -l always shows two items inside a directory, even if it is “empty” of regular files or folders.\nWe can use these “dot” and “dot dot” designations to move around into different directories, and to manage files in our current directories. They become super important when we make “paths” between files in our programs and web pages.\nLet’s see this “dot” designation in action by opening our “current” folder in Finder. This command differs slightly depending on your OS.\n\nmacOSWindows\n\n\n\nDo this command:\n\nopen .\n\n\n\nDo this command:\n\nstart .\n\n\n\nSince you are inside your “home directory”, this should open that folder in your Finder.\n\n\n\n\n\n\niCloud and One Drive\n\n\n\nA word about cloud services like iCloud and OneDrive. We are going set up a place to store our projects so they are NOT backedup to cloud services. We do this for a couple of reasons:\n\nLater projects in this class will include thousands of tiny files. The process of writing them back forth to the cloud service can affect computer performance.\nOur projects use these files in order to function, and when they get off-loaded to the cloud then our code has problems working.\n\nDon’t worry … we’ll back up your class work through Github.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#make-directory",
    "href": "terminal/terminal.html#make-directory",
    "title": "1  Using a Terminal",
    "section": "2.7 Make directory",
    "text": "2.7 Make directory\nNext we are going to make a new empty folder to store all our class files using the mkdir command.\n\nDo this:\n\nmkdir icj\n\nThen use ls again to see your new directory amongst the others.\n\nCreating a directory like this is exactly the same as opening a desktop window on your Mac creating a new folder. Folders and directories are the same thing.\n\nCool, let’s make another directory inside of icj.\n\nmkdir icj/newdirectory\n\nNow you can do an ls on the “icj” folder to see what is inside it.\n\nls icj\nIt should show you newdirectory. Something like this:\n$ ls icj\nnewdirectory\nA couple of things about this:\nYou have listed the contents of the icj directory without being inside of it. You can list the contents of any folder on your computer if you know the path to it. In fact, you can do any command on any file or folder on your computer if you know its path. The path is the folder structure between where you “are” in the terminal to where the new file/folder is.\nIf you name a directory with a space in it, you’ll not get what you want unless you put quotes around it. Because of this, I avoid using spaces in files and folders and use - or _ instead. I avoid capitalization, too, because our folders become url names and sometimes caps mess it up, especially on PCs.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#change-directory",
    "href": "terminal/terminal.html#change-directory",
    "title": "1  Using a Terminal",
    "section": "2.8 Change directory",
    "text": "2.8 Change directory\nIt’s time to move into different folders within our terminal. The cd command lets us change directory.\n\nNow, let’s go inside the icj folder:\n\ncd icj\n\nLet’s see what is inside:\n\nls\nThat should show you a result with the newdirectory that we created earlier.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#parent-directories",
    "href": "terminal/terminal.html#parent-directories",
    "title": "1  Using a Terminal",
    "section": "2.9 Parent directories",
    "text": "2.9 Parent directories\nNow let’s get crazy. Let’s list the files “above” where we are.\n\nType and run this command.\n\n$ ls ../\nRemember I said that two dots means the parent directory? This should show you the list of files and folders in your home directory.\n\nNow, confirm where you are:\n\npwd\nWhich should still be icj. So you had listed the files for the folder “above” you.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#tab-completion",
    "href": "terminal/terminal.html#tab-completion",
    "title": "1  Using a Terminal",
    "section": "2.10 Tab completion",
    "text": "2.10 Tab completion\nIf you are doing ls or cd or otherwise referencing a path in the terminal, you don’t have to type the whole word for each directory. If you are trying to list the contents of “newdirectory”, then start with ls newd and then hit tab, and it will finish out the path as ls newdirectory. This is SUPER handy and you should use it often. Like all the time.\n\n\n\n\n\n\nImportant\n\n\n\nTab completion makes your programming live so much easier, and it works in more places than in our terminal. Use this skill.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#on-the-right-path",
    "href": "terminal/terminal.html#on-the-right-path",
    "title": "1  Using a Terminal",
    "section": "2.11 On the right path",
    "text": "2.11 On the right path\n\n2.11.1 Relative paths\nYou can ls files or cd into any directory relative to your current working directory using ../ to move “up” the folder structure and then use the name of the new directory to move inside it. So a path like this: ls ../../Users/Cory is to travel up two folders, then into Users then into Cory and then list all the files there.\nThis is very powerful in programming, because you might be writing and testing code on your own computer, but then run the program on another computer, so if file01.py needs to talk to file02.py, you don’t want to hard-code a path like http://utdata.cmcdonald.com/scripts/file02.py, because you might not always be on utdata.cmcdonald.com. If it’s in the same folder, you could use file02.py or ./file02.py.\n\n\n2.11.2 Root-relative paths\nYou can reference the “root” or the top level of whatever server or machine you are on even if you don’t know the name of it, by starting your path with a slash like this: /scripts/file01.py. That’s called a root-relative path. If you know the root-relative path to a file or folder, you can always find it no matter what directory you are currently in. We won’t use this much in this class.\n\n\n2.11.3 Absolute paths\nAn absolute path includes the domain or computer name. If I reference http://utdata.cmcdonald.com/scripts/file01.py in my code or script, it will only work if I’m on utdata.cmcdonald.com. If I move that script to another computer or server, it will still try to pull from utdata.cmcdonald.com instead of the version on the new computer. We avoid using absolute paths in this class for this reason.\n\n\n2.11.4 The home directory shortcut\nThere is also a path shortcut called ~/ that stands for “the home directory of the logged in person”. You might see that referenced in paths like ~/Documents/ but that would really take me to /Users/ccm346/Documents/ on my computer. But what’s cool is the same ~/Documents/ path works on YOUR computer, even though your user directory name is different.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html",
    "href": "intro-to-git/01-why-git-github.html",
    "title": "3  Getting Started with Git, GitHub, and RStudio",
    "section": "",
    "text": "3.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with Git, GitHub, and RStudio</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#prerequisites",
    "href": "intro-to-git/01-why-git-github.html#prerequisites",
    "title": "3  Why Git and GitHub",
    "section": "",
    "text": "R\nRStudio\nQuarto",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#introduction-what-is-version-control",
    "href": "intro-to-git/01-why-git-github.html#introduction-what-is-version-control",
    "title": "3  Why Git and GitHub",
    "section": "3.2 Introduction: What Is Version Control?",
    "text": "3.2 Introduction: What Is Version Control?\nImagine you’re writing a paper and you want to:\n\nKeep track of versions as you go, but don’t want to save multiple files with messy names like: report_final_FINAL_reallyfinal.docx\nGo back in time when something breaks\nWork with a teammate and see who changed what\n\nGit helps you track and save versions.\nGitHub lets you store those versions online and share them with others.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#getting-started-with-git-github-and-rstudio",
    "href": "intro-to-git/01-why-git-github.html#getting-started-with-git-github-and-rstudio",
    "title": "3  Why Git and GitHub",
    "section": "3.3 Getting Started with Git, GitHub, and RStudio",
    "text": "3.3 Getting Started with Git, GitHub, and RStudio\n\n3.3.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:\n\nInstall Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)\n\n\n\n\n\n3.3.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#exercise-1-confirm-your-git-setup",
    "href": "intro-to-git/01-why-git-github.html#exercise-1-confirm-your-git-setup",
    "title": "3  Getting Started with Git, GitHub, and RStudio",
    "section": "3.3 Exercise 1: Confirm Your Git Setup",
    "text": "3.3 Exercise 1: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n3.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with Git, GitHub, and RStudio</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#what-do-these-flags-mean",
    "href": "intro-to-git/01-why-git-github.html#what-do-these-flags-mean",
    "title": "3  Getting Started with Git, GitHub, and RStudio",
    "section": "3.4 🧠 What Do These Flags Mean?",
    "text": "3.4 🧠 What Do These Flags Mean?\nLet’s break down some of the options you’ve used:\n\n--global: This means “apply this setting for all projects on my computer.”\nYou usually only need to set your name and email globally once.\n--list: This tells Git to “show me my current configuration.”\n\n\n3.4.1 ✅ You’re Set!\nNow that Git is configured, you’re ready to create your first project. In the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start — using the terminal.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with Git, GitHub, and RStudio</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-create-project.html",
    "href": "intro-to-git/03-create-project.html",
    "title": "5  Create a New Git-Enabled Quarto Project",
    "section": "",
    "text": "(instructions to create a new project)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Create a New Git-Enabled Quarto Project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html",
    "href": "intro-to-git/04-git-status.html",
    "title": "6  View Git Status",
    "section": "",
    "text": "(use git status and explain its output)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>View Git Status</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-gitignore.html",
    "href": "intro-to-git/05-gitignore.html",
    "title": "7  Add a .gitignore File",
    "section": "",
    "text": "(explanation and example)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Add a .gitignore File</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-stage-commit.html",
    "href": "intro-to-git/06-stage-commit.html",
    "title": "8  Stage and Commit the Initial Files",
    "section": "",
    "text": "(commands for git add and git commit)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Stage and Commit the Initial Files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-push-to-github.html",
    "href": "intro-to-git/07-push-to-github.html",
    "title": "9  Push the Initial Commit to GitHub",
    "section": "",
    "text": "(connect remote and push)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Push the Initial Commit to GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-edit-stage-commit-push.html",
    "href": "intro-to-git/08-edit-stage-commit-push.html",
    "title": "10  Make a Change, Stage It, Commit It, and Push It",
    "section": "",
    "text": "(exercise flow)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make a Change, Stage It, Commit It, and Push It</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-collaboration-basics.html",
    "href": "intro-to-git/09-collaboration-basics.html",
    "title": "11  Collaborating with Others",
    "section": "",
    "text": "(branches, merging, resolving conflicts)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Others</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-final-tips.html",
    "href": "intro-to-git/10-final-tips.html",
    "title": "12  Final Tips, Troubleshooting, and What’s Next",
    "section": "",
    "text": "(important command references)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Final Tips, Troubleshooting, and What’s Next</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#step-1-install-the-tools",
    "href": "intro-to-git/01-why-git-github.html#step-1-install-the-tools",
    "title": "3  Getting Started with Git, GitHub, and RStudio",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with Git, GitHub, and RStudio</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#step-2-set-up-git-in-the-terminal",
    "href": "intro-to-git/01-why-git-github.html#step-2-set-up-git-in-the-terminal",
    "title": "3  Getting Started with Git, GitHub, and RStudio",
    "section": "3.2 Step 2: Set Up Git in the Terminal",
    "text": "3.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with Git, GitHub, and RStudio</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#prerequisites",
    "href": "intro-to-git/00-introduction.html#prerequisites",
    "title": "2  Introduction",
    "section": "3.1 Prerequisites:",
    "text": "3.1 Prerequisites:\nBefore we move on to working with Git and Github, we need to make sure you have what you need to successfully complete the exercises in this guide. The guide assumes you already have the following installed on your computer:\n\nR\nRStudio\nQuarto\n\nIf you are missing any these, please go to the links listed and make sure to install before moving on to the next chapter!",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#introduction-what-is-version-control",
    "href": "intro-to-git/00-introduction.html#introduction-what-is-version-control",
    "title": "2  Introduction to Git",
    "section": "3.1 Introduction: What Is Version Control?",
    "text": "3.1 Introduction: What Is Version Control?\nImagine you’re writing a paper and you want to:\n\nKeep track of versions as you go, but don’t want to save multiple files with messy names like: report_final_FINAL_reallyfinal.docx\nGo back in time when something breaks\nWork with a teammate and see who changed what\n\nGit helps you track and save versions.\nGitHub lets you store those versions online and share them with others.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Git</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#you-can-think-of-git-like-a-very-smart-save-game-system-for-your-projects.-unlike-in-google-docs-our-versions-arent-automatically-saved-for-us.-we-have-to-tell-our-computers-when-and-how-to-save-a-new-version.",
    "href": "intro-to-git/00-introduction.html#you-can-think-of-git-like-a-very-smart-save-game-system-for-your-projects.-unlike-in-google-docs-our-versions-arent-automatically-saved-for-us.-we-have-to-tell-our-computers-when-and-how-to-save-a-new-version.",
    "title": "2  Introduction to Git",
    "section": "3.1 You can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.",
    "text": "3.1 You can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.\nHow GitHub fits into this:\nGitHub is a website that hosts Git repositories (your project + its history) online.\nIt lets you:\n\nStore your Git project safely in the cloud.\nShare your project with others.\nCollaborate with other people (even if they are far away).\nKeep a backup in case your computer crashes.\n\nIf Git is your notebook where you track all your work, GitHub is like an online library where you can store a copy of your notebook — and invite others to read it or even help you write it.\n\nIn short:\n\nGit = tool you use on your computer to track changes.\nGitHub = website where you can upload (and share) your Git projects.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Git</span>"
    ]
  }
]