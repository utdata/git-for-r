[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git for R",
    "section": "",
    "text": "About this book\nI’m finding I’m not happy with existing resources on using Git with R, so I want to make a very opinionated guide specifically for my students.",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html",
    "href": "intro-to-git/00-introduction.html",
    "title": "7  Welcome",
    "section": "",
    "text": "7.1 Who is this guide for?\nWelcome to the Intro to Git guide! We hope this guide will be a resource for you to learn the basics of working with version control for the first time.\nThis guide is for students who know some R and want to learn Git and GitHub to manage and collaborate on R projects (especially Quarto ones). It assumes little-to-no hands-on terminal experience but will encourage building confidence over time by interacting with Github through the command line.\nStudents who are brand new to the Terminal may also find it helpful to go through the Intro to Terminal section of this book before working through this guide.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#prerequisites",
    "href": "intro-to-git/00-introduction.html#prerequisites",
    "title": "7  Welcome",
    "section": "7.2 Prerequisites",
    "text": "7.2 Prerequisites\nBefore we move on to working with Git and Github, we need to make sure you have what you need to successfully complete the exercises in this guide. The guide assumes you already have the following installed on your computer:\n\nR\nRStudio\nQuarto\n\nIf you are missing any these, please go to the links listed and make sure to install before moving on to the next chapter!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html",
    "href": "intro-to-git/01-install-and-setup.html",
    "title": "3  Installation and setup",
    "section": "",
    "text": "3.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#step-1-install-the-tools",
    "href": "intro-to-git/01-install-and-setup.html#step-1-install-the-tools",
    "title": "3  Installation and setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "href": "intro-to-git/01-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "title": "3  Installation and setup",
    "section": "3.2 Step 2: Set Up Git in the Terminal",
    "text": "3.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "href": "intro-to-git/01-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "title": "3  Installation and setup",
    "section": "3.3 Exercise 1: Confirm Your Git Setup",
    "text": "3.3 Exercise 1: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n3.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#what-do-these-flags-mean",
    "href": "intro-to-git/01-install-and-setup.html#what-do-these-flags-mean",
    "title": "3  Installation and setup",
    "section": "3.4 🧠 What Do These Flags Mean?",
    "text": "3.4 🧠 What Do These Flags Mean?\nLet’s break down some of the options you’ve used:\n\n--global: This means “apply this setting for all projects on my computer.”\nYou usually only need to set your name and email globally once.\n--list: This tells Git to “show me my current configuration.”\n\n\n3.4.1 ✅ You’re Set!\nNow that Git is configured, you’re ready to create your first project. In the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start — using the terminal.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html",
    "href": "intro-to-git/02-making-a-repo.html",
    "title": "3  Making a repository",
    "section": "",
    "text": "3.1 Step 1: Create a new RStudio Project\nOpen RStudio and make a new Quarto project by going to:\nIn the project wizard, do the following:\nYou’ll now have a project with a .qmd file (Quarto), and RStudio will open into a new window for this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "href": "intro-to-git/02-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "title": "3  Making a repository",
    "section": "",
    "text": "File → New Project → New Directory → Quarto Project\n\n\nSelect New directory in Create Project.\nSelect Quarto project as the Project Type.\nGive your directory a descriptive name like my-first-git-project.\nCheck the Create project as a subdirectory of to make sure you’re creating your project in the directory where you keep your class or coding projects (ideally a projects folder inside your home directory).\nFinallay, click Create Project.\n\n\n\n\n3.1.1 Exercise 1: Run a Quarto File\nBefore we get into Git, let’s test Quarto by creating a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…)\nAdd a title like “Intro to Git”, and click Create\nSave the file and name it something like 01-index.qmd when prompted\nClick Render in the top bar\n\nYou should see an HTML preview with sample content. Great! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-2-initialize-git-for-the-project",
    "href": "intro-to-git/02-making-a-repo.html#step-2-initialize-git-for-the-project",
    "title": "3  Making a repository",
    "section": "3.2 Step 2: Initialize Git for the Project",
    "text": "3.2 Step 2: Initialize Git for the Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need initialize git inside of our Quarto project.\nTo initialize Git in your Quarto project, Click the Terminal tab in RStudio (usually lower-left)\nInside Terminal, type the following command and run it (by hitting enter):\ngit init\nIn basic terms, this tells Git “I want you to start tracking this folder.”\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "href": "intro-to-git/02-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "title": "3  Making a repository",
    "section": "3.3 🗂️ Step 3: Tell Git What Files to Track",
    "text": "3.3 🗂️ Step 3: Tell Git What Files to Track\nNow that we’ve let Git know that we want it to start watching our project, we’ll also need to tell git what files we would like it to keep track of.\nFirst, let’s ask Git what it “sees” in our project folder by running:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nNow, let’s breakdown what this all means:\n\nOn branch main: You’re working on the main branch — the default starting line of development.\nNo commits yet: This means Git is ready, but you haven’t saved any versions yet.\nUntracked Files: These are files Git sees in your folder, but it’s not saving changes to them yet. They’re marked in red in the terminal and the RStudio Git tab.\n\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html",
    "href": "intro-to-git/03-add-files.html",
    "title": "4  Creating your first commit",
    "section": "",
    "text": "4.1 Ignoring files\nIn our last chapter, we ran the git status command to tell us what Git sees within our project.\nLet’s take another look at those files now by re-running:\nUnder untracked files you’ll see a list like:\nNotice that .html file in the list. This .html file is the rendered output from Quarto, which changes every time you click “Render.” We generally do not save these kinds of rendered files in our repositories since it’s like saving every draft printout of a paper — not helpful.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#ignoring-files",
    "href": "intro-to-git/03-add-files.html#ignoring-files",
    "title": "4  Creating your first commit",
    "section": "",
    "text": "git status\n\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#introducing-.gitignore",
    "href": "intro-to-git/03-add-files.html#introducing-.gitignore",
    "title": "4  Creating your first commit",
    "section": "4.2 🙈 Introducing .gitignore",
    "text": "4.2 🙈 Introducing .gitignore\nIn a Git project, there are several types of files and directories that you typically want to keep out of our repositories to keep things clean, secure, and easy to manage. What you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what to ignore.\nIn general, the following kinds of files shouldn’t be tracked in Github:\n\nSensitive files: Files containing passwords or private information\nBig files: Git isn’t built to keep track of large files.\n\nFor R and Quarto projects, this will include the following common files types:\n\nSession and history files: .Rhistory, .RData, .Rproj.user/\nKnitting files: .utf8.md, .knit.md\nOutput/render folders: *_files/ ,_site/, _book/\nEditor and IDE Config Files: .Rproj.user/\n\nDon’t worry if you don’t fully understand what all of these files are yet. The important thing here is to know is that there are things we should and should not upload to Git, and the way we keep the things we don’t want in git out is by using a .gitignore file.\n\n4.2.1 Exercise 2: Make a .gitignore\nLet’s make a .gitignore now using the command line. Type the following code into the Terminal to make your new file using the touch command:\ntouch .gitignore\nThen open .gitignore in the Files pane in RStudio. If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.\nOnce you have your blank .gitignore file open, add the following lines:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nSave the file, then check your Git status again:\ngit status\nNow the .html file should be gone from the list of red files Git “sees” because we’ve told it to ignore these types of files. ✨\nBefore moving forward, let’s add a few more things to the .gitignore to cover all our bases.\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#add-the-files-you-do-want-staging",
    "href": "intro-to-git/03-add-files.html#add-the-files-you-do-want-staging",
    "title": "4  Creating your first commit",
    "section": "4.3 ✅ Add the Files You Do Want (Staging)",
    "text": "4.3 ✅ Add the Files You Do Want (Staging)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#take-your-first-snapshot-commit",
    "href": "intro-to-git/03-add-files.html#take-your-first-snapshot-commit",
    "title": "4  Creating your first commit",
    "section": "4.4 📸 Take your first Snapshot (Commit)",
    "text": "4.4 📸 Take your first Snapshot (Commit)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"\n✅ You’ve saved the first version of your project locally (AKA on your computer)! Next, we’ll learn how to send this “snapshot” of our project to Github for safe keeping.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html",
    "href": "intro-to-git/04-pushing-to-github.html",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "5.1 Step 1: Create a Repository on GitHub\nNow that your project has been committed locally, let’s put it on GitHub so you can back it up and collaborate with others.\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#step-1-create-a-repository-on-github",
    "href": "intro-to-git/04-pushing-to-github.html#step-1-create-a-repository-on-github",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nComplete the form by doing the following:\n\nFill in the Repository name field, using the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank or optional\nLeave the box unchecked that says “Initialize this repository with a README” (We’ll add this on our own later)\nClick Create repository",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "href": "intro-to-git/04-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "title": "5  Pushing to Github",
    "section": "5.2 Step 2: Connect Your Local Git Project to GitHub",
    "text": "5.2 Step 2: Connect Your Local Git Project to GitHub\nIn the Quick setup — if you’ve done this kind of thing before box, click the copy button next to the SSH URL box.\nNavigate to the Terminal tab inside your RStudio Quarto project, type the following command but replace the repo name with the one you just copied from Github:\ngit remote add origin git@github.com:your-name/your-repo-name.git\nNow run the command by hitting enter.\nNow we’ll set our main branch name to main by running:\ngit branch -M main\nLastly, we’ll push our main branch to Github by running:\ngit push -u origin main",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#recap-what-do-these-commands-do",
    "href": "intro-to-git/04-pushing-to-github.html#recap-what-do-these-commands-do",
    "title": "5  Pushing to Github",
    "section": "5.3 Recap: What Do These Commands Do?",
    "text": "5.3 Recap: What Do These Commands Do?\nOk, we just did a lot there. Let’s pause for a moment and breakdown everything we just did:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: Uploads your local commits to GitHub and sets up a link between your local main branch and the main branch on GitHub.\n\n\n🎉 Congratulations: Now your project is on GitHub!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#exercise-3-explore-your-github-project",
    "href": "intro-to-git/04-pushing-to-github.html#exercise-3-explore-your-github-project",
    "title": "5  Pushing to Github",
    "section": "5.4 🎯 Exercise 3: Explore Your GitHub Project",
    "text": "5.4 🎯 Exercise 3: Explore Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project.\nIncluding:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#checkin-point.",
    "href": "intro-to-git/04-pushing-to-github.html#checkin-point.",
    "title": "5  Pushing to Github",
    "section": "5.5 Checkin point.",
    "text": "5.5 Checkin point.\nAt this point in the guide, you’ve learned how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html",
    "href": "intro-to-git/05-updating-your-repo.html",
    "title": "6  Making and pushing changes",
    "section": "",
    "text": "6.1 🎯 Goal\nBy the end of this chapter, you’ll know how to:\nYou’ll also practice writing good commit messages and checking your work.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#goal",
    "href": "intro-to-git/05-updating-your-repo.html#goal",
    "title": "6  Making and pushing changes",
    "section": "",
    "text": "Make a meaningful change to your project\nStage and commit that change using Git\nPush the change to GitHub to save your work.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-1-make-a-small-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-1-make-a-small-change",
    "title": "6  Making and pushing changes",
    "section": "6.2 🛠️ Step 1: Make a Small Change",
    "text": "6.2 🛠️ Step 1: Make a Small Change\nLet’s open your Quarto file you made in Chapter 1 (e.g., 01-index.qmd) and make a couple changes.\nReplace the auto-generated text and code blocks in the file with the following\n---\ntitle: \"Intro to Git\"\nformat: html\n---\n\n# Summary\n\nHere is a summary of the `mtcars` dataset.\nUnder the summary header and description, add a code chunk with the following:\nsummary(mtcars)\nSave the file. Now check the status in your Terminal again by running:\ngit status\nYou’ll see something like as a Terminal response:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   01-index.qmd\nLet’s break this down :\nThe red text tells us that Git sees something was modified in your 01-index.qmd. It’s under the Changes not staged for commit: section, which tells us that Git hasn’t staged it yet (so it won’t be saved in the next commit).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-3-stage-the-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-3-stage-the-change",
    "title": "6  Making and pushing changes",
    "section": "6.3 📥 Step 3: Stage the Change",
    "text": "6.3 📥 Step 3: Stage the Change\nWe want to tell Git, “Hey, save this file in the next snapshot.”\nWe’ll do this by adding the modified file to the snapshot. We can do that by running:\ngit add 01-index.qmd\nNow, check the status again.\ngit status\nNow you’ll see your file in green and following message:\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  modified:   01-index.qmd`\n🎉 Great! The change is now staged.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-4-commit-the-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-4-commit-the-change",
    "title": "6  Making and pushing changes",
    "section": "6.4 Step 4: Commit the Change",
    "text": "6.4 Step 4: Commit the Change\nNow, we’ll save the snapshot (in Git’s memory). When we do so, we’ll want to include a descriptive commit message noting what we changed.\nType something like the following and git enter\ngit commit -m \"Add summary of mtcars dataset\"\nA few best practices for commit messages:\n✅ Use present tense: \"Add summary of...\", not \"Added...\"\n✅ Keep it short but descriptive\n✅ Think: “What changed in this version?”\n🕵️‍♀️ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or you need to go back to a prior version, commit messages will help your retrace your steps.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-5-push-it-to-github",
    "href": "intro-to-git/05-updating-your-repo.html#step-5-push-it-to-github",
    "title": "6  Making and pushing changes",
    "section": "6.5 ☁️ Step 5: Push It to GitHub",
    "text": "6.5 ☁️ Step 5: Push It to GitHub\nNow, we’ll send the snapshot from your computer to GitHub by running:\ngit push\nNow go to your repository on GitHub.com — you’ll see your commit listed under the Commits tab and your file under Code!\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why our push command is shorter than it was last time. In our last push, we needed to connect our remote main branch to the remote Github repository. Since we’re already connected our Quarto project to Github and set our branch to main, we can just use the git push command now.\n\n\n\n💡 GitHub is now your project’s cloud backup and collaboration hub.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html",
    "href": "terminal/00-introduction.html",
    "title": "1  Welcome and launch",
    "section": "",
    "text": "1.1 What is the Terminal, Anyway?\nFirst things first:\nIf you’ve never opened a Terminal window before, you’re not alone. This guide is here to show you that the command line isn’t something to fear. It’s just a different way to tell your computer what to do — directly, and often much faster.\nYou don’t need to memorize anything right now. You don’t need to be a “tech wizard.” You just need a little curiosity.\nA few important things before you get started:\nTime to enter the Matrix, Neo.\nThink of using the Terminal like dm’ing your computer.\nInstead of clicking buttons or opening folders with a mouse or trackpad, you type commands in the command line asking your computer to do these things for you. Your computer reads your message and replies by immediately doing what you ask.\nThe Terminal (on Mac) or Git Bash (on Windows) are programs that can run a shell, are just the names of the user interfaces where you will type these commands.\nThe Terminal might look a little old-school (and let’s be real: a bit scary 👻), but it’s still one of the most powerful tools you can learn. People who work in code, data, security, and tech use it all the time.\nHere’s just a few examples of what we can ask our computers to do using the Terminal:\nWe can do all of these things by typing just a few words. But to communicate effectively with our Terminals, we have to learn “speak” its language. In this guide, you’ll learn the basics of this language to get you started.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#what-is-the-terminal-anyway",
    "href": "terminal/00-introduction.html#what-is-the-terminal-anyway",
    "title": "1  Welcome and launch",
    "section": "",
    "text": "Terminology note\n\n\n\nPeople (including the authors of this guide) will use the term shell and terminal and command line interchangeably. This means when we say “type into your shell”, “in your command line”, or “in your terminal”, we mean type at the prompt in your Terminal or Git Bash program. Later, we’ll use our Terminal from within Visual Studio Code.\nIn reality, there are some nuances:\n\nThe terminal opens a window.\nInside that, a shell runs.\nYou interact with it through the command line interface.\n\nIn practical terms, just know they usually mean the same thing out in the wild.\n\n\n\n\n\nList all the files in a folder\nCreate a new folder\nInstall programs\nMove files around\nAutomate tasks",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#how-to-open-the-terminal",
    "href": "terminal/00-introduction.html#how-to-open-the-terminal",
    "title": "1  Welcome and launch",
    "section": "1.3 How to Open the Terminal",
    "text": "1.3 How to Open the Terminal\nFirst things first, we need to actually open the Terminal on our machines.\nHere’s how to find it on your computer:\n\nMac:\nPress Command + Space, type Terminal, and hit Enter.\nWindows:\nOpen the Start Menu, search for Terminal or PowerShell, and open it.\n(There’s also something called “Command Prompt” — close enough for now.)\nLinux:\nPress Ctrl + Alt + T — it’s probably already installed!\n\nTip: If you want, you can change the Terminal’s color theme to make it more comfortable to look at. (We’ll cover this later.)",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#your-first-command-saying-hello-to-the-terminal",
    "href": "terminal/00-introduction.html#your-first-command-saying-hello-to-the-terminal",
    "title": "1  Welcome and launch",
    "section": "1.4 Your First Command: Saying Hello to the Terminal",
    "text": "1.4 Your First Command: Saying Hello to the Terminal\nOk, now that the Terminal is open on your computer, let’s take a quick look at the text showing in the window when you launch to familiarize ourselves with basics of the interface.\n\n\n\n\n\n\nNote for newer Mac users\n\n\n\nWhen you launch the Terminal for the first time, you’ll probably see a prompt saying something like:\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nDISREGARD THIS MESSAGE. Do not run this the command to update to zsh. Zsh is a similar language that Mac is transitioning to by default. However, we will use Bash for this guide to keep everyone on the same page, regardless of their operating systems.\n\n\n\n\n\nWhen you launch Terminal for the first time, you’ll see some text like this.\n\n\nLet’s breakdown a few things from the screenshot above:\n\nComputer name: the characters before the ~ are your computer name.\nCurrent directory: The ~ character is Terminal shorthand for your “base” directory on your computer. The value shown here will update as you move around to different folders on your computer.\nUser name: The part immediatetely after the ~ is your username.\nCommand prompt: Lastly we have the $. This is the “prompt” where you type commands.\n\nYou type your commands AFTER the $ and then hit Return/Enter on your keyboard to run or execute them. We’ll practice doing just that in the next section.\n\n1.4.1 Your First Command: Saying Hello to the Terminal\nLet’s try your first real command: finding out where you are using the command pwd.\nIn the Terminal prompt (remember after the $), type the following command:\npwd\nThen press Enter to run the command.\nYou should see Terminal respond with something like this:\n/Users/yourname\nor this\nC:\\Users\\yourname\nDepending on your system, the path may look a little different — and that’s OK.\nSo what just happened?\n\npwd stands for “print working directory.”\nIt simply asks: Where am I right now in the computer’s folder system?\nYour computer provides the answer: your current folder — usually your “home” directory when you first open the Terminal.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#quick-tips-before-you-move-on",
    "href": "terminal/00-introduction.html#quick-tips-before-you-move-on",
    "title": "1  Welcome to the Terminal",
    "section": "1.5 Quick Tips Before You Move On",
    "text": "1.5 Quick Tips Before You Move On\n\nCommand Case Matters in the Terminal: pwd is not the same as PWD.\nPress Enter: Every command you type needs an Enter to run.\nYou Can’t Break It Easily: Typing pwd won’t hurt your computer.\n(In fact, almost everything we’ll do today is safe.)",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#speaking-the-terminals-language",
    "href": "terminal/00-introduction.html#speaking-the-terminals-language",
    "title": "1  Welcome and launch",
    "section": "1.2 Speaking the Terminal’s language",
    "text": "1.2 Speaking the Terminal’s language\nThe programming language we will use for our interactions in the Terminal is called Bash. Bash is a Unix-based program and most of the Internet runs on Unix (or Linux) computers.\nMacs understand Bash natively, but Windows doesn’t understand Bash at all without the help of another program. This is why Git and Git Bash were downloaded in the prerequisites – so we can all speak the same language, regardless of the machines we’re using.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html",
    "href": "terminal/01-moving-around.html",
    "title": "2  Moving Around in the Terminal",
    "section": "",
    "text": "2.1 What’s in This Folder? (ls)\nNow that you know where you are (pwd), it’s time to explore what’s around you. Specifically, we’ll start by moving between different folders on your computer.\nIf you want to see what’s inside the current directory, you use the ls command.\nAs we said in Chapter 1, the Terminal lets you interact with files the same way you would with File Explorer on Windows and Finder on a Mac — except you’ll be using text instead of clicking.\nWhen your first launch terminal, you’ll see a ~ (called a tilde), which lets you know you’re in your base or home directory. We want to ask the Terminal to tell us what is inside this home directory.\nTo do that, type the following command:\nand press Enter to run the command.\nTerminal will respond to your command with a list of files and folders like this:\nOr it might be different depending on what’s in your computer’s home folder.\nIn any case, the list of directories returned by Terminal will match the folders you would see if you clicked on your home directory in the Finder on a Mac or in File Explorer on a Windows machine. For example, the list of folders listed in the example response above matches what we see in our home directory using Finder below.\nQuick Recap: What does ls stand for?",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#step-1-whats-in-this-folder-ls",
    "href": "terminal/01-moving-around.html#step-1-whats-in-this-folder-ls",
    "title": "2  Moving Around in the Terminal",
    "section": "",
    "text": "ls\n\n\n_projects Desktop       Downloads   Movies      Pictures\nDocuments   Library     Music       Public \n\n\n\n\nIt’s short for “list.”\nIt literally says, “List what’s here.”",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#step-2-moving-around-cd",
    "href": "terminal/01-moving-around.html#step-2-moving-around-cd",
    "title": "2  Moving Around in the Terminal",
    "section": "2.2 Step 2: Moving Around (cd)",
    "text": "2.2 Step 2: Moving Around (cd)\nSeeing what’s around is nice — but what if you want to go into one of those folders?\nUse the cd command, shorthand for “change directory”.\nSuppose you see a folder called Documents.\nTo do so, type the following command in your Terminal:\ncd Documents\nand press Enter.\nNow you’re inside the Documents directory!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#how-can-you-tell-where-you-are-now",
    "href": "terminal/01-moving-around.html#how-can-you-tell-where-you-are-now",
    "title": "2  Moving Around in the Terminal",
    "section": "2.3 How Can You Tell Where You Are Now?",
    "text": "2.3 How Can You Tell Where You Are Now?\nThere are a couple ways to make sure you are where you think you are in the Terminal.\nThe first is to look at the command prompt line inside your Terminal window again. You should see something like:\nAnas-MacBook-Air:Documents ana$\nIn the current directory space (where there used to be a ~), you should now see the name of the Documents folder. Remember if you’re ever unsure where you are, Terminal will tell you in the prompt!\nIf you’re still not sure, remember you can use your new friend the pwd command from Chapter 1 by typing:\npwd\nTerminal should now show something like:\n/Users/yourname/Documents\nor\nC:\\Users\\yourname\\Documents\nNice job — you just moved between directories!\nNow let’s try sending the ls command again by typing:\nls\nand hitting Enter.\nYou should see a different list of files and/or folder names that you did when you ran the same command inside the home directory — now showing the contents of your Documents folder.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#step-3-going-back-up",
    "href": "terminal/01-moving-around.html#step-3-going-back-up",
    "title": "2  Moving Around in the Terminal",
    "section": "2.4 Step 3: Going Back Up",
    "text": "2.4 Step 3: Going Back Up\nOk now that we’ve moved into folders, what if you want to go back to the folder you came from?\nTo go back up, type and run the following command:\ncd ..\nThe two dots .. simply mean “the folder above this one.”\nIf you run the pwd command again, you’ll see you’re back to where you started!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#extra-special-shortcuts",
    "href": "terminal/01-moving-around.html#extra-special-shortcuts",
    "title": "2  Moving Around in the Terminal",
    "section": "2.5 Extra: Special Shortcuts",
    "text": "2.5 Extra: Special Shortcuts\nHere are a few handy shortcuts you’ll want to remember:\n\n\n\nCommand\nWhat it does\n\n\n\n\ncd\nGo back to your home directory.\n\n\ncd ..\nMove up one directory.\n\n\ncd foldername\nMove into a folder.\n\n\n\n\nTip: If the folder name has spaces (like My Documents), put it in quotes:\ncd \"My Documents\"\n\nOr use a backslash to “escape” the space:\ncd My\\ Documents\nLike we mentioned before, Terminal is particular about the way you speak to it. For it to understand you, you’ve got to speak its language. But this is another reason why naming your files and directories cleanly using a naming convention like snake_case or kebab-case will help you work more efficiently.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#how-can-you-tell-where-you-are-now-pwd",
    "href": "terminal/01-moving-around.html#how-can-you-tell-where-you-are-now-pwd",
    "title": "2  Moving Around in the Terminal",
    "section": "2.3 How Can You Tell Where You Are Now? (pwd)",
    "text": "2.3 How Can You Tell Where You Are Now? (pwd)\nThere are a couple ways to make sure you are where you think you are in the Terminal.\nThe first is to look at the command prompt line inside your Terminal window again. You should see something like:\nAnas-MacBook-Air:Documents ana$\nIn the current directory space (where there used to be a ~), you should now see the name of the Documents folder. Remember if you’re ever unsure where you are, Terminal will tell you in the prompt!\nIf you’re still not sure, remember you can use your new friend the pwd command from Chapter 1 by typing:\npwd\nTerminal should now show something like:\n/Users/yourname/Documents\nor\nC:\\Users\\yourname\\Documents\nNice job — you just moved between directories!\nNow let’s try sending the ls command again by typing:\nls\nand hitting Enter.\nYou should see a different list of files and/or folder names that you did when you ran the same command inside the home directory — now showing the contents of your Documents folder.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#step-3-going-back-up-cd-..",
    "href": "terminal/01-moving-around.html#step-3-going-back-up-cd-..",
    "title": "2  Moving Around in the Terminal",
    "section": "2.4 Step 3: Going Back Up (cd ..)",
    "text": "2.4 Step 3: Going Back Up (cd ..)\nOk now that we’ve moved into folders, what if you want to go back to the folder you came from?\nTo go back up, type and run the following command:\ncd ..\nThe two dots .. simply mean “the folder above this one.”\nIf you run the pwd command again, you’ll see you’re back to where you started!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#mini-exercise",
    "href": "terminal/01-moving-around.html#mini-exercise",
    "title": "2  Moving Around in the Terminal",
    "section": "2.6 📝 Mini Exercise",
    "text": "2.6 📝 Mini Exercise\nOwn your own, try this:\n\nOpen your Terminal.\nType pwd to see where you are.\nUse ls to list what’s inside.\nPick a folder you see (not your Documents folder).\ncd into that folder.\nUse pwd again to check that you moved.\ncd .. to come back up.\n\nTake your time. Play around.\nIf you get lost, just type:\ncd\nto jump back to your home directory.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#whats-in-this-folder-ls",
    "href": "terminal/01-moving-around.html#whats-in-this-folder-ls",
    "title": "2  Moving Around in the Terminal",
    "section": "",
    "text": "ls\n\n\n_projects Desktop       Downloads   Movies      Pictures\nDocuments   Library     Music       Public \n\n\n\n\nIt’s short for “list.”\nIt literally says, “List what’s here.”",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#moving-around-cd",
    "href": "terminal/01-moving-around.html#moving-around-cd",
    "title": "2  Moving Around in the Terminal",
    "section": "2.2 Moving Around (cd)",
    "text": "2.2 Moving Around (cd)\nSeeing what’s around is nice — but what if you want to go into one of those folders?\nUse the cd command, shorthand for “change directory”.\nSuppose you see a folder called Documents.\nTo do so, type the following command in your Terminal:\ncd Documents\nand press Enter.\nNow you’re inside the Documents directory!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#going-back-up-cd-..",
    "href": "terminal/01-moving-around.html#going-back-up-cd-..",
    "title": "2  Moving Around in the Terminal",
    "section": "2.4 Going Back Up (cd ..)",
    "text": "2.4 Going Back Up (cd ..)\nOk now that we’ve moved into folders, what if you want to go back to the folder you came from?\nTo go back up, type and run the following command:\ncd ..\nThe two dots .. simply mean “the folder above this one.”\nIf you run the pwd command again, you’ll see you’re back to where you started!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html",
    "href": "terminal/02-making-files-folders.html",
    "title": "3  Making and managing folder",
    "section": "",
    "text": "3.1 Creating a Folder (mkdir)\nNow that you can move around the Terminal like a pro, it’s time to create your own stuff.\nIn this chapter, we’ll learn to make new folders and files. We’ll also learn how to move or delete them.\nLet’s say you wanted to make a brand new folder on your computer. If you were doing this in Finder, you’d do something like right click and hit New Folder, then you’d need to fill out your folder name in the prompt next to the new folder.\nTo do this from the command line, we do all of this in a single prompt using the mkdir command.\nIf you ran the following command (don’t do this):\nThis would create a folder called my_new_folder inside whatever directory you’re inside in the Terminal.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#creating-a-folder-mkdir",
    "href": "terminal/02-making-files-folders.html#creating-a-folder-mkdir",
    "title": "3  Making and managing folder",
    "section": "",
    "text": "mkdir stands for make directory.\n\n\nmkdir my_new_folder\n\n\n3.1.1 📝 Mini excercise: make a directory\nNow, try the mkdir command out on your own by making a new directory inside your home directory (~).\n\nCheck you’re in your home directory (Hint: you can get back to your home directory by running cd)\nType and run: mkdir terminal_practice in your command prompt\nRun the ls command to make sure it worked, You should see your new directory listed in the Terminal response.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#creating-a-file-touch",
    "href": "terminal/02-making-files-folders.html#creating-a-file-touch",
    "title": "3  Making and managing folder",
    "section": "3.2 Creating a File (touch)",
    "text": "3.2 Creating a File (touch)\nLike folders, we can also make new files from the command line using the touch command.\n\nUnlike other commands we’ve learned, touch isn’t shorthand for anything. It’s just the name of the command to make a new, empty file in Bash 🤷‍♀️\n\nFor example, if you ran the following command:\ntouch example.txt\nThis creates a new, empty file called example.txt.\n\nNote: Windows users may need to use:\n\n\nbash echo.&gt; emample.txt\nor bash New-Item example.txt\n(Depending on if you’re using PowerShell.)\n\n\n3.2.1 📝 Mini excercise: make a file\nNow, try the touch command on your own by making a new file inside your new terminal_practice folder.\n\nMove into your new folder: run the command cd terminal_practice to move into your new folder.\nMake a new file: Type and run the command touch terminal-file.txt.\nCheck your work: Run the ls command to list the files in your folder. You should see a single file listed in the Terminal response called terminal-file.txt.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#youll-get-used-to-them-quickly",
    "href": "terminal/02-making-files-folders.html#youll-get-used-to-them-quickly",
    "title": "3  Making and managing folder",
    "section": "4.1 You’ll get used to them quickly!",
    "text": "4.1 You’ll get used to them quickly!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#hint-you-can-get-back-to-your-home-directory-by-running-cd",
    "href": "terminal/02-making-files-folders.html#hint-you-can-get-back-to-your-home-directory-by-running-cd",
    "title": "3  Making and managing folder",
    "section": "3.2 Hint: you can get back to your home directory by running cd",
    "text": "3.2 Hint: you can get back to your home directory by running cd",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#copying-files-and-folders-cp",
    "href": "terminal/02-making-files-folders.html#copying-files-and-folders-cp",
    "title": "3  Making and managing folder",
    "section": "3.3 Copying Files and Folders (cp)",
    "text": "3.3 Copying Files and Folders (cp)\nWe can also make duplicate files or folders from command line using the cp command.\n\ncp is shorthand for “copy”\n\nSyntax of the cp command\ncp source_file_folder destination_file_folder\nThe cp command takes at least two arguments in its arguments:\n\nSource file or folder: the file or folder you want to copy\nDestination file or folder: the name you’d like the copy of the file or folder to be called\n\nTry running the following inside your terminal_practice folder:\ncp notes.txt copy_of_notes.txt\nIf you run ls again, you should now you have two files: the original (notes.txt) and the new copy (copy_of_notes.txt).\nAs we said before, the cp command can also copy whole directories. However, it’s a little more nuanced. If you’d like to learn more about copying folders, please see appendix XXX.\n📍 A note about destination folders: Bash will check to see if the folder you gave it already exists. If it doesn’t, Bash will create the new folder for you and place the file inside of it.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#moving-or-renaming-files-mv",
    "href": "terminal/02-making-files-folders.html#moving-or-renaming-files-mv",
    "title": "3  Making and managing folder",
    "section": "3.4 Moving or Renaming Files (mv)**",
    "text": "3.4 Moving or Renaming Files (mv)**\nMoving files or folders from command line is also easy using the mv command. The command can also by used to rename files, depending on the syntax you use.\n\nmv is shorthand for “move”\n\nSyntax of the mv command\nTo move a file’s location, use the following syntax:\nmv source_file destination_folder\nIf you just want to rename a file, use the following syntax:\nmv oldname.txt newname.txt\nWe’ll practice the two ways to use the mv command in the next exercise.\n\n3.4.1 📝 Mini exercise: move and rename a file\nPart 1: move a file\n\nMake new subdirectory: run the command mkdir my_new_folder to make a new folder in your terminal_practice directory.\nPeek at our files: run ls to look at the files inside your terminal_practice folder to make sure the new folder is there.\nMove your notes.txt file: Move the copy of your notes files into the new sub-folder in your directory by running the following command: mv copy_of_notes.txt my_new_folder/\nCheck that it worked: run ls to look at the files inside your terminal_practice folder. You should still see a new folder called `my_new_folder but you should not see the copy of your notes file.\nLocate your notes copy file: run cd my_new_folder to move into your new folder. Then run ls to peek at the files. You should see your copy of the notes file listed.\n\nPart 2: rename a file\n\nRename your notes copy file: From inside your new folder, rename the copy of your notes file by running the following command: mv copy_of_notes.txt notes_new.txt\nCheck that it worked: run ls to look at your files. You should see the copy of your notes files, but now with a new name",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#deleting-files-and-folders-rm",
    "href": "terminal/02-making-files-folders.html#deleting-files-and-folders-rm",
    "title": "3  Making and managing folder",
    "section": "3.5 Deleting Files and Folders (rm)",
    "text": "3.5 Deleting Files and Folders (rm)\nYou can also use the command line to delete files and folders on your machine using the rm command.\n\nrm is shorthand for “remove”\n\nThis command does require some caution because when you delete something from the Terminal, it doesn’t go to the Trash — it’s gone.\nSyntax of the rm command:\nDeleting a single file:\nrm name_file_to_delete\nDeleting a folder (and everything inside it):\nrm -r folder_to_delete\n📍 Note: The -r here is called a flag. It stands for “recursive” — it tells rm to delete not just the folder, but also anything inside it. We’ll talk a little more about flags in the next section.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#checkpoint",
    "href": "terminal/02-making-files-folders.html#checkpoint",
    "title": "3  Making and managing folder",
    "section": "3.7 🎯 Checkpoint",
    "text": "3.7 🎯 Checkpoint\nPhew. In this chapter you’ve learned a lot:\n\nHow to create a new folder/directory (mkdir)\nHow to create a new file (touch file_name)\nHow to copy files (cp ..)\nHow to move and rename files (mv..)\nHow flags can be used to power-up commands\n\n\nNext up:\nWe’ll learn some key tips and tricks to make your command line workflow more efficient.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/02-making-files-folders.html#quick-note-about-flags",
    "href": "terminal/02-making-files-folders.html#quick-note-about-flags",
    "title": "3  Making and managing folder",
    "section": "3.6 Quick Note About Flags 🏳️",
    "text": "3.6 Quick Note About Flags 🏳️\nFlags are extra options you can add to commands to change how they behave.\n\nThey’re usually a dash plus one or two letters. (Example: -r means “recursive” for rm)\nYou can combine flags too (like -rf for rm -r -f, meaning “recursive” and “force delete”).\n\nYou’ll see flags often out in the wild. As you use the command line more, you’ll start to use more of these flags in your workflow to give you more control over what your commands do. For now, just know when you see something starting with a dash, it’s probably a flag to add a little extra to the primary command.\nOptional exercise:\nIf you want, try one out yourself now by using the -l flag along with the ls command.The flag tells the command line, “give me more information about each file in my directory”.\nRun the following command:\nls -l \nTerminal will respond with detailed information about each file and folder in your directory. See the screenshot below for more information about each detail field.\n\n\n\nBreakdown of each file detail in the -l flag Terminal response",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making and managing folder</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#pro-tip-speed-up-with-tab-completion",
    "href": "terminal/01-moving-around.html#pro-tip-speed-up-with-tab-completion",
    "title": "2  Moving Around in the Terminal",
    "section": "2.7 🔥 Pro Tip: Speed Up with Tab Completion",
    "text": "2.7 🔥 Pro Tip: Speed Up with Tab Completion\nOk, now that you’ve got some practice typing things into Terminal, we’ll let you in on a big time-saver: when you start typing a folder name, you don’t have to type the whole thing.\nHit the Tab key after typing part of your folder name and the Terminal will try to auto-complete it for you.\nSee it for yourself by typing:\ncd Doc\nthen press Tab.\n\nIf there’s a Documents folder, Terminal will fill in the rest automatically!\n\nHuge time saver.\nRemember, you’ll still need to hit Enter to run the command and move into the Documents folder though.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/01-moving-around.html#checkpoint",
    "href": "terminal/01-moving-around.html#checkpoint",
    "title": "2  Moving Around in the Terminal",
    "section": "2.8 🎯 Checkpoint",
    "text": "2.8 🎯 Checkpoint\nIn this chapter you’ve learned:\n\nHow to see what’s inside a folder (ls)\nHow to move into a folder (cd foldername)\nHow to move back up (cd ..)\nHow to use Tab to speed things up\n\nAt this point you’ve started to learn some of the basics of “speaking” Bash.\n\nNext up:\nWe’ll learn how to create your own files and folders in the Terminal.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Moving Around in the Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html",
    "href": "terminal/03-tips-tricks.html",
    "title": "4  Command line tips and tricks",
    "section": "",
    "text": "4.1 Command History\nIn this brief chapter, we’ll touch on a few things that should help you work quicker in the Terminal. We’ll also touch on navigating common issues you’ll probably run into.\nThe command line keeps a history of the commands you give it. Much like scrolling back up through the messages in a conversation on your phone, you can “scroll up” through the conversation you’ve had with the Terminal (only withe Terminal, you’ll only see the messages you sent).\nHow to view your command history:\nTo see prior commands you’ve written, just press the up arrow ↑ on your keyboard. Each press will take you to the prior command in your history.\nTo get back to an empty prompt, scroll back down using the down arrow ↓\nYou can re-run any command that pops up simply by hitting the Enter / return key on your keyboard. No need to re-type things!\nWhy this is useful\nIn programming, we often repeat commands quite frequently (think about how often you re-run your notebook code in R-Studio, for example).\nHaving a command history is helpful because it:",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#canceling-a-command",
    "href": "terminal/03-tips-tricks.html#canceling-a-command",
    "title": "4  Command line tips and tricks",
    "section": "4.2 Canceling a Command",
    "text": "4.2 Canceling a Command\nOne of the scariest things for new Terminal users happens when you run something you didn’t mean to.\nIf you realize you made a mistake while a command is running, press:\nCtrl + C\nThis cancels the running command and brings you back to the prompt.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#tab-completion-again-because-its-that-good",
    "href": "terminal/03-tips-tricks.html#tab-completion-again-because-its-that-good",
    "title": "4  Command line tips and tricks",
    "section": "4.3 Tab Completion (Again, Because It’s That Good)",
    "text": "4.3 Tab Completion (Again, Because It’s That Good)\nRemember: start typing a folder or file name, press Tab, and Terminal finishes it for you if possible.\nSaves time and typos!",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#installing-software",
    "href": "terminal/03-tips-tricks.html#installing-software",
    "title": "4  Command line tips and tricks",
    "section": "4.4 Installing Software",
    "text": "4.4 Installing Software\nLater on, you’ll learn about package managers that make installing programs super easy from the Terminal.\nFor now, just know these examples:\n\nMac: brew install something\nLinux: apt install something\nWindows: choco install something\n\n(We’ll leave installations for a future guide, so you don’t get overwhelmed.)",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/04-troubleshooting.html",
    "href": "terminal/04-troubleshooting.html",
    "title": "5  Troubleshooting",
    "section": "",
    "text": "5.1 Common pitfalls and errors\nIn this final chapter, let’s touch quickly on navigating common issues you might run into using the Terminal.\nHere’s a quick rundown of the most common problems and errors you’ll run into using the command line. Even experienced developers run into these issues, so learning what they mean will go a long way when troubleshooting.\nFor more common issues and how to fix them, see the common errors table in the Glossary at the end of this guide.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "terminal/04-troubleshooting.html#how-to-get-out-of-vim",
    "href": "terminal/04-troubleshooting.html#how-to-get-out-of-vim",
    "title": "5  Troubleshooting",
    "section": "5.2 How to Get Out of Vim",
    "text": "5.2 How to Get Out of Vim\nEvery new command line user shares one panic-inducing experience at one point or another: accidentally opening Vim and not knowing how to get out of it.\nIn this section, we’ll briefly walk you through what Vim is and how to exit it so you don’t panic when this (inevitably) happens to you.\nWhat is Vim?\nVim is a text editor built into most Unix systems, including macOS and Linux. It’s used by developers to edit code and configuration files, but it works very differently from regular text editors.\nIf you accidentally open something in Vim (for example, by running git commit without a message), it might look like you’re stuck. But don’t worry — here’s how to exit safely.\nHow to Exit Vim\nIf you don’t want to save any changes - most common:\n\nPress Esc (to make sure you’re not in input mode)\nType :q! (to “quit and ignore changes”)\nHit Enter / return (to exit)\n\nIf You do want to save changes - less common:\n\nPress Esc\nType :wq (to “write and quit”).\nPress Enter / return",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#command-history",
    "href": "terminal/03-tips-tricks.html#command-history",
    "title": "4  Command line tips and tricks",
    "section": "",
    "text": "Saves time – You can quickly repeat or modify previous commands with the ↑ key instead of retyping them.\nReduces mistakes – Reusing known-good commands lowers the chance of typos or syntax errors.\nAids learning – You can review what you’ve done, which helps you remember your steps and can help with troubleshooting if something goes wrong.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#tab-completion",
    "href": "terminal/03-tips-tricks.html#tab-completion",
    "title": "4  Command line tips and tricks",
    "section": "4.3 Tab Completion",
    "text": "4.3 Tab Completion\nYou read about this in Chapter 2, but it’s worth mentioning again because it’s that good.\nRemember: start typing a folder or file name, press Tab, and Terminal finishes it for you if possible.\nSaves time and typos!\nIf there’s more than one similarly-named files in your folder, you may have to type more characters to get to the one you want.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/04-troubleshooting.html#common-pitfalls-and-errors",
    "href": "terminal/04-troubleshooting.html#common-pitfalls-and-errors",
    "title": "5  Troubleshooting",
    "section": "",
    "text": "Command not found? You might have a typo or the program isn’t installed.\nNo such file or directory? You’re trying to access a file/path that doesn’t exist. Check that the file exists and that your spelled it correctly.\nPermission denied?\nYou tried to do something you don’t have permission to do. Check your file/repo permissions.\nSyntax error\nYou typed a command in a way the shell doesn’t understand. Check that your syntax is correct and error-free.\nStuck in a weird app inside Terminal?\nTry pressing Ctrl + C or Ctrl + D to exit.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html",
    "href": "terminal/05-glossary.html",
    "title": "6  Glossary: quick reference",
    "section": "",
    "text": "6.1 Terminology",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#troubleshooting-common-errors",
    "href": "terminal/05-glossary.html#troubleshooting-common-errors",
    "title": "6  Cheat sheets",
    "section": "",
    "text": "❌ Error\n📖 What It Means\n💡 Fix\n\n\n\n\ncommand not found\nYou typed a command the shell doesn’t recognize\nCheck for typos or whether the tool is installed\n\n\nNo such file or directory\nYou’re trying to access a file/path that doesn’t exist\nUse ls to explore and make sure the path is correct\n\n\nPermission denied\nYou tried to do something you don’t have permission for\nUse sudo (if appropriate), or check file permissions\n\n\nIs a directory\nYou tried to treat a directory like a file\nDouble-check what kind of thing you’re trying to use\n\n\nNot a directory\nYou tried to treat a file like a folder\nUse ls -l to see what’s a file vs folder\n\n\nSyntax error\nYou typed a command in a way the shell can’t parse\nReview the correct syntax, especially quotes or flags\n\n\nKilled or Terminated\nThe OS stopped a program (often for high memory/CPU usage)\nTry a smaller task or check system limits\n\n\nGetting stuck in VIM\nYou opened something in vim and can’t exit\nPress Esc, then :q!, then Enter to quit",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cheat sheets</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#common-errors",
    "href": "terminal/05-glossary.html#common-errors",
    "title": "6  Glossary: quick reference",
    "section": "6.3 Common errors",
    "text": "6.3 Common errors\n\n\n\n\n\n\n\n\n❌ Error\n📖 What It Means\n💡 Fix\n\n\n\n\ncommand not found\nYou typed a command the shell doesn’t recognize\nCheck for typos or whether the tool is installed\n\n\nNo such file or directory\nYou’re trying to access a file/path that doesn’t exist\nUse ls to explore and make sure the path is correct\n\n\nPermission denied\nYou tried to do something you don’t have permission for\nUse sudo (if appropriate), or check file permissions\n\n\nIs a directory\nYou tried to treat a directory like a file\nDouble-check what kind of thing you’re trying to use\n\n\nNot a directory\nYou tried to treat a file like a folder\nUse ls -l to see what’s a file vs folder\n\n\nSyntax error\nYou typed a command in a way the shell can’t parse\nReview the correct syntax, especially quotes or flags\n\n\nKilled or Terminated\nThe OS stopped a program (often for high memory/CPU usage)\nTry a smaller task or check system limits\n\n\nGetting stuck in VIM\nYou opened something in vim and can’t exit\nPress Esc, then :q!, then Enter to quit",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/04-troubleshooting.html#final-words",
    "href": "terminal/04-troubleshooting.html#final-words",
    "title": "5  Troubleshooting",
    "section": "5.3 🎉 Final Words",
    "text": "5.3 🎉 Final Words\nCongratulations! You’ve made it to the end of the Intro to Terminal guide.\nYou’ve now learned:\n\nHow to open the Terminal\nHow to move around\nHow to create and manage files and folders\nHow to read and use simple flags\nHow to fix common mistakes\n\nYou’ve built a real foundation for anything else you’ll learn later — whether that’s coding, scripting, data science, or just being more powerful with your own computer.\nRemember: the Terminal is your friend.\nKeep practicing — the more you use it, the more natural it will feel.\nGood job! 🚀",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#command-line-cheat-sheet",
    "href": "terminal/05-glossary.html#command-line-cheat-sheet",
    "title": "6  Glossary: quick reference",
    "section": "",
    "text": "Term\nMeaning\n\n\n\n\nTerminal\nText-based way to control your computer\n\n\nDirectory (Folder)\nA container for files\n\n\nPath\nThe location of a file or folder\n\n\nFlag\nExtra option for a command\n\n\npwd\nShow current directory (path)\n\n\nls\nList files and folders\n\n\nls -l\nList with detailed info\n\n\ncd foldername\nChange into a folder\n\n\ncd ..\nMove up one folder\n\n\nmkdir name\nMake a new folder\n\n\ntouch name.txt\nCreate a blank file\n\n\ncp old new\nCopy a file\n\n\nmv old new\nMove or rename a file\n\n\nrm file\nDelete a file\n\n\nrm -r folder\nDelete a folder and its contents\n\n\nCtrl + C\nCancel a running command\n\n\nTab\nAutocomplete file/folder names",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#reference",
    "href": "terminal/05-glossary.html#reference",
    "title": "6  Glossary: quick reference",
    "section": "",
    "text": "Term\nMeaning\n\n\n\n\nTerminal\nText-based way to control your computer\n\n\nDirectory (Folder)\nA container for files\n\n\nPath\nThe location of a file or folder\n\n\nFlag\nExtra option for a command\n\n\npwd\nShow current directory (path)\n\n\nls\nList files and folders\n\n\nls -l\nList with detailed info\n\n\ncd foldername\nChange into a folder\n\n\ncd ..\nMove up one folder\n\n\nmkdir name\nMake a new folder\n\n\ntouch name.txt\nCreate a blank file\n\n\ncp old new\nCopy a file\n\n\nmv old new\nMove or rename a file\n\n\nrm file\nDelete a file\n\n\nrm -r folder\nDelete a folder and its contents\n\n\nCtrl + C\nCancel a running command\n\n\nTab\nAutocomplete file/folder names",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#terminology-reference",
    "href": "terminal/05-glossary.html#terminology-reference",
    "title": "6  Glossary: quick reference",
    "section": "",
    "text": "📓 Term\n📖 What It Means\n\n\n\n\nTerminal\nText-based way to control your computer\n\n\nDirectory (Folder)\nA container for files\n\n\nPath\nThe location of a file or folder\n\n\nFlag\nExtra option for a command",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#common-commands",
    "href": "terminal/05-glossary.html#common-commands",
    "title": "6  Glossary: quick reference",
    "section": "6.2 Common commands",
    "text": "6.2 Common commands\n\n\n\n📝 Command\n️💬 Action\n\n\n\n\npwd\nShow current directory (path)\n\n\nls\nList files and folders\n\n\nls -l\nList with detailed info\n\n\ncd foldername\nChange into a folder\n\n\ncd ..\nMove up one folder\n\n\nmkdir name\nMake a new folder\n\n\ntouch name.txt\nCreate a blank file\n\n\ncp old new\nCopy a file\n\n\nmv old new\nMove or rename a file\n\n\nrm file\nDelete a file\n\n\nrm -r folder\nDelete a folder and its contents\n\n\nCtrl + C\nCancel a running command\n\n\nTab\nAutocomplete file/folder names",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/05-glossary.html#terminology",
    "href": "terminal/05-glossary.html#terminology",
    "title": "6  Glossary: quick reference",
    "section": "",
    "text": "📓 Term\n📖 What It Means\n\n\n\n\nCommand line\nThe interface where you type and run text commands\n\n\nShell\nThe program that interprets your commands and runs them (e.g. bash, zsh)\n\n\nTerminal\nThe user interface that displays the shell and lets you interact with it. Examples: Terminal (Mac), Git Bash (Windows)\n\n\nDirectory (Folder)\nA container for files\n\n\nPath\nThe location of a file or folder\n\n\nFlag\nExtra option for a command",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Glossary: quick reference</span>"
    ]
  },
  {
    "objectID": "terminal/00-introduction.html#checkpoint",
    "href": "terminal/00-introduction.html#checkpoint",
    "title": "1  Welcome and launch",
    "section": "1.5 🎯 Checkpoint",
    "text": "1.5 🎯 Checkpoint\nYou’ve made it to the end of chapter 1. Good job!\nYou’ve now:\n\nOpened the Terminal.\nTyped and ran your first command.\nSeen your computer respond back.\n\nYou’re officially no longer a Terminal beginner. 🙌\nA few quick Tips Before You Move On to the next chapter:\n\nCommand Case Matters in the Terminal: pwd is not the same as PWD.\nPress Enter: Every command you type needs an Enter to run.\nYou can’t break things easily: Typing pwd won’t hurt your computer.\n(In fact, almost everything we’ll do in this guide will be safe.)\n\n\nNext up:\nWe’ll learn how to move around inside your computer using simple commands. Whenever you’re ready, proceed to the next chapter.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome and launch</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#final-words",
    "href": "terminal/03-tips-tricks.html#final-words",
    "title": "4  Command line tips and tricks",
    "section": "4.4 🎉 Final Words",
    "text": "4.4 🎉 Final Words\nYou’ve now learned:\n\nHow to open the Terminal\nHow to move around\nHow to create and manage files and folders\nHow to read and use simple flags\nHow to fix common mistakes\n\nYou’ve built a real foundation for anything else you’ll learn later — whether that’s coding, scripting, data science, cybersecurity, or just being more powerful with your own computer.\nThe Terminal is your friend.\nKeep practicing — the more you use it, the more natural it will feel.\nGood job! 🚀",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "terminal/03-tips-tricks.html#checkpoint",
    "href": "terminal/03-tips-tricks.html#checkpoint",
    "title": "4  Command line tips and tricks",
    "section": "4.4 🎯 Checkpoint",
    "text": "4.4 🎯 Checkpoint\nIn this chapter you’ve learned:\n\nHow to view your command history\nHow to cancel a command\nHow to use tab to auto-complete file and folder names\n\n\nNext up:\nWe’ll learn how about some common command line issues and how troubleshoot when you run into them.",
    "crumbs": [
      "Part 3: Tips, tricks, troubleshooting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Command line tips and tricks</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#introduction-to-version-control",
    "href": "intro-to-git/00-introduction.html#introduction-to-version-control",
    "title": "7  Welcome and overview",
    "section": "",
    "text": "Track changes you make to your project files.\nSave “snapshots” (called commits) of your project over time.\nGo back to an earlier snapshot if needed.\nSee what exactly changed between versions.\nWork with teammates without messing up each others’ work.\n\n\n\n\n\nStore your Git project safely in the cloud.\nShare your project with others.\nCollaborate with other people (even if they are far away).\nKeep a backup in case your computer crashes.\n\n\n\n\n\nGit = tool you use on your computer to track changes.\nGitHub = website where you can upload (and share) your Git projects.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Welcome and overview</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-introduction-to-git.html",
    "href": "intro-to-git/01-introduction-to-git.html",
    "title": "8  Introduction to version control",
    "section": "",
    "text": "8.1 Introduction to Version control\nIn this chapter, we’ll talk about the benefits of using version control to track changes in your coding projects. We’ll also explain how Git and Github allow store versions of our projects online so we can collaborate with others.\nWhat is version control?\nVersion control is a system that helps you track and manage changes to files over time. It lets you save different versions of your work, go back to earlier versions if you make a mistake, and work with other people without overwriting each other’s changes.\nImagine you’re writing a paper. Every time you make a big edit, you save a new copy: paper_v1.docx, paper_v2.docx, paper_final.docx, etc.\nIt’s easy to see how it could become difficult to keep track of which version was which using this kind of a system. Now imagine how much messier and unwieldy it could be trying to keep track of different versions of an R project with changes in multiple .qmd file —&gt; enter version control.\nVersion control keeps track of these different versions for you. Have you ever used the versions feature in Google docs when working on an article draft? Then you’ve interacted with version control.\nWhat is Git?\nTo keep track of versions of coding projects, programmers use a version control tool called Git. It runs on your computer and helps you:\nYou can think of Git like the “save game” feature on a video game. Instead of saving the progress of your character in your game, Git saves your progress in your coding files. But just like in many games, we have to tell Git when and how to save a new version.\nThis is where Github comes in.\nWhat is Github?\nGitHub is a website that hosts Git repositories (your project + its history) online.\nGithub lets you:\nIf Git is a notebook where you track all your work, GitHub is like an online library where you can store a copy of that notebook — and invite others to read it or even help you write in it.\nTo recap:\nNext up:\nWe’ll get our computers and accounts setup to use Git.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to version control</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-introduction-to-git.html#introduction-to-version-control",
    "href": "intro-to-git/01-introduction-to-git.html#introduction-to-version-control",
    "title": "8  Introduction to version control",
    "section": "",
    "text": "Track changes you make to your project files.\nSave “snapshots” (called commits) of your project over time.\nGo back to an earlier snapshot if needed.\nSee what exactly changed between versions.\nWork with teammates without messing up each others’ work.\n\n\n\n\n\n\n\nStore your Git project safely in the cloud.\nShare your project with others.\nCollaborate with other people (even if they are far away).\nKeep a backup in case your computer crashes.\n\n\n\n\nVersion control: Describes the system of tracking changes to your files over time so you can revisit or undo edits, collaborate with others, and keep a history of your work.\nGit: a version control tool you use on your computer to track changes.\nGitHub: a website where you can upload (and share) your Git projects.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to version control</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html",
    "href": "intro-to-git/02-install-and-setup.html",
    "title": "Setup",
    "section": "",
    "text": "9.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#step-1-install-the-tools",
    "href": "intro-to-git/02-install-and-setup.html#step-1-install-the-tools",
    "title": "Setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "href": "intro-to-git/02-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "title": "Setup",
    "section": "9.2 Step 2: Set Up Git in the Terminal",
    "text": "9.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your username and email.\n\nGit usernames: Usernames are what git uses to associate your work with your identity.\nGit email: The email you used to setup your Github account.\n\nStep 1: Start a new Terminal session in RStudio\nClick on the Terminal tab and a new session will be created (if there isn’t one already). The Terminal tab is located next to the Console tab.\n\nTip: If can’t find the Terminal tab, go to Tools &gt; Terminal &gt; Move Focus to Terminal .\n\nStep 2: Set your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nStep 3: Setting your git email\nThe email you enter needs to match the one you used to setup your Github account. If it doesn’t, you’ll run into permissions issues later.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email (including the quotation marks):\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "href": "intro-to-git/02-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "title": "9  Installation and setup",
    "section": "9.3 Exercise 1: Confirm Your Git Setup",
    "text": "9.3 Exercise 1: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n9.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#what-do-these-flags-mean",
    "href": "intro-to-git/02-install-and-setup.html#what-do-these-flags-mean",
    "title": "Setup",
    "section": "9.4 🧠 What Do These Flags Mean?",
    "text": "9.4 🧠 What Do These Flags Mean?\nLet’s break down some of the options you’ve used:\n\n--global: This means “apply this setting for all projects on my computer.”\nYou usually only need to set your name and email globally once.\n--list: This tells Git to “show me my current configuration.”\n\nThe process of configuring Git and GitHub is a one-time setup and it can be a little esoteric. There will be a part where we describe to Git who you are, and then another to set up authentication to Github.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html",
    "href": "intro-to-git/03-making-a-repo.html",
    "title": "10  Make our Git project",
    "section": "",
    "text": "11 Make a git project",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "href": "intro-to-git/03-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "title": "10  Making a repository",
    "section": "",
    "text": "File → New Project → New Directory → Quarto Project\n\n\nSelect New directory in Create Project.\nSelect Quarto project as the Project Type.\nGive your directory a descriptive name like my-first-git-project.\nCheck the Create project as a subdirectory of to make sure you’re creating your project in the directory where you keep your class or coding projects (ideally a projects folder inside your home directory).\nFinallay, click Create Project.\n\n\n\n\n10.1.1 Exercise 1: Run a Quarto File\nBefore we get into Git, let’s test Quarto by creating a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…)\nAdd a title like “Intro to Git”, and click Create\nSave the file and name it something like 01-index.qmd when prompted\nClick Render in the top bar\n\nYou should see an HTML preview with sample content. Great! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#step-2-initialize-git-for-the-project",
    "href": "intro-to-git/03-making-a-repo.html#step-2-initialize-git-for-the-project",
    "title": "10  Making a repository",
    "section": "10.2 Step 2: Initialize Git for the Project",
    "text": "10.2 Step 2: Initialize Git for the Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need initialize git inside of our Quarto project.\nTo initialize Git in your Quarto project, Click the Terminal tab in RStudio (usually lower-left)\nInside Terminal, type the following command and run it (by hitting enter):\ngit init\nIn basic terms, this tells Git “I want you to start tracking this folder.”\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "href": "intro-to-git/03-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "title": "10  Making a repository",
    "section": "10.3 🗂️ Step 3: Tell Git What Files to Track",
    "text": "10.3 🗂️ Step 3: Tell Git What Files to Track\nNow that we’ve let Git know that we want it to start watching our project, we’ll also need to tell git what files we would like it to keep track of.\nFirst, let’s ask Git what it “sees” in our project folder by running:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nNow, let’s breakdown what this all means:\n\nOn branch main: You’re working on the main branch — the default starting line of development.\nNo commits yet: This means Git is ready, but you haven’t saved any versions yet.\nUntracked Files: These are files Git sees in your folder, but it’s not saving changes to them yet. They’re marked in red in the terminal and the RStudio Git tab.\n\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html",
    "href": "intro-to-git/04-add-files.html",
    "title": "11  Add, ignore, and commit files",
    "section": "",
    "text": "11.1 Ignoring files\nIn our last chapter, we ran the git status command to tell us what Git sees within our project.\nLet’s take another look at those files now by re-running:\nUnder untracked files you’ll see a list like:\nNotice those .html files in the list? HTML files are the rendered output from Quarto, and they change every time you make a change and click “Render.”\nGenerally-speaking, we don’t save these kinds of rendered files in our repositories because they change so frequently and can cause a lot of headaches during collaboration.\nThere are some notable exceptions here…\nNote for Crit: obviously let’s chat about this part and addressing the Github pages thing…My general thought with teaching people about github is that we should try our best to teach them best practices before teaching them exceptions to rules because it will help them be better prepared for real-world dev environments",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#ignoring-files",
    "href": "intro-to-git/04-add-files.html#ignoring-files",
    "title": "11  Add, ignore, and commit files",
    "section": "",
    "text": "git status\n\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\n\n\n\nThey’re small, essential, and need to be versioned for a specific reason\nYou’re outputting human-readable deliverables (like a PDF report or documentation site)\nYou’re working on a static site or book.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#introducing-.gitignore",
    "href": "intro-to-git/04-add-files.html#introducing-.gitignore",
    "title": "11  Add, ignore, and commit files",
    "section": "11.2 Introducing .gitignore",
    "text": "11.2 Introducing .gitignore\nIn a Git project, there are several types of files and directories that you typically want to keep out of our repositories to keep things clean, secure, and easy to manage.\nWhat you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what it shouldn’t be tracking in the project.\nIn general, the following kinds of files shouldn’t be tracked in Github:\n\nSensitive files: Files containing passwords or private information\nBig files: Git isn’t built to keep track of large files.\n\nFor R and Quarto projects, this will include the following common files types:\n\nSession and history files: .Rhistory, .RData, .Rproj.user/\nKnitting files: .utf8.md, .knit.md\nOutput/render folders: *_files/ ,_site/, _book/\nEditor and IDE Config Files: .Rproj.user/\n\nDon’t worry if you don’t fully understand what all of these files are yet. The important thing here is to know is that there are things we should and should not upload to Git, and the way we keep the things we don’t want tracked out of Github is by using a .gitignore file.\nWe’ll set one up for our new project in the next step.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#add-the-files-you-do-want-staging",
    "href": "intro-to-git/04-add-files.html#add-the-files-you-do-want-staging",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Add the Files You Do Want (Staging)",
    "text": "11.4 Add the Files You Do Want (Staging)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#take-your-first-snapshot-commit",
    "href": "intro-to-git/04-add-files.html#take-your-first-snapshot-commit",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Take your first Snapshot (Commit)",
    "text": "11.5 Take your first Snapshot (Commit)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html",
    "href": "intro-to-git/05-pushing-to-github.html",
    "title": "12  Pushing to Github",
    "section": "",
    "text": "12.1 Create a Repository on GitHub\nNow that your project has been committed locally, let’s put it on GitHub so you can back it up and collaborate with others.\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.\nIn the Quick setup — if you’ve done this kind of thing before box:",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#step-1-create-a-repository-on-github",
    "href": "intro-to-git/05-pushing-to-github.html#step-1-create-a-repository-on-github",
    "title": "12  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nComplete the form by doing the following:\n\nFill in the Repository name field, using the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank for now\nLeave the box unchecked that says “Initialize this repository with a README” (We can add this on our own later)\nClick Create repository",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "href": "intro-to-git/05-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "title": "12  Pushing to Github",
    "section": "12.2 Step 2: Connect Your Local Git Project to GitHub",
    "text": "12.2 Step 2: Connect Your Local Git Project to GitHub\nIn the Quick setup — if you’ve done this kind of thing before box, click the copy button next to the SSH URL box.\nNavigate to the Terminal tab inside your RStudio Quarto project, type the following command but replace the repo name with the one you just copied from Github:\ngit remote add origin git@github.com:your-name/your-repo-name.git\nNow run the command by hitting enter.\nNow we’ll set our main branch name to main by running:\ngit branch -M main\nLastly, we’ll push our main branch to Github by running:\ngit push -u origin main",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#recap-what-do-these-commands-do",
    "href": "intro-to-git/05-pushing-to-github.html#recap-what-do-these-commands-do",
    "title": "12  Pushing to Github",
    "section": "12.3 Recap: What Do These Commands Do?",
    "text": "12.3 Recap: What Do These Commands Do?\nOk, we just did a lot there. Let’s pause for a moment and breakdown everything we just did:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: up a link between your local main branch and the main branch on GitHub. “Pushing” uploaded your local commits (the ones we did in the last section) to GitHub.\n\nIn short, these steps connected your local project to your Github repository, then saved the snapshot you took to the cloud. We also won’t have to repeat these exact steps ever again when saving snapshots in the future.\n🎉 Congratulations: you now have your first live project is on GitHub!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#exercise-3-explore-your-github-project",
    "href": "intro-to-git/05-pushing-to-github.html#exercise-3-explore-your-github-project",
    "title": "12  Pushing to Github",
    "section": "12.4 🎯 Exercise 3: Explore Your GitHub Project",
    "text": "12.4 🎯 Exercise 3: Explore Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project.\nIncluding:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#checkin-point.",
    "href": "intro-to-git/05-pushing-to-github.html#checkin-point.",
    "title": "12  Pushing to Github",
    "section": "12.5 Checkin point.",
    "text": "12.5 Checkin point.\nAt this point in the guide, you’ve learned how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html",
    "href": "intro-to-git/06-updating-your-repo.html",
    "title": "13  Updating files",
    "section": "",
    "text": "13.1 Make a Small Change\nYou’ll also practice writing good commit messages and checking your work.\nLet’s open your Quarto file you made in Chapter 1 (e.g., 01-index.qmd) and make a couple changes.\nReplace the auto-generated text and code blocks in the file with the following:\nUnder the summary header and description, add a new code block with the following:\nThen save the file.\nNow check the status in your Terminal again by running:\nThe Terminal should respond with something like this:\nLet’s break this down :",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#goal",
    "href": "intro-to-git/06-updating-your-repo.html#goal",
    "title": "13  Making and pushing changes",
    "section": "",
    "text": "Make a meaningful change to your project\nStage and commit that change using Git\nPush the change to GitHub to save your work.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#step-1-make-a-small-change",
    "href": "intro-to-git/06-updating-your-repo.html#step-1-make-a-small-change",
    "title": "13  Updating files",
    "section": "",
    "text": "---\ntitle: \"Intro to Git\"\nformat: html\n---\n\n# Summary\n\nHere is a summary of the `mtcars` dataset.\n\nsummary(mtcars)\n\ngit status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   01-index.qmd",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#step-3-stage-the-change",
    "href": "intro-to-git/06-updating-your-repo.html#step-3-stage-the-change",
    "title": "13  Updating files",
    "section": "13.2 📥 Step 3: Stage the Change",
    "text": "13.2 📥 Step 3: Stage the Change\nWe want to tell Git, “Hey, save this file in the next snapshot.”\nWe’ll do this by adding the modified file to the snapshot. We can do that by running:\ngit add 01-index.qmd\nNow, check the status again.\ngit status\nNow you’ll see your file in green and following message:\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  modified:   01-index.qmd`\n🎉 Great! The change is now staged.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#step-4-commit-the-change",
    "href": "intro-to-git/06-updating-your-repo.html#step-4-commit-the-change",
    "title": "13  Updating files",
    "section": "13.3 Step 4: Commit the Change",
    "text": "13.3 Step 4: Commit the Change\nNow, we’ll save the snapshot (in Git’s memory). When we do so, we’ll want to include a descriptive commit message noting what we changed.\nType something like the following and git enter\ngit commit -m \"Add summary of mtcars dataset\"\nA few best practices for commit messages:\n✅ Use present tense: \"Add summary of...\", not \"Added...\"\n✅ Keep it short but descriptive\n✅ Think: “What changed in this version?”\n🕵️‍♀️ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or you need to go back to a prior version, commit messages will help your retrace your steps.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#step-5-push-it-to-github",
    "href": "intro-to-git/06-updating-your-repo.html#step-5-push-it-to-github",
    "title": "13  Updating files",
    "section": "13.4 ☁️ Step 5: Push It to GitHub",
    "text": "13.4 ☁️ Step 5: Push It to GitHub\nNow, we’ll send the snapshot from your computer to GitHub by running:\ngit push\nNow go to your repository on Github — you’ll see your commit listed under the Commits tab and your file under Code!\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why our push command is shorter than it was last time. In our last push, we needed to connect our remote main branch to the remote Github repository. Since we’re already connected our Quarto project to Github and set our branch to main, we can just use the git push command now.\n\n\n\n💡 GitHub is now your project’s cloud backup and collaboration hub.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#exercise-confirm-your-git-setup",
    "href": "intro-to-git/02-install-and-setup.html#exercise-confirm-your-git-setup",
    "title": "9  Installation and setup",
    "section": "9.3 Exercise: Confirm Your Git Setup",
    "text": "9.3 Exercise: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n9.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#mini-exercise-confirm-your-git-setup",
    "href": "intro-to-git/02-install-and-setup.html#mini-exercise-confirm-your-git-setup",
    "title": "Setup",
    "section": "9.3 📝 Mini exercise: Confirm Your Git Setup",
    "text": "9.3 📝 Mini exercise: Confirm Your Git Setup\nIn RStudio’s Terminal tab, type and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\ngit config --list\nLook for your name and email in the list. If you see them, you’re all set! ✅\nIf not, go back and run:\ngit config --global user.name \"Your Name\"\nand\ngit config --global user.email \"your.email@example.com\"\nRun git config --list and make sure both of these are correct before moving on.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#checkpoint",
    "href": "intro-to-git/02-install-and-setup.html#checkpoint",
    "title": "Setup",
    "section": "9.8 🎯 Checkpoint",
    "text": "9.8 🎯 Checkpoint\nIn this chapter you:\n\nDownloaded Git\nSetup your Github account\nSet your Git username (with an appropriate name or alias)\nSet your Git email (using the email on your account Github account)\n\nNow that Git is configured, you’re ready to create your first project.\n\nNext up\nIn the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start using the terminal.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#create-a-new-rstudio-project",
    "href": "intro-to-git/03-making-a-repo.html#create-a-new-rstudio-project",
    "title": "10  Make our Git project",
    "section": "11.1 Create a new RStudio Project",
    "text": "11.1 Create a new RStudio Project\nBefore you can add anything to Github, you need to create the Quarto project you’ll be tracking.\nMake a new Quarto project in RStudio by going to:\nFile → New Project → New Directory → Quarto Project\nIn the “Create Quarto Project” window, do the following:\n\nDirectory Name field: Give your directory a descriptive name like my-first-git-project.\nCreate project as a subdirectory of: Mke sure you’re creating your project in the directory where you keep your class or coding projects (ideally a projects folder inside your home directory).\nCheckboxes: Make sure none of the boxes are checked.\nFinally, click Create Project.\n\nYou’ll now have a project with a .qmd file (Quarto).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#run-a-quarto-file",
    "href": "intro-to-git/03-making-a-repo.html#run-a-quarto-file",
    "title": "10  Make our Git project",
    "section": "11.2 Run a Quarto File",
    "text": "11.2 Run a Quarto File\nBefore we get into Git, let’s quickly make sure Quarto is working as expected by creating and rendering a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…).\nAdd a title like “Intro to Git”, and click Create.\nSave the file, and name it something like 01-index.qmd when prompted.\nClick Render in the top bar.\n\nA new browser window should open with an HTML preview of your file.\nGreat! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#initialize-git-for-the-project",
    "href": "intro-to-git/03-making-a-repo.html#initialize-git-for-the-project",
    "title": "10  Make our Git project",
    "section": "11.3 Initialize Git for the Project",
    "text": "11.3 Initialize Git for the Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need to initialize git inside of our Quarto project.\nIn basic terms, initializing tells Git “I want you to start tracking this folder.”\nInitialize Git in our new project:\nTo initialize Git in your Quarto project, Click the Terminal tab in RStudio (usually lower-left)\nType the following command and run it (by hitting enter):\ngit init\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#tell-git-what-files-to-track",
    "href": "intro-to-git/03-making-a-repo.html#tell-git-what-files-to-track",
    "title": "10  Make our Git project",
    "section": "11.4 Tell Git What Files to Track",
    "text": "11.4 Tell Git What Files to Track\nNow that we’ve let Git know that we want it to start watching our project, we’ll also need to tell git what files we would like it to keep track of.\nFirst, let’s ask Git what it “sees” in our project folder by running the following command in the Terminal tab:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLet’s quickly breakdown what this all means:\n\nOn branch main: You’re working on the main branch — the default starting branch for development.\nNo commits yet: This means Git is ready, but you haven’t saved any versions yet.\nUntracked Files: These are files Git sees in your folder, but it’s not saving changes to them yet. These files are marked in red in the terminal.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#ignoring-files",
    "href": "intro-to-git/03-making-a-repo.html#ignoring-files",
    "title": "10  Creating your first commit",
    "section": "10.5 Ignoring files",
    "text": "10.5 Ignoring files\nIn our last chapter, we ran the git status command to tell us what Git sees within our project.\nLet’s take another look at those files now by re-running:\ngit status\nUnder untracked files you’ll see a list like:\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\nNotice that .html file in the list. This .html file is the rendered output from Quarto, which changes every time you click “Render.” We generally do not save these kinds of rendered files in our repositories since it’s like saving every draft printout of a paper — not helpful.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#introducing-.gitignore",
    "href": "intro-to-git/03-making-a-repo.html#introducing-.gitignore",
    "title": "10  Creating your first commit",
    "section": "10.6 🙈 Introducing .gitignore",
    "text": "10.6 🙈 Introducing .gitignore\nIn a Git project, there are several types of files and directories that you typically want to keep out of our repositories to keep things clean, secure, and easy to manage. What you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what to ignore.\nIn general, the following kinds of files shouldn’t be tracked in Github:\n\nSensitive files: Files containing passwords or private information\nBig files: Git isn’t built to keep track of large files.\n\nFor R and Quarto projects, this will include the following common files types:\n\nSession and history files: .Rhistory, .RData, .Rproj.user/\nKnitting files: .utf8.md, .knit.md\nOutput/render folders: *_files/ ,_site/, _book/\nEditor and IDE Config Files: .Rproj.user/\n\nDon’t worry if you don’t fully understand what all of these files are yet. The important thing here is to know is that there are things we should and should not upload to Git, and the way we keep the things we don’t want in git out is by using a .gitignore file.\n\n10.6.1 Exercise 2: Make a .gitignore\nLet’s make a .gitignore now using the command line. Type the following code into the Terminal to make your new file using the touch command:\ntouch .gitignore\nThen open .gitignore in the Files pane in RStudio. If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.\nOnce you have your blank .gitignore file open, add the following lines:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nSave the file, then check your Git status again:\ngit status\nNow the .html file should be gone from the list of red files Git “sees” because we’ve told it to ignore these types of files. ✨\nBefore moving forward, let’s add a few more things to the .gitignore to cover all our bases.\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#add-the-files-you-do-want-staging",
    "href": "intro-to-git/03-making-a-repo.html#add-the-files-you-do-want-staging",
    "title": "10  Creating your first commit",
    "section": "10.7 ✅ Add the Files You Do Want (Staging)",
    "text": "10.7 ✅ Add the Files You Do Want (Staging)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#take-your-first-snapshot-commit",
    "href": "intro-to-git/03-making-a-repo.html#take-your-first-snapshot-commit",
    "title": "10  Creating your first commit",
    "section": "10.8 📸 Take your first Snapshot (Commit)",
    "text": "10.8 📸 Take your first Snapshot (Commit)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"\n✅ You’ve saved the first version of your project locally (AKA on your computer)! Next, we’ll learn how to send this “snapshot” of our project to Github for safe keeping.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-making-a-repo.html#checkpoint",
    "href": "intro-to-git/03-making-a-repo.html#checkpoint",
    "title": "10  Make our Git project",
    "section": "11.5 🎯 Checkpoint",
    "text": "11.5 🎯 Checkpoint\nIn this chapter you’ve: - Made a new git project - Initialized git inside your project\n– Next up\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore. Then we’ll take our first “snapshot” of our project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html",
    "href": "intro-to-git/03-make-git-project.html",
    "title": "10  Make our Git project",
    "section": "",
    "text": "10.1 Create a new RStudio Project\nBefore you can add anything to Github, you need a Quarto project to track.\nFollow the steps below to make a new Quarto project in RStudio:\nMake a new Quarto project\nNavigate to:\nIn the “Create Quarto Project” window, do the following:\nYou’ll now have a project with a .qmd file (Quarto).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#create-a-new-rstudio-project",
    "href": "intro-to-git/03-make-git-project.html#create-a-new-rstudio-project",
    "title": "10  Make our Git project",
    "section": "",
    "text": "File → New Project → New Directory → Quarto Project\n\n\n\nGive your directory a descriptive name like my-first-git-project in the Directory Name field.\nCheck the Create project as a subdirectory of field to make sure you’re creating your project in the folder where you keep your class or coding projects on your computer.\nMake sure none of the boxes are checked.\nFinally, click Create Project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#run-a-quarto-file",
    "href": "intro-to-git/03-make-git-project.html#run-a-quarto-file",
    "title": "10  Make our Git project",
    "section": "10.2 Run a Quarto File",
    "text": "10.2 Run a Quarto File\nBefore we get into Git, let’s quickly make sure Quarto is working as expected by creating and rendering a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…).\nAdd a title like “Intro to Git”, and click Create.\nSave the file, and name it something like 01-index.qmd when prompted.\nClick Render in the top bar.\n\nA new browser window should open with an HTML preview of your file.\nGreat! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#initialize-git-for-the-project",
    "href": "intro-to-git/03-make-git-project.html#initialize-git-for-the-project",
    "title": "10  Make our Git project",
    "section": "10.3 Initialize Git for the Project",
    "text": "10.3 Initialize Git for the Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need to initialize git inside of our Quarto project.\nIn basic terms, initializing tells Git “I want you to start tracking this folder.”\nHow to initialize Git in our new project:\nNavigate to the Terminal tab in RStudio.\nType the following command and run it (by hitting enter):\ngit init\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#tell-git-what-files-to-track",
    "href": "intro-to-git/03-make-git-project.html#tell-git-what-files-to-track",
    "title": "10  Make our Git project",
    "section": "10.4 Tell Git What Files to Track",
    "text": "10.4 Tell Git What Files to Track\nNow that we’ve let Git know that we want it to start watching our project, we’ll also need to tell Git what files we would like it to keep track of.\nFirst, let’s ask Git what it “sees” in our project folder by running the following command in the Terminal tab:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLet’s quickly breakdown what this all means:\n\n“On branch main”: You’re working on the main branch — the default starting branch for development.\n“No commits yet”: This means Git is ready, but you haven’t saved any versions yet.\n“Untracked Files”: These are files Git sees in your folder, but it’s not saving changes to them yet. These files are marked in red in the terminal.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#checkpoint",
    "href": "intro-to-git/03-make-git-project.html#checkpoint",
    "title": "10  Make our Git project",
    "section": "10.5 🎯 Checkpoint",
    "text": "10.5 🎯 Checkpoint\nIn this chapter you’ve:\n\nMade a new Quarto project\nInitialized Git inside your project (git init)\nAsked Git about the status of our project files (git status)\n\n\nNext up\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore. Then we’ll take our first “snapshot” of our project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#exercise-make-a-.gitignore",
    "href": "intro-to-git/04-add-files.html#exercise-make-a-.gitignore",
    "title": "11  Add, ignore, and commit files",
    "section": "11.3 📝 Exercise: Make a .gitignore",
    "text": "11.3 📝 Exercise: Make a .gitignore\nLet’s make a .gitignore for your new Git project from the command line using the touch command.\nIn the terminal, run:\ntouch .gitignore\nIn the RStudio Files pane, click on the new .gitignore file to open it.\n\nTip: If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.\n\nOnce you have your blank .gitignore file open, add the following lines and save the file:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nCheck your Git status again by running:\ngit status\nRemember when we ran git status before and saw our .html files? Now the .html files should be gone from the list of files Git “sees” because we’ve told it to ignore these types of files with the *.html line in our ignore file.\nBefore moving forward, let’s add a few more things to the .gitignore to cover some additional things we want to ignore (don’t worry about understanding what all of these are right now).\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#checkpoint",
    "href": "intro-to-git/04-add-files.html#checkpoint",
    "title": "11  Add, ignore, and commit files",
    "section": "11.6 🎯 Checkpoint",
    "text": "11.6 🎯 Checkpoint\nIn this chapter you:\n\nCreated a .gitignore file\nAdded the files you wanted to track (staged your files)\nTook your first project snapshot (committed your files)\n\nGreat job! You’ve saved the first version of your project locally (AKA on your computer). Now, the snapshot needs to be saved to a remote project (AKA Github).\n\nNext up\nYou’ll learn how to send this “snapshot” of our project to Github for safe keeping.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#create-a-repository-on-github",
    "href": "intro-to-git/05-pushing-to-github.html#create-a-repository-on-github",
    "title": "12  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nComplete the form by doing the following:\n\nFill in the Repository name field, using the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank for now\nLeave the box unchecked that says “Initialize this repository with a README” (We can add this on our own later)\nClick Create repository\n\n\n\n\n\nClick the copy button next to the SSH URL box.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#connect-your-local-git-project-to-github",
    "href": "intro-to-git/05-pushing-to-github.html#connect-your-local-git-project-to-github",
    "title": "12  Pushing to Github",
    "section": "12.2 Connect Your Local Git Project to GitHub",
    "text": "12.2 Connect Your Local Git Project to GitHub\nNavigate to the Terminal tab inside your RStudio Quarto project.\nStep 1: Add our remote project:\nType the following command, making sure there’s a space after ‘origin’:\ngit remote add origin \nthen paste the URL you copied from github.\nYour complete command should look something like this:\ngit remote add origin git@github.com:your-name/your-repo-name.git\nRun the command by hitting enter.\nStep 2: set our branch to main\nNow we’ll set our main branch name to main by running:\ngit branch -M main\nStep 3: set our branch to main\nLastly, we’ll push our main branch to Github by running:\ngit push -u origin main",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#mini-exercise.-explore-your-github-project",
    "href": "intro-to-git/05-pushing-to-github.html#mini-exercise.-explore-your-github-project",
    "title": "12  Pushing to Github",
    "section": "12.4 Mini exercise. Explore Your GitHub Project",
    "text": "12.4 Mini exercise. Explore Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project.\nIncluding:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#mini-exercise-explore-your-github-project",
    "href": "intro-to-git/05-pushing-to-github.html#mini-exercise-explore-your-github-project",
    "title": "12  Pushing to Github",
    "section": "12.4 📝 Mini exercise: Explore Your GitHub Project",
    "text": "12.4 📝 Mini exercise: Explore Your GitHub Project\nGo to your repository page on GitHub (or refresh the page if you still have it open from before).\nYou should see all your project files, including .qmd, .gitignore, etc.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project, including:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#quick-recap-what-do-these-commands-do",
    "href": "intro-to-git/05-pushing-to-github.html#quick-recap-what-do-these-commands-do",
    "title": "12  Pushing to Github",
    "section": "12.3 Quick Recap: What Do These Commands Do?",
    "text": "12.3 Quick Recap: What Do These Commands Do?\nOk, we just did a lot there. Let’s pause for a moment and breakdown everything we just did:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: up a link between your local main branch and the main branch on GitHub. “Pushing” uploaded your local commits (the ones we did in the last section) to GitHub.\n\nIn short, these steps connected your local project to your Github repository, then saved the snapshot you took to the cloud. We also won’t have to repeat these exact steps ever again when saving snapshots in the future.\n🎉 Congratulations: you now have your first live project is on GitHub!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#checkpoint",
    "href": "intro-to-git/05-pushing-to-github.html#checkpoint",
    "title": "12  Pushing to Github",
    "section": "12.5 🎯 Checkpoint",
    "text": "12.5 🎯 Checkpoint\nAt this point in the guide, you’ve learned how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nIgnore files (.gitignore)\nStage and commit changes (git add and git commit)\nConnect your local project to GitHub\nPush your first commit\n\n\nNext up:\nwe’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-pushing-to-github.html#next-up",
    "href": "intro-to-git/05-pushing-to-github.html#next-up",
    "title": "12  Pushing to Github",
    "section": "12.6 Next up:",
    "text": "12.6 Next up:\nwe’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#make-a-small-change",
    "href": "intro-to-git/06-updating-your-repo.html#make-a-small-change",
    "title": "13  Updating files",
    "section": "",
    "text": "---\ntitle: \"Intro to Git\"\nformat: html\n---\n\n# Summary\n\nHere is a summary of the `mtcars` dataset.\n\nsummary(mtcars)\n\n\ngit status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   01-index.qmd\n\n\nThe red text tells us that Git sees that something was modified in your 01-index.qmd.\nIt’s under the Changes not staged for commit: section, which tells us that Git hasn’t staged it yet (so it won’t be saved in the next commit).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#stage-the-change",
    "href": "intro-to-git/06-updating-your-repo.html#stage-the-change",
    "title": "13  Updating files",
    "section": "13.2 Stage the Change",
    "text": "13.2 Stage the Change\nNow that you know Git sees the change, you need to tell Git, “Hey, save this file in the next snapshot.”\nYou’ll do this by adding — or staging — the modified file for your next commit.\nTo stage your changed file, run:\ngit add 01-index.qmd\nNow, check your Git status again.\ngit status\nYou should see your 01-index.qmd file in green, along with following message:\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  modified:   01-index.qmd`\n🎉 Great! Your changed file is now staged and ready to commit.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#commit-the-change",
    "href": "intro-to-git/06-updating-your-repo.html#commit-the-change",
    "title": "13  Updating files",
    "section": "13.3 Commit the Change",
    "text": "13.3 Commit the Change\nNow, we’ll save the snapshot (in Git’s memory). When we do so, we’ll want to include a descriptive commit message noting what we changed.\nType something like the following and git enter\ngit commit -m \"Add summary of mtcars dataset\"\nA few best practices for commit messages:\n✅ Use present tense: \"Add summary of...\", not \"Added...\"\n✅ Keep it short but descriptive\n✅ Think: “What changed in this version?”\n🕵️‍♀️ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or you need to go back to a prior version, commit messages will help your retrace your steps.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#push-it-to-github",
    "href": "intro-to-git/06-updating-your-repo.html#push-it-to-github",
    "title": "13  Updating files",
    "section": "13.4 Push It to GitHub",
    "text": "13.4 Push It to GitHub\nNow, that our changes are staged and commited, we’ll send the snapshot from your computer to GitHub by pushing our changes.\nPush your new commit by running:\ngit push\nNow go to your repository on Github — you’ll see your commit listed under the Commits tab and your file under the &lt;&gt;Codetab! (You may need to refresh)\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why this push command was shorter than it was last time. In your last push, you needed to connect local project (the one on your computer) to the remote repository on Github and set your main branch.\nSince you already connected your Quarto project to Github and set our branch to main, you can just use the git push command now.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#bash-outputfalse",
    "href": "intro-to-git/06-updating-your-repo.html#bash-outputfalse",
    "title": "13  Updating files",
    "section": "13.2 ```` bash output=false",
    "text": "13.2 ```` bash output=false\ntitle: “Intro to Git” format: html —",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#commit-you-change",
    "href": "intro-to-git/06-updating-your-repo.html#commit-you-change",
    "title": "13  Updating files",
    "section": "13.3 Commit you change",
    "text": "13.3 Commit you change\nNow, we’ll save the snapshot of our updated file in Git’s memory. When we do so, we’ll want to include a descriptive commit message noting what we changed.\nType something like the following and git enter\ngit commit -m \"Add summary of mtcars dataset\"\nA few best practices to keep in mind with commit messages:\n\nUse present tense: \"Add summary of...\", not \"Added...\"\nKeep it short but descriptive\nThink: “What changed in this version?”, write that in the message.\n\n✅ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or if you need to go back to a prior version, commit messages will help your retrace your steps.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#commit-your-change",
    "href": "intro-to-git/06-updating-your-repo.html#commit-your-change",
    "title": "13  Updating files",
    "section": "13.3 Commit your change",
    "text": "13.3 Commit your change\nNow, we’ll save the snapshot of our updated file in Git’s memory. When we do so, we’ll want to include a descriptive commit message noting what we changed. Git commits always need a message attached to them.\nA few best practices to keep in mind with commit messages:\n\nUse present tense: \"Add summary of...\", not \"Added...\"\nKeep it short but descriptive\nThink: “What changed in this version?”, write that in the message.\n\n✅ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or if you need to go back to a prior version, commit messages will help your retrace your steps.\nWith those things in mind, practice writing a descriptive commit message with your change to the 01-index.qmd.\nType something like the following and hit enter:\ngit commit -m \"Add summary of mtcars dataset\"\nTerminal will respond with a summary of insertions and deletions in your file.\nA quick word of caution about the -m flag and Vim\nGit commits always need a message attached to them. The -m flag tells the command line that we’ll be writing our message inline with our command.\nIf you forget to include that message flag, the Terminal will open its default text editor called Vim. If you find yourself in this scenario and don’t know how to get out, there’s a section on getting out of Vim in our Terminal Guide.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#push-your-commit-to-github",
    "href": "intro-to-git/06-updating-your-repo.html#push-your-commit-to-github",
    "title": "13  Updating files",
    "section": "13.4 Push your commit to GitHub",
    "text": "13.4 Push your commit to GitHub\nNow, that our changes are staged and commited, we’ll send the snapshot from your computer to GitHub by pushing our changes.\nPush your new commit by running:\ngit push\nNow go to your repository on Github — you’ll see your commit listed under the Commits tab and your file under the &lt;&gt;Codetab! (You may need to refresh)\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why this push command was shorter than it was last time. In your last push, you needed to connect local project (the one on your computer) to the remote repository on Github and set your main branch.\nSince you already connected your Quarto project to Github and set our branch to main, you can just use the git push command now.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#checkpoint",
    "href": "intro-to-git/06-updating-your-repo.html#checkpoint",
    "title": "13  Updating files",
    "section": "13.6 🎯 Checkpoint",
    "text": "13.6 🎯 Checkpoint\nIn this chapter, you learned the basic git workflow:\n\nMake a change to your local project\nStage the changes in git (git add ..)\nTake a snapshot of the changed files (git commit -m ...)\nPush the changes to Github (git push)\nBest practices to keep things clean and manageable\n\nThis is the cycle you will repeat over and over again as you work on coding projects using git.\n\nNext up:\nwe’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-updating-your-repo.html#git-workflow-best-practices",
    "href": "intro-to-git/06-updating-your-repo.html#git-workflow-best-practices",
    "title": "13  Updating files",
    "section": "13.5 Git workflow best practices",
    "text": "13.5 Git workflow best practices\nBefore we move on, here’s a few key best practices to keep in mind as you’re getting used to working in Git:\n\nCommit early, commit often: Save your work frequently in small, logical chunks. This makes changes easier to track, understand, and roll back.\nWrite clear commit messages: Use concise, meaningful messages that explain why the change was made. (e.g., Fix typo in introduction, not just update)\nCheck status regularly: Run git status often to see what’s changed and what’s staged.\nStage changes selectively: Use git add &lt;filename&gt; (instead of git add .) when you want more control over what goes into each commit.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/troubleshooting.html",
    "href": "intro-to-git/troubleshooting.html",
    "title": "14  Troubleshooting",
    "section": "",
    "text": "14.1 Common scenarios and fixes\nEven experienced developers forget a command or hit a weird error sometimes. You will mess up Git at some point. That’s part of the learning process!\nHere’s how to recover from common problems and feel less stuck.",
    "crumbs": [
      "Part 3: Troubleshooting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "intro-to-git/troubleshooting.html#common-scenarios-and-fixes",
    "href": "intro-to-git/troubleshooting.html#common-scenarios-and-fixes",
    "title": "14  Troubleshooting",
    "section": "",
    "text": "14.1.1 “I made a change I don’t want anymore”\nScenario 1: you changed a file but haven’t committed it yet.\nRun:\ngit restore filename.qmd\nThis resets the file to how it was in your last commit.\nScenario 2: you changed a file and already staged it (git add &lt;filename&gt;)\nFirst, unstage it by running:\ngit restore --staged filename.qmd\nThen run:\ngit restore filename.qmd\n\n\n14.1.2 “I committed the wrong thing”\nYou can undo the most recent commit (without losing your changes):\ngit reset --soft HEAD~1\nNow your changes are back in the staging area. Fix what you need, and recommit.\nIf you want to undo the commit and all your changes:\ngit reset --hard HEAD~1\n⚠️ Warning: Using --hard will delete your work — only use this if you’re really sure!\n\n\n14.1.3 “I forgot to add a file before committing”\nIf you made a commit but forgot a file you meant to include:\nStep 1: Stage the missing file:\ngit add missed_file.qmd\nStep 2: Amend your last commit:\ngit commit --amend\nThis opens the Terminal’s default text editor, Vim, so you can update the message or leave it the same. Git will include the new file in the same commit.\nAfter editing your message in Vim:\n\nPress Esc to make sure you’re not in insert mode.\nType :wq (stands for write and quit).\nPress Enter to save you changes and exit Vim.\n\n\n\n14.1.4 “I can’t push because ‘tip of your current branch is behind’”\nThis means someone else pushed changes to GitHub before you.\nTo fix it:\ngit pull --rebase\nThis fetches the new work and replays your changes on top of it. If there’s a conflict, Git will pause and ask you to resolve it. Once done, run:\ngit add . git rebase --continue\nThen push again:\ngit push",
    "crumbs": [
      "Part 3: Troubleshooting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "intro-to-git/troubleshooting.html#other-handy-commands",
    "href": "intro-to-git/troubleshooting.html#other-handy-commands",
    "title": "14  Troubleshooting",
    "section": "14.2 Other Handy Commands",
    "text": "14.2 Other Handy Commands\n\nView commit history:\ngit log\nView a compact history:\n\ngit log --oneline\n\nUndo staging:\ngit restore --staged filename.qmd\nSee all branches:\ngit branch",
    "crumbs": [
      "Part 3: Troubleshooting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-collaborating.html",
    "href": "intro-to-git/07-collaborating.html",
    "title": "14  Setting up a shared project",
    "section": "",
    "text": "14.1 Setting up the shared Github project\nNow that you can push your changes to GitHub, it’s time to talk about how to collaborate with others on the same project.\nOne of the best things about using keeping your code in a Github repository is that it allows you to collaborate with other people on the same coding project. Now, to make this collaboration work smoothly, there are some best practices and processes you will need to follow.",
    "crumbs": [
      "Advanced: collaboration and workflows",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Setting up a shared project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-collaborating.html#setting-up-the-shared-github-project",
    "href": "intro-to-git/07-collaborating.html#setting-up-the-shared-github-project",
    "title": "14  Setting up a shared project",
    "section": "",
    "text": "14.1.1 Create the repo\nOnly one group member needs to create the GitHub repo (you already know how—see Push the Initial Commit to GitHub).\nOnce the repo is created, the owner can add team members.\nTo add team members, the owner will:\n\nGo to the repository on GitHub.\nClick Settings → Collaborators.\nAdd the teammate’s GitHub username.\n\n\nNote: This sends them an invitation. They must accept it before they can push changes.\n\n\n\n\n14.1.2 Step 2: The collaborator clone the repo\nOnce added as a collaborator, the second person can make a copy of the repo on their machine. This process of copying a repository onto your computer is called cloning in the Git world.\nWe’ll walk through how to clone a repo in a moment, but first, let’s make sure you know where you should clone things.\n\n14.1.2.1 Choose where to clone the repo\nUsing the cd command, navigate in your terminal to the folder where you keep your coding projects. For example, a good place for this might be in a projects folder inside your home directory or your Documents folder.\nIf you need to create a folder for your projects, you can do this in the terminal like this:\ncd ~              # Go to your home folder \nmkdir projects    # Make a folder called 'projects' (if it doesn't already exist) \ncd projects       # Move into that folder`\n\n\n14.1.2.2 Clone the repo\nNow that you’re in the right place, you’re ready to copy the repo onto your local machine following the steps below.\nIn Github:\n\nNavigate to the repo you want to clone.\nClick the big, blue &lt;&gt; CODE button (at the top right).\nNavigate to the SSH tab in the dropdown.\nYou will see a box with something like: git@github.com:username/repository-name. Click the icon next to this box to copy it to your clipboard.\n\nIn your Terminal window, type:\ngit clone \nthen paste the URL you copied from Github, making sure there is a space between the word “clone” and the URL.\nYour complete command should look something like:\ngit clone git@github.com:username/my-first-git-repo\nHit enter to run the command.\nThis creates a local folder with the repo’s contents and Git history within the projects folder on your computer.\nCheck to make sure this worked by running list (ls) command from inside the folder where you cloned your project.\nls\nYou should see the name of your newly-cloned repo in the list.\n\n\n\n14.1.3 Step 3: Everyone pulls before they work\nNow that you have the copy of your repo on your local machine, make sure you navigate into your project folder by running:\ncd folder_name\nBefore making changes in the project, always run:\ngit pull\nThis downloads any changes your teammate pushed to GitHub since you last worked.\n\n⚠️ Skipping git pull can lead to merge conflicts when Git sees two people changed the same thing differently.",
    "crumbs": [
      "Advanced: collaboration and workflows",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Setting up a shared project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-collaborating.html#dealing-with-conflicts",
    "href": "intro-to-git/07-collaborating.html#dealing-with-conflicts",
    "title": "14  Setting up a shared project",
    "section": "14.3 Dealing with conflicts",
    "text": "14.3 Dealing with conflicts\n\n14.3.1 What if You Both Edit the Same File?\nWhen you run git pull, Git will automatically try to merge your local changes with the most-recent version of the file on the Github repo.\nSometimes, two people (or even just you on two different branches) will make different changes to the same lines of a file.\nWhen you try to run git pull, Git gets confused and says:\n\n“I don’t know which version you want to keep — you have to decide.”\n\nThis is called a merge conflict.\n\n\n\n14.3.2 What’s Really Happening?\nWhen you run git merge, Git is trying to combine the changes from two branches into one. Most of the time, if the changes are in different parts of the files, Git can handle it automatically.\nBut if two people made edits to the same part of a file (like the same sentence or section), Git doesn’t want to guess who’s right — so it stops and asks you to make the call.\nThink of it like this:\n\nYou’re merging two Word documents together.\nOne version says “The sky is blue.”\nThe other version says “The sky is purple.”\nGit says: “You can’t have both. Which one do you want?”\n\nThis is a merge conflict, and Git needs your help to resolve it.\nGit will try to merge your changes when you git pull.\nIf the same lines were changed, you’ll see a merge conflict. Git will mark the conflict in the file like this:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD This is your version. ======= This is your teammate’s version. &gt;&gt;&gt;&gt;&gt;&gt;&gt; abc123\nYou’ll need to manually choose which version (or both!) to keep, then:\ngit add thefile.qmd git commit -m \"Resolve merge conflict\" git push\n\n\n\n14.3.3 Step-by-Step: Fixing a Merge Conflict\nLet’s say both you and a collaborator edited the same section of analysis.qmd and now Git is confused when you try to pull or merge.\n\n14.3.3.1 Step 1: See the Conflict\nWhen you run:\nbash\nCopyEdit\ngit pull\nGit might respond:\npgsql\nCopyEdit\nAuto-merging analysis.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.\nStep 2: Open the Conflicted File\nOpen analysis.qmd in RStudio or your code editor. You’ll see something like:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD The sky is blue. ======= The sky is purple. &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main\nThis is Git saying:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD = your local version\n======= = the separator\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main = the version from GitHub (or your teammate)\n\nStep 3: Choose What to Keep\nDecide what version is correct. You can:\n\nKeep one\nCombine them\nRewrite it entirely\n\nThe sky is blue and sometimes purple at sunset.\nDelete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) when you’re done.\n\n\n14.3.3.2 Step 4: Mark the Conflict as Resolved\nOnce you’ve fixed the file, you need to tell Git it’s ready:\ngit add analysis.qmd\nStep 5: Commit the Merge\nNow complete the merge:\ngit commit -m \"Resolve merge conflict in analysis.qmd\"\n🎉 That’s it — you’ve handled a merge conflict like a pro.",
    "crumbs": [
      "Advanced: collaboration and workflows",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Setting up a shared project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-collaborating.html#tips-for-smooth-collaboration",
    "href": "intro-to-git/07-collaborating.html#tips-for-smooth-collaboration",
    "title": "14  Setting up a shared project",
    "section": "14.4 Tips for Smooth Collaboration",
    "text": "14.4 Tips for Smooth Collaboration\n\nCommunicate! Decide who is editing what.\nAlways git pull before you start working.\nCommit and push frequently — don’t wait until the end of the day.\nAvoid working on the same file at the same time.",
    "crumbs": [
      "Advanced: collaboration and workflows",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Setting up a shared project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-collaborating.html#each-person-works-commits-and-pushes",
    "href": "intro-to-git/07-collaborating.html#each-person-works-commits-and-pushes",
    "title": "14  Setting up a shared project",
    "section": "14.2 Each Person Works, Commits, and Pushes",
    "text": "14.2 Each Person Works, Commits, and Pushes\nWhen working collaboratively on a coding project, your team will follow the basic Git workflow to keep things smooth, clean, and easy to manage.\nThe basic Git workflow:\nYou and your teammates take turns:\n\nMaking changes locally to project files\nStaging and committing them (git add, git commit -m)\nPushing to GitHub (git push)\n\nAnd remember, every time you go to work on your project, you and your teammates should pull before making your own edits:\ngit pull",
    "crumbs": [
      "Advanced: collaboration and workflows",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Setting up a shared project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-setup-and-basic-workflow.html",
    "href": "intro-to-git/07-setup-and-basic-workflow.html",
    "title": "14  Project setup and basic workflow",
    "section": "",
    "text": "14.1 Setting up the shared Github project\nNow that you can push your changes to GitHub, it’s time to talk about how to collaborate with others on the same project.\nOne of the best things about using keeping your code in a Github repository is that it allows you to collaborate with other people on the same coding project. Now, to make this collaboration work smoothly, there are some best practices and processes you will need to follow.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Project setup and basic workflow</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-setup-and-basic-workflow.html#setting-up-the-shared-github-project",
    "href": "intro-to-git/07-setup-and-basic-workflow.html#setting-up-the-shared-github-project",
    "title": "14  Project setup and basic workflow",
    "section": "",
    "text": "14.1.1 Create the repo\nOnly one group member needs to create the GitHub repo (you already know how—see Push the Initial Commit to GitHub).\nOnce the repo is created, the owner can add team members.\nTo add team members, the owner will:\n\nGo to the repository on GitHub.\nClick Settings → Collaborators.\nAdd the teammate’s GitHub username.\n\n\nNote: This sends them an invitation. They must accept it before they can push changes.\n\n\n\n\n14.1.2 Step 2: The collaborator clones the repo\nOnce added as a collaborator, the second person can make a copy of the repo on their machine. This process of copying a repository onto your computer is called cloning in the Git world.\nWe’ll walk through how to clone a repo in a moment, but first, let’s make sure you know where you should clone things.\n\n14.1.2.1 Choose where to clone the repo\nUsing the cd command, navigate in your terminal to the folder where you keep your coding projects. For example, a good place for this might be in a projects folder inside your home directory or your Documents folder.\nIf you need to create a folder for your projects, you can do this in the terminal like this:\ncd ~              # Go to your home folder \nmkdir projects    # Make a folder called 'projects' (if it doesn't already exist) \ncd projects       # Move into that folder`\n\n\n14.1.2.2 Clone the repo\nNow that you’re in the right place, you’re ready to copy the repo onto your local machine following the steps below.\nIn Github:\n\nNavigate to the repo you want to clone.\nClick the big, blue &lt;&gt; CODE button (at the top right).\nNavigate to the SSH tab in the dropdown.\nYou will see a box with something like: git@github.com:username/repository-name. Click the icon next to this box to copy it to your clipboard.\n\nIn your Terminal window, type:\ngit clone \nthen paste the URL you copied from Github, making sure there is a space between the word “clone” and the URL.\nYour complete command should look something like:\ngit clone git@github.com:username/my-first-git-repo\nHit enter to run the command.\nThis creates a local folder with the repo’s contents and Git history within the projects folder on your computer.\nCheck to make sure this worked by running list (ls) command from inside the folder where you cloned your project.\nls\nYou should see the name of your newly-cloned repo in the list.\n\n\n\n14.1.3 Step 3: Everyone pulls before they work\nNow that you have the copy of your repo on your local machine, make sure you navigate into your project folder by running:\ncd folder_name\nBefore making changes in the project, always run:\ngit pull\nThis downloads any changes your teammate pushed to GitHub since you last worked.\n\n⚠️ Skipping git pull can lead to merge conflicts when Git sees two people changed the same thing differently.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Project setup and basic workflow</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-setup-and-basic-workflow.html#each-person-works-commits-and-pushes",
    "href": "intro-to-git/07-setup-and-basic-workflow.html#each-person-works-commits-and-pushes",
    "title": "14  Project setup and basic workflow",
    "section": "14.2 Each Person Works, Commits, and Pushes",
    "text": "14.2 Each Person Works, Commits, and Pushes\nWhen working collaboratively on a coding project, your team will follow the basic Git workflow to keep things smooth, clean, and easy to manage.\nThe basic Git workflow:\nYou and your teammates take turns:\n\nMaking changes locally to project files\nStaging and committing them (git add, git commit -m)\nPushing to GitHub (git push)\n\nAnd remember, every time you go to work on your project, you and your teammates should pull before making your own edits:\ngit pull",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Project setup and basic workflow</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-dealing-with-conflicts.html",
    "href": "intro-to-git/08-dealing-with-conflicts.html",
    "title": "15  Dealing with conflicts",
    "section": "",
    "text": "15.1 What if you both edit the same file?\nWhen you run git pull, Git will automatically try to merge your local changes with the most-recent version of the file on the Github repo.\nSometimes, two people (or even just you on two different branches) will make different changes to the same lines of a file.\nWhen you try to run git pull, Git gets confused and says:\nThis is called a merge conflict.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Dealing with conflicts</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-dealing-with-conflicts.html#dealing-with-conflicts",
    "href": "intro-to-git/08-dealing-with-conflicts.html#dealing-with-conflicts",
    "title": "15  Dealing with conflicts",
    "section": "",
    "text": "15.1.1 What if You Both Edit the Same File?\nWhen you run git pull, Git will automatically try to merge your local changes with the most-recent version of the file on the Github repo.\nSometimes, two people (or even just you on two different branches) will make different changes to the same lines of a file.\nWhen you try to run git pull, Git gets confused and says:\n\n“I don’t know which version you want to keep — you have to decide.”\n\nThis is called a merge conflict.\n\n\n\n15.1.2 What’s Really Happening?\nWhen you run git merge, Git is trying to combine the changes from two branches into one. Most of the time, if the changes are in different parts of the files, Git can handle it automatically.\nBut if two people made edits to the same part of a file (like the same sentence or section), Git doesn’t want to guess who’s right — so it stops and asks you to make the call.\nThink of it like this:\n\nYou’re merging two Word documents together.\nOne version says “The sky is blue.”\nThe other version says “The sky is purple.”\nGit says: “You can’t have both. Which one do you want?”\n\nThis is a merge conflict, and Git needs your help to resolve it.\nGit will try to merge your changes when you git pull.\nIf the same lines were changed, you’ll see a merge conflict. Git will mark the conflict in the file like this:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD This is your version. ======= This is your teammate’s version. &gt;&gt;&gt;&gt;&gt;&gt;&gt; abc123\nYou’ll need to manually choose which version (or both!) to keep, then:\ngit add thefile.qmd git commit -m \"Resolve merge conflict\" git push\n\n\n\n15.1.3 Step-by-Step: Fixing a Merge Conflict\nLet’s say both you and a collaborator edited the same section of analysis.qmd and now Git is confused when you try to pull or merge.\n\n15.1.3.1 Step 1: See the Conflict\nWhen you run:\nbash\nCopyEdit\ngit pull\nGit might respond:\npgsql\nCopyEdit\nAuto-merging analysis.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.\nStep 2: Open the Conflicted File\nOpen analysis.qmd in RStudio or your code editor. You’ll see something like:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD The sky is blue. ======= The sky is purple. &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main\nThis is Git saying:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD = your local version\n======= = the separator\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main = the version from GitHub (or your teammate)\n\nStep 3: Choose What to Keep\nDecide what version is correct. You can:\n\nKeep one\nCombine them\nRewrite it entirely\n\nThe sky is blue and sometimes purple at sunset.\nDelete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) when you’re done.\n\n\n15.1.3.2 Step 4: Mark the Conflict as Resolved\nOnce you’ve fixed the file, you need to tell Git it’s ready:\ngit add analysis.qmd\nStep 5: Commit the Merge\nNow complete the merge:\ngit commit -m \"Resolve merge conflict in analysis.qmd\"\n🎉 That’s it — you’ve handled a merge conflict like a pro.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Dealing with conflicts</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-dealing-with-conflicts.html#tips-for-smooth-collaboration",
    "href": "intro-to-git/08-dealing-with-conflicts.html#tips-for-smooth-collaboration",
    "title": "15  Dealing with conflicts",
    "section": "15.2 Tips for Smooth Collaboration",
    "text": "15.2 Tips for Smooth Collaboration\n\nCommunicate! Decide who is editing what and when.\nAlways git pull before you start working.\nCommit and push frequently — don’t wait until the end of the day.\nAvoid working on the same file at the same time.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Dealing with conflicts</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-dealing-with-conflicts.html#what-if-you-both-edit-the-same-file",
    "href": "intro-to-git/08-dealing-with-conflicts.html#what-if-you-both-edit-the-same-file",
    "title": "15  Dealing with conflicts",
    "section": "",
    "text": "“I don’t know which version you want to keep — you have to decide.”\n\n\n\n\n15.1.1 What’s Really Happening?\nGit is trying to combine the changes from two versions of a file into one. Most of the time, if the changes are in different parts of the files, Git can handle it automatically.\nBut if two people made edits to the same part of a file (like the same sentence or section), Git doesn’t want to guess who’s right — so it stops and asks you to make the call.\nThink of it like this:\n\nYou’re merging two Word documents together.\nOne version says “The sky is blue.”\nThe other version says “The sky is purple.”\nGit says: “You can’t have both. Which one do you want?”\n\nIn Git world, this is a merge conflict, and Git needs your help to resolve it.\n\n\n15.1.2 How will Git let me know there’s a conflict?\nWhen Git encounters a merge conflict, two things will happen:\n\nIn your Terminal, you’ll see a message like:\n\nAuto-merging filename.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.\n\nIn the file with the conflict, Git will mark the conflicted lines like this:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD This is your version. ======= This is your teammate’s version. &gt;&gt;&gt;&gt;&gt;&gt;&gt; abc123\n\nYou’ll need to manually choose which version (or both!) to keep and then commit the right changes to Git. We’ll walk you through the process of resolving these conflicts in the section below.\n\n\n\n15.1.3 Step-by-Step: Resolving a Merge Conflict\nLet’s say both you and a collaborator edited the same section of analysis.qmd and now Git is confused when you try to pull or merge.\nStep 1: See the Conflict\nWhen you run:\ngit pull\nGit might respond:\nAuto-merging analysis.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.\nStep 2: Open the Conflicted File\nOpen analysis.qmd in RStudio or your code editor. You’ll see something like:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD The sky is blue. ======= The sky is purple. &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main\nThis is Git saying:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD = your local version\n======= = the separator\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main = the version from GitHub (or your teammate)\n\nIn other words:\n\nAnything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and the ======= separator are your current changes.\nAnything between the ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main is what’s on the Github version.\n\nStep 3: Choose What to Keep\nDecide what version is correct. You can:\n\nKeep one\nCombine them\nRewrite it entirely\n\nThe sky is blue and sometimes purple at sunset.\nNote: make sure to delete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;) when you’re done.\nStep 4: Mark the Conflict as Resolved\nOnce you’ve fixed the file, you need to tell Git it’s ready:\ngit add analysis.qmd\nStep 5: Commit the Merge\nNow complete the merge:\ngit commit -m \"Resolve merge conflict in analysis.qmd\"\n🎉 That’s it — you’ve handled a merge conflict like a pro.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Dealing with conflicts</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-working-with-branches.html",
    "href": "intro-to-git/09-working-with-branches.html",
    "title": "16  Working with feature branches",
    "section": "",
    "text": "16.1 Why Use Branches?\nIn Git, a branch is like a parallel universe for your code. You can work on a new idea or fix a bug without messing up the main project. When you’re ready, you bring your changes back to the main line with a merge.\nLet’s say you’re working with teammates. One of you is writing the introduction, another is cleaning the data, and a third is building plots.\nIf you all worked on the main branch at the same time, you’d constantly bump into each other — accidentally overwriting work or creating conflicts. Branches let everyone work on their own part of the project safely.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-working-with-branches.html#step-1-create-a-new-branch",
    "href": "intro-to-git/09-working-with-branches.html#step-1-create-a-new-branch",
    "title": "16  Working with feature branches",
    "section": "16.2 🌱 Step 1: Create a New Branch",
    "text": "16.2 🌱 Step 1: Create a New Branch\nIn your terminal, run the following command to see a list of the branches that exist in your project:\ngit branch\nYou’ll likely just see the main branch with an * symbol next to it. The asterisk tells you this is the branch you are currently working on in Git.\nNow, let’s say you wanted to try a new plot, but you weren’t sure if you’re ready to use this in the full project. You’d like some room to experiment a bit before fully committing your work to the main project. This is where a feature branch comes in.\nTo make a new branch, run the following command in the terminal:\ngit checkout -b plot-experiment\nYou should see a response in the terminal saying something like:\n\nSwitched to a new branch ‘plot-experiment’\n\nThis command did two things:\n\ncheckout: switched to another branch\n-b plot-experiment: created a new branch called plot-experiment\n\nNow you’re in a new “sandbox” that’s separate from your main branch in Git.\nTo confirm that, run:\ngit branch\nYou’ll see something like:\n*plot-experiment\nmain\nRemember, the * shows your current branch. So you’re now on plot-experiment.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-working-with-branches.html#step-2-make-and-commit-changes-on-the-new-branch",
    "href": "intro-to-git/09-working-with-branches.html#step-2-make-and-commit-changes-on-the-new-branch",
    "title": "16  Working with feature branches",
    "section": "16.3 Step 2: Make and Commit Changes on the New Branch",
    "text": "16.3 Step 2: Make and Commit Changes on the New Branch\nNow that you’re on our feature branch (which is an exact clone of our main branch at the time it is created), we can begin to safely experiment. You can make changes to our branch without worrying about messing up your work on our main branch.\nLet’s try adding some new files to test this out:\n\nMake a new quarto file called 01-plot.qmd\nInside the file, make a new code block cell add the following code:\n\nlibrary(tidyverse)\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl)) +\n    geom_point(size=3)\n\nRun the cell, to generate a simple ggplot() scatterplot.\nSave the file.\n\nNow, add the new plot file to git, by completing the normal Git workflow steps:\n\nRun git status to see what’s changed.\nType and run git add 01-plot.qmd to tell Git to start tracking your new file.\nRun git status again to make sure your new file showing under “changes to be committed”.\nRun: git commit -m \"Add experimental plot\" to take a snapshot of your changes.\n\nYou’ve saved the change only to plot-experiment, not to main. You’re ready to push your new branch to Github.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-working-with-branches.html#step-3-push-the-branch-to-github",
    "href": "intro-to-git/09-working-with-branches.html#step-3-push-the-branch-to-github",
    "title": "16  Working with feature branches",
    "section": "16.4 Step 3: Push the Branch to GitHub",
    "text": "16.4 Step 3: Push the Branch to GitHub\nOnce you’ve committed some changes on your branch, you’ll probably want to back up your work by pushing it to Github.\nThe syntax to add a new branch to your repo is just like it was when we added our main branch:\ngit push -u origin branch-name\nThis command does two things:\n\nCreates the new branch on GitHub\nLinks your local branch to it.\n\nSo if you wanted to add your new plot-experiment branch, for example, you’d type and run:\ngit push -u origin plot-experiment\nTerminal would show a response like:\n\nTo github.com:username/my-git-quarto-project.git [new branch] plot-experiment -&gt; plot-experiment branch ‘plot-experiment’ set up to track ‘origin/plot-experiment’.*\n\nYou’ll now see the branch listed in your GitHub repo.\n\n\n\nGithub will display new feature branches in your repository",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-working-with-branches.html#merging-back-into-main",
    "href": "intro-to-git/09-working-with-branches.html#merging-back-into-main",
    "title": "16  Working with feature branches",
    "section": "16.5 Merging back into main",
    "text": "16.5 Merging back into main\nOnce you’re happy with your branch changes, you can merge them back into main to incorporate them into your project.\nStep 1: switch back to main\nRun the following to get back to your main branch:\ngit checkout main\nIf you run git branch again, the asterisk should show next to main again.\nHeads-up: if you’ve still got your 01-plot.qmd file open in R Studio when you switch back to your main branch, you’ll get a pop-up telling you that the plot file has been deleted (see screenshot). That’s because the file doesn’t exist yet on the main branch. Hit the blue Yes button in the pop to close the file. Don’t worry though, the file still exists on your plot-experiment branch because you made a snapshot of your work with your git commit.🤠\n\n\n\nRStudio may show a warning when switching branches\n\n\nOk, now that we’re on a main branch, we want to bring in the changes from plot-experiment.\nStep 2: merge the feature branch into main\nType and run:\ngit merge plot-experiment\nThis pulls the changes from your feature branch into the main project.\nIf everything goes smoothly, you’ll see a message like:\nUpdating abc1234..def5678 Fast-forward  myfile.qmd | 10 ++++++++++  1 file changed, 10 insertions(+)\n\nNote: If Git can’t automatically combine changes, you’ll get a merge conflict. If this happens, you’ll need to resolve the issues following the steps in the last chapter.\n\nIn your R Studio file pane, you should now see the 01-plot.qmd file listed (you may need to refresh).\n\nNext up\nNow that you understand the basics of how to make feature branches and have an baseline understanding of how merging works, we’ll show you how to use Github’s pull request feature to review changes and get feedback (the workflow we’d recommend).",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-pull-requests.html",
    "href": "intro-to-git/10-pull-requests.html",
    "title": "Working with feature branches",
    "section": "",
    "text": "17.1 Why Use Branches?\nIn Git, a branch is like a parallel universe for your code. You can work on a new idea or fix a bug without messing up the main project. When you’re ready, you bring your changes back to the main line with a merge.\nLet’s say you’re working with teammates. One of you is writing the introduction, another is cleaning the data, and a third is building plots.\nIf you all worked on the main branch at the same time, you’d constantly bump into each other — accidentally overwriting work or creating conflicts. Branches let everyone work on their own part of the project safely.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-pull-requests.html#step-1-create-a-new-branch",
    "href": "intro-to-git/10-pull-requests.html#step-1-create-a-new-branch",
    "title": "Working with feature branches",
    "section": "17.2 🌱 Step 1: Create a New Branch",
    "text": "17.2 🌱 Step 1: Create a New Branch\nIn your terminal, run the following command to see a list of the branches that exist in your project:\ngit branch\nYou’ll likely just see the main branch with an * symbol next to it. The asterisk tells you this is the branch you are currently working on in Git.\nNow, let’s say you wanted to try a new plot, but you weren’t sure if you’re ready to use this in the full project. You’d like some room to experiment a bit before fully committing your work to the main project. This is where a feature branch comes in.\nTo make a new branch, run the following command in the terminal:\ngit checkout -b plot-experiment\nYou should see a response in the terminal saying something like:\n\nSwitched to a new branch ‘plot-experiment’\n\nThis command did two things:\n\ncheckout: switched to another branch\n-b plot-experiment: created a new branch called plot-experiment\n\nNow you’re in a new “sandbox” that’s separate from your main branch in Git.\nTo confirm that, run:\ngit branch\nYou’ll see something like:\n*plot-experiment\nmain\nRemember, the * shows your current branch. So you’re now on plot-experiment.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-pull-requests.html#step-2-make-and-commit-changes-on-the-new-branch",
    "href": "intro-to-git/10-pull-requests.html#step-2-make-and-commit-changes-on-the-new-branch",
    "title": "Working with feature branches",
    "section": "17.3 Step 2: Make and Commit Changes on the New Branch",
    "text": "17.3 Step 2: Make and Commit Changes on the New Branch\nNow that you’re on our feature branch (which is an exact clone of our main branch at the time it is created), we can begin to safely experiment. You can make changes to our branch without worrying about messing up your work on our main branch.\nLet’s try adding some new files to test this out:\n\nMake a new quarto file called 01-plot.qmd\nInside the file, make a new code block cell add the following code:\n\nlibrary(tidyverse)\n\nggplot(mtcars, aes(x=hp, y=mpg, color=cyl)) +\n    geom_point(size=3)\n\nRun the cell, to generate a simple ggplot() scatterplot.\nSave the file.\n\nNow, add the new plot file to git, by completing the normal Git workflow steps:\n\nRun git status to see what’s changed.\nType and run git add 01-plot.qmd to tell Git to start tracking your new file.\nRun git status again to make sure your new file showing under “changes to be committed”.\nRun: git commit -m \"Add experimental plot\" to take a snapshot of your changes.\n\nYou’ve saved the change only to plot-experiment, not to main. You’re ready to push your new branch to Github.",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-pull-requests.html#step-3-push-the-branch-to-github",
    "href": "intro-to-git/10-pull-requests.html#step-3-push-the-branch-to-github",
    "title": "Working with feature branches",
    "section": "17.4 Step 3: Push the Branch to GitHub",
    "text": "17.4 Step 3: Push the Branch to GitHub\nOnce you’ve committed some changes on your branch, you’ll probably want to back up your work by pushing it to Github.\nThe syntax to add a new branch to your repo is just like it was when we added our main branch:\ngit push -u origin branch-name\nThis command does two things:\n\nCreates the new branch on GitHub\nLinks your local branch to it.\n\nSo if you wanted to add your new plot-experiment branch, for example, you’d type and run:\ngit push -u origin plot-experiment\nTerminal would show a response like:\n\nTo github.com:username/my-git-quarto-project.git [new branch] plot-experiment -&gt; plot-experiment branch ‘plot-experiment’ set up to track ‘origin/plot-experiment’.*\n\nYou’ll now see the branch listed in your GitHub repo.\n\n\n\nGithub will display new feature branches in your repository",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-pull-requests.html#merging-back-into-main",
    "href": "intro-to-git/10-pull-requests.html#merging-back-into-main",
    "title": "Working with feature branches",
    "section": "17.5 Merging back into main",
    "text": "17.5 Merging back into main\nOnce you’re happy with your branch changes, you can merge them back into main to incorporate them into your project.\nStep 1: switch back to main\nRun the following to get back to your main branch:\ngit checkout main\nIf you run git branch again, the asterisk should show next to main again.\nHeads-up: if you’ve still got your 01-plot.qmd file open in R Studio when you switch back to your main branch, you’ll get a pop-up telling you that the plot file has been deleted (see screenshot). That’s because the file doesn’t exist yet on the main branch. Hit the blue Yes button in the pop to close the file. Don’t worry though, the file still exists on your plot-experiment branch because you made a snapshot of your work with your git commit.🤠\n\n\n\nRStudio may show a warning when switching branches\n\n\nOk, now that we’re on a main branch, we want to bring in the changes from plot-experiment.\nStep 2: merge the feature branch into main\nType and run:\ngit merge plot-experiment\nThis pulls the changes from your feature branch into the main project.\nIf everything goes smoothly, you’ll see a message like:\nUpdating abc1234..def5678 Fast-forward  myfile.qmd | 10 ++++++++++  1 file changed, 10 insertions(+)\n\nNote: If Git can’t automatically combine changes, you’ll get a merge conflict. If this happens, you’ll need to resolve the issues following the steps in the last chapter.\n\nIn your R Studio file pane, you should now see the 01-plot.qmd file listed (you may need to refresh).\n\nNext up\nNow that you understand the basics of how to make feature branches and have an baseline understanding of how merging works, we’ll show you how to use Github’s pull request feature to review changes and get feedback (the workflow we’d recommend).",
    "crumbs": [
      "Advanced: collaborating with others",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Working with feature branches</span>"
    ]
  },
  {
    "objectID": "intro-to-git/quick-reference.html",
    "href": "intro-to-git/quick-reference.html",
    "title": "18  Quick reference",
    "section": "",
    "text": "18.1 Common commands",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Quick reference</span>"
    ]
  },
  {
    "objectID": "intro-to-git/quick-reference.html#common-commands",
    "href": "intro-to-git/quick-reference.html#common-commands",
    "title": "18  Quick reference",
    "section": "",
    "text": "💻 Command\n💬 Description\n🛠️ Task\n\n\n\n\ngit status\nSee which files are staged, unstaged, or untracked\nCheck file status\n\n\ngit diff\nSee what’s changed but not yet staged\nView unstaged changes\n\n\ngit add filename\nAdd a specific file to the staging area\nStage a specific file\n\n\ngit add .\nAdd everything in the directory\nStage all changes\n\n\ngit commit -m \"Message here\"\nSave your staged changes with a message\nCommit staged changes\n\n\ngit push\nUpload your commits to the remote repository\nPush commits to GitHub\n\n\ngit pull\nFetch and merge the latest changes from GitHub\nPull the latest changes\n\n\ngit branch\nShow which branch you’re on\nCheck current branch\n\n\ngit checkout branch-name\nMove to another branch\nSwitch branches\n\n\ngit checkout -b new-branch-name\nMake a new branch and switch to it\nCreate and switch to a new branch",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Quick reference</span>"
    ]
  },
  {
    "objectID": "intro-to-git/quick-reference.html#terminology",
    "href": "intro-to-git/quick-reference.html#terminology",
    "title": "18  Quick reference",
    "section": "18.2 Terminology",
    "text": "18.2 Terminology",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Quick reference</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#configure-git",
    "href": "intro-to-git/02-install-and-setup.html#configure-git",
    "title": "Setup",
    "section": "9.5 Configure git",
    "text": "9.5 Configure git\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.\n\nIn your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\nIn your Terminal do this but use your email:\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\nIn your terminal, run this:\ngit config --global init.defaultBranch main\nYou won’t get a response unless there was a problem.\nIn your terminal, run this:\ngit config --global pull.ff only\nThis sets a behaivor that is too complicated to explain now, but comes recommended in this very long but thorough explanation.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#ssh-keys",
    "href": "intro-to-git/02-install-and-setup.html#ssh-keys",
    "title": "Setup",
    "section": "9.6 SSH Keys",
    "text": "9.6 SSH Keys\nThere are a couple of ways to authenticate with Github from your computer. The book Happy Git with R recommends using personal access tokens and I think that is fine, but I prefer the one-and-done nature of SSH keys, so that is the method we will use.\n\nAfter making sure git is installed, launch RStudio. (If it was already open, quit and re-launch it.)\nGo to the menu Tools &gt; Global Options, then click on the Git/SVN tab.\nCheck the Enable version control interface for RStudio button.\nThere should already be a path included in the Make sure the path to the git executable is correct.\n\nIf it is not, try quitting RStudio and relaunching it and do this step again.\nIf it is still not there, talk to the prof. We’ll find it.\n\n\n\n\n\nGit/SVN window\n\n\n\n9.6.1 Create a new SSH key\nIf you SSH Key path was already filled then you can skip to the next step.\nIf you’ve never used SSH keys before, you’ll have to create one, but RStudio makes that fairly painless.\n\nClick on the Create RSA Key button.\nYou should be able to leave all the defaults as they are. Leave the optional Passphrase field blank.\nClick Create.\nYou should see a message that says “Key Created Successfully” and it might show you a pretty picture. Click OK.\n\n\n\n\nSSH Key Creation window",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#saving-ssh-key-in-github",
    "href": "intro-to-git/02-install-and-setup.html#saving-ssh-key-in-github",
    "title": "Setup",
    "section": "9.7 Saving SSH key in Github",
    "text": "9.7 Saving SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\nFirst we need access to your “Public” key:\n\nIn the RStudio Git/SVN window, click on the View public key button.\nThis will open a new window with the contents of your public key.\n\n\n\n\nPublic key example\n\n\nYou’ll want access to copy that key to paste into Github in the next step:\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n9.7.1 Test Github connection\n\nFrom your Terminal in RStudio, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#install-the-tools",
    "href": "intro-to-git/02-install-and-setup.html#install-the-tools",
    "title": "9  Installation and setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#configure-git-1",
    "href": "intro-to-git/02-install-and-setup.html#configure-git-1",
    "title": "9  Installation and setup",
    "section": "9.5 Configure git",
    "text": "9.5 Configure git\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#setup-your-ssh-keys",
    "href": "intro-to-git/02-install-and-setup.html#setup-your-ssh-keys",
    "title": "9  Installation and setup",
    "section": "9.3 Setup your SSH Keys",
    "text": "9.3 Setup your SSH Keys\nThere are a couple of ways to authenticate with Github from your computer. The book Happy Git with R recommends using personal access tokens and I think that is fine, but I prefer the one-and-done nature of SSH keys, so that is the method we will use.\n\nAfter making sure git is installed, launch RStudio. (If it was already open, quit and re-launch it.)\nGo to the menu Tools &gt; Global Options, then click on the Git/SVN tab.\nCheck the Enable version control interface for RStudio button.\nThere should already be a path included in the Make sure the path to the git executable is correct.\n\nIf it is not, try quitting RStudio and relaunching it and do this step again.\nIf it is still not there, talk to the prof. We’ll find it.\n\n\n\n\n\nGit/SVN window\n\n\n\n9.3.1 Create a new SSH key\nIf you SSH Key path was already filled then you can skip to the next step.\nIf you’ve never used SSH keys before, you’ll have to create one, but RStudio makes that fairly painless.\n\nClick on the Create RSA Key button.\nYou should be able to leave all the defaults as they are. Leave the optional Passphrase field blank.\nClick Create.\nYou should see a message that says “Key Created Successfully” and it might show you a pretty picture. Click OK.\n\n\n\n\nSSH Key Creation window",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-install-and-setup.html#add-ssh-key-in-github",
    "href": "intro-to-git/02-install-and-setup.html#add-ssh-key-in-github",
    "title": "9  Installation and setup",
    "section": "9.4 Add SSH key in Github",
    "text": "9.4 Add SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\nFirst we need access to your “Public” key:\n\nIn the RStudio Git/SVN window, click on the View public key button.\nThis will open a new window with the contents of your public key.\n\n\n\n\nPublic key example\n\n\nYou’ll want access to copy that key to paste into Github in the next step:\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n9.4.1 Test Github connection\n\nFrom your terminal in RStudio, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#run-a-quarto-file-we-can-probably-skip-this..",
    "href": "intro-to-git/03-make-git-project.html#run-a-quarto-file-we-can-probably-skip-this..",
    "title": "10  Make our Git project",
    "section": "10.2 Run a Quarto File (we can probably skip this..)",
    "text": "10.2 Run a Quarto File (we can probably skip this..)\nBefore we get into Git, let’s quickly make sure Quarto is working as expected by creating and rendering a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…).\nAdd a title like “Intro to Git”, and click Create.\nSave the file, and name it something like 01-index.qmd when prompted.\nClick Render in the top bar.\n\nA new browser window should open with an HTML preview of your file.\nGreat! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#initialize-git-in-our-project",
    "href": "intro-to-git/03-make-git-project.html#initialize-git-in-our-project",
    "title": "10  Make our Git project",
    "section": "10.3 Initialize Git in our Project",
    "text": "10.3 Initialize Git in our Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need to initialize Git inside of our Quarto project.\nIn basic terms, initializing tells Git “I want you to start tracking this folder.”\nHow to initialize Git in our new project:\n\nNavigate to the Terminal tab in RStudio.\nIn the terminal, run this:\ngit init\n\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/\n\nWhat’s actually happening here? This command creates a hidden folder called .git in the project folder. This folder contains all the information Git needs to track changes in our project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-make-git-project.html#ask-git-what-it-sees-git-status",
    "href": "intro-to-git/03-make-git-project.html#ask-git-what-it-sees-git-status",
    "title": "10  Make our Git project",
    "section": "10.4 Ask Git what it sees (git status)",
    "text": "10.4 Ask Git what it sees (git status)\nNow that we’ve let Git know that we want it to start watching by initializing it in our project, we can check the status of our files by running the following command:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLet’s quickly breakdown what this all means:\n\n“On branch main”: You’re working on the main branch — the default starting branch for development.\n“No commits yet”: This means Git is ready, but you haven’t saved any versions yet.\n“Untracked Files”: These are files Git sees in your folder, but it’s not saving changes to them yet. These files are marked in red in the terminal.\n\nThe git status command should be used frequently in your git process to keep track of your progress and make sure you’re where you think you are.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#staging-the-files-you-do-want-git-add",
    "href": "intro-to-git/04-add-files.html#staging-the-files-you-do-want-git-add",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Staging the Files You Do Want (git add)",
    "text": "11.4 Staging the Files You Do Want (git add)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#adding-the-files-you-do-want-staging-git-add",
    "href": "intro-to-git/04-add-files.html#adding-the-files-you-do-want-staging-git-add",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Adding the Files You Do Want (Staging git add)",
    "text": "11.4 Adding the Files You Do Want (Staging git add)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#take-your-first-snapshot-commit-git-commit--m",
    "href": "intro-to-git/04-add-files.html#take-your-first-snapshot-commit-git-commit--m",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Take your first Snapshot (Commit git commit -m)",
    "text": "11.5 Take your first Snapshot (Commit git commit -m)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#take-your-first-snapshot-git-commit--m",
    "href": "intro-to-git/04-add-files.html#take-your-first-snapshot-git-commit--m",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Take your first Snapshot (git commit -m)",
    "text": "11.5 Take your first Snapshot (git commit -m)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#staging-adding-the-files-you-do-want-git-add",
    "href": "intro-to-git/04-add-files.html#staging-adding-the-files-you-do-want-git-add",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Staging: Adding the Files You Do Want (git add)",
    "text": "11.4 Staging: Adding the Files You Do Want (git add)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#committing-take-your-first-snapshot-git-commit--m",
    "href": "intro-to-git/04-add-files.html#committing-take-your-first-snapshot-git-commit--m",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Committing: Take your first Snapshot (git commit -m)",
    "text": "11.5 Committing: Take your first Snapshot (git commit -m)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#staging-adding-the-files-you-do-want",
    "href": "intro-to-git/04-add-files.html#staging-adding-the-files-you-do-want",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Staging: Adding the files you do want",
    "text": "11.4 Staging: Adding the files you do want\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-add-files.html#committing-take-your-first-snapshot",
    "href": "intro-to-git/04-add-files.html#committing-take-your-first-snapshot",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Committing: take your first Snapshot",
    "text": "11.5 Committing: take your first Snapshot\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html",
    "href": "intro-to-git/install-and-setup.html",
    "title": "9  Installation and setup",
    "section": "",
    "text": "9.1 Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are have the tools we need. Let’s do that by completing the following steps:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html#install-the-tools",
    "href": "intro-to-git/install-and-setup.html#install-the-tools",
    "title": "9  Installation and setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html#configure-git",
    "href": "intro-to-git/install-and-setup.html#configure-git",
    "title": "9  Installation and setup",
    "section": "9.2 Configure Git",
    "text": "9.2 Configure Git\nAfter installing Git, you’ll need to go through the one-time process of configure it with your username and email.\nStep 1: Start a new terminal session in RStudio\nClick on the terminal tab and a new session will be created (if there isn’t one already). The terminal tab is located next to the Console tab.\n\nTip: If can’t find the terminal tab, go to Tools &gt; Terminal &gt; Move Focus to Terminal .\n\nStep 2: Set your Git username\nFirst, we’ll set your user.name so Git knows who you are.\nRun the following command from your terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a terminal response with the username you entered.\nIf you didn’t get the response expected, then try again. Remember, be careful about punctuation.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nStep 3: Setting your git email\nNow we’ll set your user.email.\nThe email you enter needs to match the one you used to setup your Github account. If it doesn’t, you’ll run into permissions issues later.\n\nIn your terminal, type and run the following command, but replace the email with your email (including the quotation marks):\ngit config --global user.email \"email@example.com\"\n\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly. If it doesn’t match, you may run into permissions issues later on.\n\n\nStep 4: set your default branch\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\n\nIn your terminal, run this:\ngit config --global init.defaultBranch main\nYou won’t get a response unless there was a problem.\nIn your terminal, run this:\ngit config --global pull.ff only\nThis sets a behaivor that is too complicated to explain now, but comes recommended in this very long but thorough explanation.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html#setup-your-ssh-keys",
    "href": "intro-to-git/install-and-setup.html#setup-your-ssh-keys",
    "title": "9  Installation and setup",
    "section": "9.3 Setup your SSH Keys",
    "text": "9.3 Setup your SSH Keys\nThere are a couple of ways to authenticate with Github from your computer. The book Happy Git with R recommends using personal access tokens and I think that is fine, but I prefer the one-and-done nature of SSH keys, so that is the method we will use.\n\nAfter making sure git is installed, launch RStudio. (If it was already open, quit and re-launch it.)\nGo to the menu Tools &gt; Global Options, then click on the Git/SVN tab.\nCheck the Enable version control interface for RStudio button.\nThere should already be a path included in the Make sure the path to the git executable is correct.\n\nIf it is not, try quitting RStudio and relaunching it and do this step again.\nIf it is still not there, talk to the prof. We’ll find it.\n\n\n\n\n\nGit/SVN window\n\n\n\n9.3.1 Create a new SSH key\nIf you SSH Key path was already filled then you can skip to the next step.\nIf you’ve never used SSH keys before, you’ll have to create one, but RStudio makes that fairly painless.\n\nClick on the Create RSA Key button.\nYou should be able to leave all the defaults as they are. Leave the optional Passphrase field blank.\nClick Create.\nYou should see a message that says “Key Created Successfully” and it might show you a pretty picture. Click OK.\n\n\n\n\nSSH Key Creation window",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html#add-ssh-key-in-github",
    "href": "intro-to-git/install-and-setup.html#add-ssh-key-in-github",
    "title": "9  Installation and setup",
    "section": "9.4 Add SSH key in Github",
    "text": "9.4 Add SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\nFirst we need access to your “Public” key:\n\nIn the RStudio Git/SVN window, click on the View public key button.\nThis will open a new window with the contents of your public key.\n\n\n\n\nPublic key example\n\n\nYou’ll want access to copy that key to paste into Github in the next step:\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n9.4.1 Test Github connection\n\nFrom your terminal in RStudio, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/install-and-setup.html#checkpoint",
    "href": "intro-to-git/install-and-setup.html#checkpoint",
    "title": "9  Installation and setup",
    "section": "9.5 🎯 Checkpoint",
    "text": "9.5 🎯 Checkpoint\nIn this chapter you:\n\nDownloaded Git\nSetup your Github account\nSet your Git username (with an appropriate name or alias)\nSet your Git email (using the email on your account Github account)\nSetup SSH Keys to authenticate with Github\n\nNow that Git is configured, you’re ready to create your first project.\n\nNext up\nIn the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start using the terminal.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/introduction.html",
    "href": "intro-to-git/introduction.html",
    "title": "7  Welcome",
    "section": "",
    "text": "7.1 Who is this guide for?\nWelcome to the Intro to Git guide! We hope this guide will be a resource for you to learn the basics of working with version control for the first time.\nThis guide is for students who know some R and want to learn Git and GitHub to manage and collaborate on R projects (especially Quarto ones). It assumes little-to-no hands-on terminal experience but will encourage building confidence over time by interacting with Github through the command line.\nStudents who are brand new to the Terminal may also find it helpful to go through the Intro to Terminal section of this book before working through this guide.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "intro-to-git/introduction.html#prerequisites",
    "href": "intro-to-git/introduction.html#prerequisites",
    "title": "7  Welcome",
    "section": "7.2 Prerequisites",
    "text": "7.2 Prerequisites\nBefore we move on to working with Git and Github, we need to make sure you have what you need to successfully complete the exercises in this guide. The guide assumes you already have the following installed on your computer:\n\nR\nRStudio\nQuarto\n\nIf you are missing any these, please go to the links listed and make sure to install before moving on to the next chapter!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "intro-to-git/introduction-to-git.html",
    "href": "intro-to-git/introduction-to-git.html",
    "title": "8  Introduction to version control",
    "section": "",
    "text": "8.1 Introduction to Version control\nIn this chapter, we’ll talk about the benefits of using version control to track changes in your coding projects. We’ll also explain how Git and Github allow store versions of our projects online so we can collaborate with others.\nWhat is version control?\nVersion control is a system that helps you track and manage changes to files over time. It lets you save different versions of your work, go back to earlier versions if you make a mistake, and work with other people without overwriting each other’s changes.\nImagine you’re writing a paper. Every time you make a big edit, you save a new copy: paper_v1.docx, paper_v2.docx, paper_final.docx, etc.\nIt’s easy to see how it could become difficult to keep track of which version was which using this kind of a system. Now imagine how much messier and unwieldy it could be trying to keep track of different versions of an R project with changes in multiple .qmd file —&gt; enter version control.\nVersion control keeps track of these different versions for you. Have you ever used the versions feature in Google docs when working on an article draft? Then you’ve interacted with version control.\nWhat is Git?\nTo keep track of versions of coding projects, programmers use a version control tool called Git. It runs on your computer and helps you:\nYou can think of Git like the “save game” feature on a video game. Instead of saving the progress of your character in your game, Git saves your progress in your coding files. But just like in many games, we have to tell Git when and how to save a new version.\nThis is where Github comes in.\nWhat is Github?\nGitHub is a website that hosts Git repositories (your project + its history) online.\nGithub lets you:\nIf Git is a notebook where you track all your work, GitHub is like an online library where you can store a copy of that notebook — and invite others to read it or even help you write in it.\nTo recap:\nNext up:\nWe’ll get our computers and accounts setup to use Git.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to version control</span>"
    ]
  },
  {
    "objectID": "intro-to-git/introduction-to-git.html#introduction-to-version-control",
    "href": "intro-to-git/introduction-to-git.html#introduction-to-version-control",
    "title": "8  Introduction to version control",
    "section": "",
    "text": "Track changes you make to your project files.\nSave “snapshots” (called commits) of your project over time.\nGo back to an earlier snapshot if needed.\nSee what exactly changed between versions.\nWork with teammates without messing up each others’ work.\n\n\n\n\n\n\n\nStore your Git project safely in the cloud.\nShare your project with others.\nCollaborate with other people (even if they are far away).\nKeep a backup in case your computer crashes.\n\n\n\n\nVersion control: Describes the system of tracking changes to your files over time so you can revisit or undo edits, collaborate with others, and keep a history of your work.\nGit: a version control tool you use on your computer to track changes.\nGitHub: a website where you can upload (and share) your Git projects.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to version control</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html",
    "href": "intro-to-git/make-git-project.html",
    "title": "10  Make our Git project",
    "section": "",
    "text": "10.1 Create a new RStudio Project\nBefore you can add anything to Github, you need a Quarto project to track.\nFollow the steps below to make a new Quarto project in RStudio:\nMake a new Quarto project\nNavigate to:\nIn the “Create Quarto Project” window, do the following:\nYou’ll now have a project with a .qmd file (Quarto).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html#create-a-new-rstudio-project",
    "href": "intro-to-git/make-git-project.html#create-a-new-rstudio-project",
    "title": "10  Make our Git project",
    "section": "",
    "text": "File → New Project → New Directory → Quarto Project\n\n\n\nGive your directory a descriptive name like my-first-git-project in the Directory Name field.\nCheck the Create project as a subdirectory of field to make sure you’re creating your project in the folder where you keep your class or coding projects on your computer.\nMake sure none of the boxes are checked.\nFinally, click Create Project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html#run-a-quarto-file",
    "href": "intro-to-git/make-git-project.html#run-a-quarto-file",
    "title": "10  Make our Git project",
    "section": "10.2 Run a Quarto File",
    "text": "10.2 Run a Quarto File\nBefore we get into Git, let’s quickly make sure Quarto is working as expected by creating and rendering a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…).\nAdd a title like “Intro to Git”, and click Create.\nSave the file, and name it something like 01-index.qmd when prompted.\nClick Render in the top bar.\n\nA new browser window should open with an HTML preview of your file.\nGreat! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html#initialize-git-in-our-project",
    "href": "intro-to-git/make-git-project.html#initialize-git-in-our-project",
    "title": "10  Make our Git project",
    "section": "10.3 Initialize Git in our Project",
    "text": "10.3 Initialize Git in our Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need to initialize Git inside of our Quarto project.\nIn basic terms, initializing tells Git “I want you to start tracking this folder.”\nHow to initialize Git in our new project:\n\nNavigate to the Terminal tab in RStudio.\nIn the terminal, run this:\ngit init\n\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/\n\nWhat’s actually happening here? This command creates a hidden folder called .git in the project folder. This folder contains all the information Git needs to track changes in our project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html#ask-git-what-it-sees-git-status",
    "href": "intro-to-git/make-git-project.html#ask-git-what-it-sees-git-status",
    "title": "10  Make our Git project",
    "section": "10.4 Ask Git what it sees (git status)",
    "text": "10.4 Ask Git what it sees (git status)\nNow that we’ve let Git know that we want it to start watching by initializing it in our project, we can check the status of our files by running the following command:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLet’s quickly breakdown what this all means:\n\n“On branch main”: You’re working on the main branch — the default starting branch for development.\n“No commits yet”: This means Git is ready, but you haven’t saved any versions yet.\n“Untracked Files”: These are files Git sees in your folder, but it’s not saving changes to them yet. These files are marked in red in the terminal.\n\nThe git status command should be used frequently in your git process to keep track of your progress and make sure you’re where you think you are.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/make-git-project.html#checkpoint",
    "href": "intro-to-git/make-git-project.html#checkpoint",
    "title": "10  Make our Git project",
    "section": "10.5 🎯 Checkpoint",
    "text": "10.5 🎯 Checkpoint\nIn this chapter you’ve:\n\nMade a new Quarto project\nInitialized Git inside your project (git init)\nAsked Git about the status of our project files (git status)\n\n\nNext up\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore. Then we’ll take our first “snapshot” of our project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make our Git project</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html",
    "href": "intro-to-git/add-files.html",
    "title": "11  Add, ignore, and commit files",
    "section": "",
    "text": "11.1 Ignoring files\nIn our last chapter, we ran the git status command to tell us what Git sees within our project.\nLet’s take another look at those files now by re-running:\nUnder untracked files you’ll see a list like:\nNotice those .html files in the list? HTML files are the rendered output from Quarto, and they change every time you make a change and click “Render.”\nGenerally-speaking, we don’t save these kinds of rendered files in our repositories because they change so frequently and can cause a lot of headaches during collaboration.\nThere are some notable exceptions here…\nNote for Crit: obviously let’s chat about this part and addressing the Github pages thing…My general thought with teaching people about github is that we should try our best to teach them best practices before teaching them exceptions to rules because it will help them be better prepared for real-world dev environments",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#ignoring-files",
    "href": "intro-to-git/add-files.html#ignoring-files",
    "title": "11  Add, ignore, and commit files",
    "section": "",
    "text": "git status\n\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\n\n\n\nThey’re small, essential, and need to be versioned for a specific reason\nYou’re outputting human-readable deliverables (like a PDF report or documentation site)\nYou’re working on a static site or book.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#introducing-.gitignore",
    "href": "intro-to-git/add-files.html#introducing-.gitignore",
    "title": "11  Add, ignore, and commit files",
    "section": "11.2 Introducing .gitignore",
    "text": "11.2 Introducing .gitignore\nIn a Git project, there are several types of files and directories that you typically want to keep out of our repositories to keep things clean, secure, and easy to manage.\nWhat you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what it shouldn’t be tracking in the project.\nIn general, the following kinds of files shouldn’t be tracked in Github:\n\nSensitive files: Files containing passwords or private information\nBig files: Git isn’t built to keep track of large files.\n\nFor R and Quarto projects, this will include the following common files types:\n\nSession and history files: .Rhistory, .RData, .Rproj.user/\nKnitting files: .utf8.md, .knit.md\nOutput/render folders: *_files/ ,_site/, _book/\nEditor and IDE Config Files: .Rproj.user/\n\nDon’t worry if you don’t fully understand what all of these files are yet. The important thing here is to know is that there are things we should and should not upload to Git, and the way we keep the things we don’t want tracked out of Github is by using a .gitignore file.\nWe’ll set one up for our new project in the next step.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#exercise-make-a-.gitignore",
    "href": "intro-to-git/add-files.html#exercise-make-a-.gitignore",
    "title": "11  Add, ignore, and commit files",
    "section": "11.3 📝 Exercise: Make a .gitignore",
    "text": "11.3 📝 Exercise: Make a .gitignore\nLet’s make a .gitignore for your new Git project from the command line using the touch command.\nIn the terminal, run:\ntouch .gitignore\nIn the RStudio Files pane, click on the new .gitignore file to open it.\n\nTip: If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.\n\nOnce you have your blank .gitignore file open, add the following lines and save the file:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nCheck your Git status again by running:\ngit status\nRemember when we ran git status before and saw our .html files? Now the .html files should be gone from the list of files Git “sees” because we’ve told it to ignore these types of files with the *.html line in our ignore file.\nBefore moving forward, let’s add a few more things to the .gitignore to cover some additional things we want to ignore (don’t worry about understanding what all of these are right now).\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#staging-adding-the-files-you-do-want",
    "href": "intro-to-git/add-files.html#staging-adding-the-files-you-do-want",
    "title": "11  Add, ignore, and commit files",
    "section": "11.4 Staging: Adding the files you do want",
    "text": "11.4 Staging: Adding the files you do want\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command.\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#committing-take-your-first-snapshot",
    "href": "intro-to-git/add-files.html#committing-take-your-first-snapshot",
    "title": "11  Add, ignore, and commit files",
    "section": "11.5 Committing: take your first Snapshot",
    "text": "11.5 Committing: take your first Snapshot\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/add-files.html#checkpoint",
    "href": "intro-to-git/add-files.html#checkpoint",
    "title": "11  Add, ignore, and commit files",
    "section": "11.6 🎯 Checkpoint",
    "text": "11.6 🎯 Checkpoint\nIn this chapter you:\n\nCreated a .gitignore file\nAdded the files you wanted to track (staged your files)\nTook your first project snapshot (committed your files)\n\nGreat job! You’ve saved the first version of your project locally (AKA on your computer). Now, the snapshot needs to be saved to a remote project (AKA Github).\n\nNext up\nYou’ll learn how to send this “snapshot” of our project to Github for safe keeping.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Add, ignore, and commit files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html",
    "href": "intro-to-git/pushing-to-github.html",
    "title": "12  Pushing to Github",
    "section": "",
    "text": "12.1 Create a Repository on GitHub\nNow that your project has been committed locally, let’s put it on GitHub so you can back it up and collaborate with others.\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.\nIn the Quick setup — if you’ve done this kind of thing before box:",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html#create-a-repository-on-github",
    "href": "intro-to-git/pushing-to-github.html#create-a-repository-on-github",
    "title": "12  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nComplete the form by doing the following:\n\nFill in the Repository name field, using the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank for now\nLeave the box unchecked that says “Initialize this repository with a README” (We can add this on our own later)\nClick Create repository\n\n\n\n\n\nClick the copy button next to the SSH URL box.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html#connect-your-local-git-project-to-github",
    "href": "intro-to-git/pushing-to-github.html#connect-your-local-git-project-to-github",
    "title": "12  Pushing to Github",
    "section": "12.2 Connect Your Local Git Project to GitHub",
    "text": "12.2 Connect Your Local Git Project to GitHub\nNavigate to the Terminal tab inside your RStudio Quarto project.\nStep 1: Add our remote project:\nType the following command, making sure there’s a space after ‘origin’:\ngit remote add origin \nthen paste the URL you copied from github.\nYour complete command should look something like this:\ngit remote add origin git@github.com:your-name/your-repo-name.git\nRun the command by hitting enter.\nStep 2: set our branch to main\nNow we’ll set our main branch name to main by running:\ngit branch -M main\nStep 3: set our branch to main\nLastly, we’ll push our main branch to Github by running:\ngit push -u origin main",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html#quick-recap-what-do-these-commands-do",
    "href": "intro-to-git/pushing-to-github.html#quick-recap-what-do-these-commands-do",
    "title": "12  Pushing to Github",
    "section": "12.3 Quick Recap: What Do These Commands Do?",
    "text": "12.3 Quick Recap: What Do These Commands Do?\nOk, we just did a lot there. Let’s pause for a moment and breakdown everything we just did:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: up a link between your local main branch and the main branch on GitHub. “Pushing” uploaded your local commits (the ones we did in the last section) to GitHub.\n\nIn short, these steps connected your local project to your Github repository, then saved the snapshot you took to the cloud. We also won’t have to repeat these exact steps ever again when saving snapshots in the future.\n🎉 Congratulations: you now have your first live project is on GitHub!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html#mini-exercise-explore-your-github-project",
    "href": "intro-to-git/pushing-to-github.html#mini-exercise-explore-your-github-project",
    "title": "12  Pushing to Github",
    "section": "12.4 📝 Mini exercise: Explore Your GitHub Project",
    "text": "12.4 📝 Mini exercise: Explore Your GitHub Project\nGo to your repository page on GitHub (or refresh the page if you still have it open from before).\nYou should see all your project files, including .qmd, .gitignore, etc.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project, including:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/pushing-to-github.html#checkpoint",
    "href": "intro-to-git/pushing-to-github.html#checkpoint",
    "title": "12  Pushing to Github",
    "section": "12.5 🎯 Checkpoint",
    "text": "12.5 🎯 Checkpoint\nAt this point in the guide, you’ve learned how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nIgnore files (.gitignore)\nStage and commit changes (git add and git commit)\nConnect your local project to GitHub\nPush your first commit\n\n\nNext up:\nwe’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html",
    "href": "intro-to-git/updating-your-repo.html",
    "title": "13  Updating files",
    "section": "",
    "text": "13.1 Make a Small Change\nYou’ll also practice writing good commit messages and checking your work.\nLet’s open your Quarto file you made in Chapter 1 (e.g., 01-index.qmd) and make a couple changes.\nReplace the auto-generated text and code blocks in the file with the following:\nUnder the summary header and description, add a new code block with the following:\nThen save the file.\nNow check the status in your Terminal again by running:\nThe Terminal should respond with something like this:\nLet’s break this down :",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#make-a-small-change",
    "href": "intro-to-git/updating-your-repo.html#make-a-small-change",
    "title": "13  Updating files",
    "section": "",
    "text": "---\ntitle: \"Intro to Git\"\nformat: html\n---\n\n# Summary\n\nHere is a summary of the `mtcars` dataset.\n\nsummary(mtcars)\n\n\ngit status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   01-index.qmd\n\n\nThe red text tells us that Git sees that something was modified in your 01-index.qmd.\nIt’s under the Changes not staged for commit: section, which tells us that Git hasn’t staged it yet (so it won’t be saved in the next commit).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#stage-the-change",
    "href": "intro-to-git/updating-your-repo.html#stage-the-change",
    "title": "13  Updating files",
    "section": "13.2 Stage the Change",
    "text": "13.2 Stage the Change\nNow that you know Git sees the change, you need to tell Git, “Hey, save this file in the next snapshot.”\nYou’ll do this by adding — or staging — the modified file for your next commit.\nTo stage your changed file, run:\ngit add 01-index.qmd\nNow, check your Git status again.\ngit status\nYou should see your 01-index.qmd file in green, along with following message:\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  modified:   01-index.qmd`\n🎉 Great! Your changed file is now staged and ready to commit.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#commit-your-change",
    "href": "intro-to-git/updating-your-repo.html#commit-your-change",
    "title": "13  Updating files",
    "section": "13.3 Commit your change",
    "text": "13.3 Commit your change\nNow, we’ll save the snapshot of our updated file in Git’s memory. When we do so, we’ll want to include a descriptive commit message noting what we changed. Git commits always need a message attached to them.\nA few best practices to keep in mind with commit messages:\n\nUse present tense: \"Add summary of...\", not \"Added...\"\nKeep it short but descriptive\nThink: “What changed in this version?”, write that in the message.\n\n✅ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or if you need to go back to a prior version, commit messages will help your retrace your steps.\nWith those things in mind, practice writing a descriptive commit message with your change to the 01-index.qmd.\nType something like the following and hit enter:\ngit commit -m \"Add summary of mtcars dataset\"\nTerminal will respond with a summary of insertions and deletions in your file.\nA quick word of caution about the -m flag and Vim\nGit commits always need a message attached to them. The -m flag tells the command line that we’ll be writing our message inline with our command.\nIf you forget to include that message flag, the Terminal will open its default text editor called Vim. If you find yourself in this scenario and don’t know how to get out, there’s a section on getting out of Vim in our Terminal Guide.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#push-your-commit-to-github",
    "href": "intro-to-git/updating-your-repo.html#push-your-commit-to-github",
    "title": "13  Updating files",
    "section": "13.4 Push your commit to GitHub",
    "text": "13.4 Push your commit to GitHub\nNow, that our changes are staged and commited, we’ll send the snapshot from your computer to GitHub by pushing our changes.\nPush your new commit by running:\ngit push\nNow go to your repository on Github — you’ll see your commit listed under the Commits tab and your file under the &lt;&gt;Codetab! (You may need to refresh)\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why this push command was shorter than it was last time. In your last push, you needed to connect local project (the one on your computer) to the remote repository on Github and set your main branch.\nSince you already connected your Quarto project to Github and set our branch to main, you can just use the git push command now.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#git-workflow-best-practices",
    "href": "intro-to-git/updating-your-repo.html#git-workflow-best-practices",
    "title": "13  Updating files",
    "section": "13.5 Git workflow best practices",
    "text": "13.5 Git workflow best practices\nBefore we move on, here’s a few key best practices to keep in mind as you’re getting used to working in Git:\n\nCommit early, commit often: Save your work frequently in small, logical chunks. This makes changes easier to track, understand, and roll back.\nWrite clear commit messages: Use concise, meaningful messages that explain why the change was made. (e.g., Fix typo in introduction, not just update)\nCheck status regularly: Run git status often to see what’s changed and what’s staged.\nStage changes selectively: Use git add &lt;filename&gt; (instead of git add .) when you want more control over what goes into each commit.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/updating-your-repo.html#checkpoint",
    "href": "intro-to-git/updating-your-repo.html#checkpoint",
    "title": "13  Updating files",
    "section": "13.6 🎯 Checkpoint",
    "text": "13.6 🎯 Checkpoint\nIn this chapter, you learned the basic git workflow:\n\nMake a change to your local project\nStage the changes in git (git add ..)\nTake a snapshot of the changed files (git commit -m ...)\nPush the changes to Github (git push)\nBest practices to keep things clean and manageable\n\nThis is the cycle you will repeat over and over again as you work on coding projects using git.\n\nNext up:\nwe’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Updating files</span>"
    ]
  }
]