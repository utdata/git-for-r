[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git for R",
    "section": "",
    "text": "About this book\nI’m finding I’m not happy with existing resources on using Git with R, so I want to make a very opinionated guide specifically for my students.",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html",
    "href": "intro-to-git/00-introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "2 Introduction to Version control\nWhat is version control?\nVersion control is a system that helps you track and manage changes to files over time. It lets you save different versions of your work, go back to earlier versions if you make a mistake, and work with other people without overwriting each other’s changes.\nImagine you’re writing a paper. Every time you make a big edit, you save a new copy: paper_v1.docx, paper_v2.docx, paper_final.docx, etc.\nVersion control keeps track of these versions for you. Have you ever used the versions feature in Google docs when working on an article draft? Then you’ve interacted with version control.\nWhat is Git?\nTo keep track of versions of coding projects, programmers use a version control tool called Git. It runs on your computer and helps you:\nYou can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.\nHow GitHub fits into this:\nGitHub is a website that hosts Git repositories (your project + its history) online.\nIt lets you:\nIf Git is your notebook where you track all your work, GitHub is like an online library where you can store a copy of your notebook — and invite others to read it or even help you write it.\nIn short:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-setup-tools.html",
    "href": "intro-to-git/02-setup-tools.html",
    "title": "4  Setup: Tools You’ll Need",
    "section": "",
    "text": "(instructions for installing Git, GitHub account, RStudio, and Quarto)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Setup: Tools You’ll Need</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html",
    "href": "terminal/terminal.html",
    "title": "1  Using a Terminal",
    "section": "",
    "text": "2 Terminal\nA short chapter to explain basic bash commands like ls, cd, mkdir, etc.\nTerminal (Mac) and Git Bash (Windows) are programs that can run a shell, which is a text-based user interface where you type commands that your computer understands.\nDevelopers use a shell to issue commands to their computer to do things, like to install programs, change what folder their are in, etc. Using a terminal program to use your computer can be confusing at first, but it will become second-nature as you progress through this class.\nThe shell programming language we will use for these text-based interactions is called Bash. Bash is a Unix-based program and most of the Internet runs on Unix (or Linux) computers.\nWindows doesn’t understand Bash at all without the help of another program. This is why we installed Git and Git Bash so we can all speak the same language.\nMacs understand Bash natively, but some day they will change to a similar language called zsh. When you launch a shell on newer Macs you might get a message The default interactive shell is now zsh. To update your account to use zsh, please run chsh -s /bin/zsh. DON’T DO THIS! JUST IGNORE IT. We will continue to use Bash. Later we will add a command to disable this message.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#launch-your-terminal-in-rstudio",
    "href": "terminal/terminal.html#launch-your-terminal-in-rstudio",
    "title": "1  Using a Terminal",
    "section": "2.1 Launch your terminal in RStudio",
    "text": "2.1 Launch your terminal in RStudio\n\nI’ll show you how in person",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#the-terminal-prompt",
    "href": "terminal/terminal.html#the-terminal-prompt",
    "title": "1  Using a Terminal",
    "section": "2.2 The terminal prompt",
    "text": "2.2 The terminal prompt\nBefore I adjusted it, I would see this when I launched my terminal:\nCOMM-A54338:~ ccm346$\n\nThe first part before the ~ is my computer name.\nThe part after the ~ is is my username.\nLastly we have the $. This is the “prompt” where you type commands. You type your commands AFTER the $ and then hit Return on your keyboard to execute them.\n\nIn this book you might see examples of a command that includes an output. That first line will have the $ before the command so you know that it is a command, but DON’T TYPE IN THE $. For instance:\n$ pwd\n/Users/ccm346/icj/myproject\nMeans you type in just pwd and then hit return.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#typing-vs-copypaste",
    "href": "terminal/terminal.html#typing-vs-copypaste",
    "title": "1  Using a Terminal",
    "section": "2.3 Typing vs copy/paste",
    "text": "2.3 Typing vs copy/paste\nI encourage you to type commands into your terminal instead of copy and pasting them from the lessons. Build muscle and mind memory. Typing a command wrong and then having to figure out why it broke will help you learn it and remember it. If you just copy and paste blindly, then you won’t learn anything other than command-c and command-v.\n\n\n\n\n\n\nI use the terms “folder” and “directory” interchangeably here. They are the same thing.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#print-working-directory",
    "href": "terminal/terminal.html#print-working-directory",
    "title": "1  Using a Terminal",
    "section": "2.4 Print working directory",
    "text": "2.4 Print working directory\nOne of the hardest things to get a handle on when first working in the terminal is to figure out where you are on your computer. It’s important, because you can run commands on any file on your computer from where you are, but you gotta know where that is before you can do so. So, we’ll use pwd, or “print working directory”.\n\nIn your Terminal, type and execute:\n\npwd\nWhen I do this on my machine, here is what the command and response look like:\n$ pwd\n/Users/ccm346\nBecause I’m using my work computer my user directory is called “ccm346”. Yours might be your name or part of your name. This user directory is called your “home directory”. All of your computer files are stored inside your home directory.\nWhen you launch a new terminal it starts you out inside this directory.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#list-directory",
    "href": "terminal/terminal.html#list-directory",
    "title": "1  Using a Terminal",
    "section": "2.5 List directory",
    "text": "2.5 List directory\nLet’s see what is inside our home directory.\n\nDo this:\n\nls\nThis will list everything in the directory you are in. Mine looks like this:\n$ ls\nApplications        Library         google-cloud-sdk\nCreative Cloud Files    Movies          miniforge3\nDesktop         Music           thingy.html\nDocuments       Pictures\nDownloads       Public\nIt listed the names of all the folders and files of the directory I’m in. This is similar to opening a folder browser on your computer and then opening your home folder and looking inside of it.\n\n\n\nHome directory",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#flags",
    "href": "terminal/terminal.html#flags",
    "title": "1  Using a Terminal",
    "section": "2.6 Flags",
    "text": "2.6 Flags\nBut sometimes, I want to know more information about the files, like their modification date. To do this, we introduce something called flags, which add nuance or detail to a terminal command. They start with a dash, and you can pile them on, as I’ll demonstrate.\n\nFirst, try this:\n\nls -l\n\n\n\n\n\n\nImportant\n\n\n\nThat is “dash L”, not a number 1. Watch the spaces, too.\n\n\nMy output looks like this:\ncrit:~$ ls -l\ntotal 0\ndrwx------@   5 ccm346  AUSTIN\\Domain Users   160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users   128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users   256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users  3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users   192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users   128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users   160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users   128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users   672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users   480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     0 Nov 14  2022 thingy.html\nWell, that’s a lot of info, and much of it jibberish. Here is what each part of those lines means …\n\ndrwxr-xr-x and similar is the permission information for a that file or folder. We aren’t going to get into it here, but you can read more if you like.\nThe next number is the number of files inside the folder, sort of. If this is a file, the number will be “1”. If it is a folder, the number will always be at least “2”. We’ll come back to this.\nNext is the owner of the file or folder.\nNext is a permission level for the user when the file was created.\nNext is the file size in bytes.\nNext is the last modified date of the file or when a file was added to the folder.\nFile or folder name.\n\n\n2.6.1 Hidden files\nLet’s add another flag to your command.\n\nDo this:\n\nls -al\nMy list got a TON longer. I snipped out the middle part here:\ncrit:~$ ls -al\ntotal 352\ndrwxr-x---+  54 ccm346  AUSTIN\\Domain Users   1728 Jul 10 10:50 .\ndrwxr-xr-x    7 root    admin                  224 Jun 24 13:21 ..\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_EngineServer\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_StreemToSync\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_SyncToStreem\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_UIServer\n-r--------    1 ccm346  AUSTIN\\Domain Users      7 Nov  5  2021 .CFUserTextEncoding\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users  14340 Jul 11 09:31 .DS_Store\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     35 May 22 14:09 .Rapp.history\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users    510 Mar 30 11:45 .Renviron\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     73 Nov  5  2021 .Rhistory\n&lt;snip&gt;\ndrwx------@   5 ccm346  AUSTIN\\Domain Users    160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users    128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users    256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users   3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users    192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users    128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users    160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users    128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users    672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users    480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users      0 Nov 14  2022 thingy.html\n\nThe -a flag means “all” files and folders, including hidden ones. All the files or folders at the top that start with a dot like .Box_EngineServer are on the computer but not visible normally. There can be a lot of hidden them … I have 40+, far more than regular files and folders.\n\nLet’s list again with just the -a flag:\n\nls -a\nHere is the top of my list:\ncrit:~$ ls -a\n.\n..\n.Box_EngineServer\n.Box_StreemToSync\n.Box_SyncToStreem\n.Box_UIServer\n.CFUserTextEncoding\n.DS_Store\n\n\n2.6.2 Dot directories\nBut let’s consider the first two returns:\n$ ls -a\n.\n..\nThese are two special designations in the Unix world. A single period . designates “this directory” and two periods .. designates the “parent directory”, i.e. the folder “above” this one. Every directory has these, so that’s why the ls -l always shows two items inside a directory, even if it is “empty” of regular files or folders.\nWe can use these “dot” and “dot dot” designations to move around into different directories, and to manage files in our current directories. They become super important when we make “paths” between files in our programs and web pages.\nLet’s see this “dot” designation in action by opening our “current” folder in Finder. This command differs slightly depending on your OS.\n\nmacOSWindows\n\n\n\nDo this command:\n\nopen .\n\n\n\nDo this command:\n\nstart .\n\n\n\nSince you are inside your “home directory”, this should open that folder in your Finder.\n\n\n\n\n\n\niCloud and One Drive\n\n\n\nA word about cloud services like iCloud and OneDrive. We are going set up a place to store our projects so they are NOT backedup to cloud services. We do this for a couple of reasons:\n\nLater projects in this class will include thousands of tiny files. The process of writing them back forth to the cloud service can affect computer performance.\nOur projects use these files in order to function, and when they get off-loaded to the cloud then our code has problems working.\n\nDon’t worry … we’ll back up your class work through Github.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#make-directory",
    "href": "terminal/terminal.html#make-directory",
    "title": "1  Using a Terminal",
    "section": "2.7 Make directory",
    "text": "2.7 Make directory\nNext we are going to make a new empty folder to store all our class files using the mkdir command.\n\nDo this:\n\nmkdir icj\n\nThen use ls again to see your new directory amongst the others.\n\nCreating a directory like this is exactly the same as opening a desktop window on your Mac creating a new folder. Folders and directories are the same thing.\n\nCool, let’s make another directory inside of icj.\n\nmkdir icj/newdirectory\n\nNow you can do an ls on the “icj” folder to see what is inside it.\n\nls icj\nIt should show you newdirectory. Something like this:\n$ ls icj\nnewdirectory\nA couple of things about this:\nYou have listed the contents of the icj directory without being inside of it. You can list the contents of any folder on your computer if you know the path to it. In fact, you can do any command on any file or folder on your computer if you know its path. The path is the folder structure between where you “are” in the terminal to where the new file/folder is.\nIf you name a directory with a space in it, you’ll not get what you want unless you put quotes around it. Because of this, I avoid using spaces in files and folders and use - or _ instead. I avoid capitalization, too, because our folders become url names and sometimes caps mess it up, especially on PCs.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#change-directory",
    "href": "terminal/terminal.html#change-directory",
    "title": "1  Using a Terminal",
    "section": "2.8 Change directory",
    "text": "2.8 Change directory\nIt’s time to move into different folders within our terminal. The cd command lets us change directory.\n\nNow, let’s go inside the icj folder:\n\ncd icj\n\nLet’s see what is inside:\n\nls\nThat should show you a result with the newdirectory that we created earlier.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#parent-directories",
    "href": "terminal/terminal.html#parent-directories",
    "title": "1  Using a Terminal",
    "section": "2.9 Parent directories",
    "text": "2.9 Parent directories\nNow let’s get crazy. Let’s list the files “above” where we are.\n\nType and run this command.\n\n$ ls ../\nRemember I said that two dots means the parent directory? This should show you the list of files and folders in your home directory.\n\nNow, confirm where you are:\n\npwd\nWhich should still be icj. So you had listed the files for the folder “above” you.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#tab-completion",
    "href": "terminal/terminal.html#tab-completion",
    "title": "1  Using a Terminal",
    "section": "2.10 Tab completion",
    "text": "2.10 Tab completion\nIf you are doing ls or cd or otherwise referencing a path in the terminal, you don’t have to type the whole word for each directory. If you are trying to list the contents of “newdirectory”, then start with ls newd and then hit tab, and it will finish out the path as ls newdirectory. This is SUPER handy and you should use it often. Like all the time.\n\n\n\n\n\n\nImportant\n\n\n\nTab completion makes your programming live so much easier, and it works in more places than in our terminal. Use this skill.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal/terminal.html#on-the-right-path",
    "href": "terminal/terminal.html#on-the-right-path",
    "title": "1  Using a Terminal",
    "section": "2.11 On the right path",
    "text": "2.11 On the right path\n\n2.11.1 Relative paths\nYou can ls files or cd into any directory relative to your current working directory using ../ to move “up” the folder structure and then use the name of the new directory to move inside it. So a path like this: ls ../../Users/Cory is to travel up two folders, then into Users then into Cory and then list all the files there.\nThis is very powerful in programming, because you might be writing and testing code on your own computer, but then run the program on another computer, so if file01.py needs to talk to file02.py, you don’t want to hard-code a path like http://utdata.cmcdonald.com/scripts/file02.py, because you might not always be on utdata.cmcdonald.com. If it’s in the same folder, you could use file02.py or ./file02.py.\n\n\n2.11.2 Root-relative paths\nYou can reference the “root” or the top level of whatever server or machine you are on even if you don’t know the name of it, by starting your path with a slash like this: /scripts/file01.py. That’s called a root-relative path. If you know the root-relative path to a file or folder, you can always find it no matter what directory you are currently in. We won’t use this much in this class.\n\n\n2.11.3 Absolute paths\nAn absolute path includes the domain or computer name. If I reference http://utdata.cmcdonald.com/scripts/file01.py in my code or script, it will only work if I’m on utdata.cmcdonald.com. If I move that script to another computer or server, it will still try to pull from utdata.cmcdonald.com instead of the version on the new computer. We avoid using absolute paths in this class for this reason.\n\n\n2.11.4 The home directory shortcut\nThere is also a path shortcut called ~/ that stands for “the home directory of the logged in person”. You might see that referenced in paths like ~/Documents/ but that would really take me to /Users/ccm346/Documents/ on my computer. But what’s cool is the same ~/Documents/ path works on YOUR computer, even though your user directory name is different.",
    "crumbs": [
      "Intro to Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html",
    "href": "intro-to-git/01-why-git-github.html",
    "title": "3  Installation and setup",
    "section": "",
    "text": "3.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#prerequisites",
    "href": "intro-to-git/01-why-git-github.html#prerequisites",
    "title": "3  Why Git and GitHub",
    "section": "",
    "text": "R\nRStudio\nQuarto",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#introduction-what-is-version-control",
    "href": "intro-to-git/01-why-git-github.html#introduction-what-is-version-control",
    "title": "3  Why Git and GitHub",
    "section": "3.2 Introduction: What Is Version Control?",
    "text": "3.2 Introduction: What Is Version Control?\nImagine you’re writing a paper and you want to:\n\nKeep track of versions as you go, but don’t want to save multiple files with messy names like: report_final_FINAL_reallyfinal.docx\nGo back in time when something breaks\nWork with a teammate and see who changed what\n\nGit helps you track and save versions.\nGitHub lets you store those versions online and share them with others.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#getting-started-with-git-github-and-rstudio",
    "href": "intro-to-git/01-why-git-github.html#getting-started-with-git-github-and-rstudio",
    "title": "3  Why Git and GitHub",
    "section": "3.3 Getting Started with Git, GitHub, and RStudio",
    "text": "3.3 Getting Started with Git, GitHub, and RStudio\n\n3.3.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:\n\nInstall Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)\n\n\n\n\n\n3.3.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Git and GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#exercise-1-confirm-your-git-setup",
    "href": "intro-to-git/01-why-git-github.html#exercise-1-confirm-your-git-setup",
    "title": "3  Installation and setup",
    "section": "3.3 Exercise 1: Confirm Your Git Setup",
    "text": "3.3 Exercise 1: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n3.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#what-do-these-flags-mean",
    "href": "intro-to-git/01-why-git-github.html#what-do-these-flags-mean",
    "title": "3  Installation and setup",
    "section": "3.4 🧠 What Do These Flags Mean?",
    "text": "3.4 🧠 What Do These Flags Mean?\nLet’s break down some of the options you’ve used:\n\n--global: This means “apply this setting for all projects on my computer.”\nYou usually only need to set your name and email globally once.\n--list: This tells Git to “show me my current configuration.”\n\n\n3.4.1 ✅ You’re Set!\nNow that Git is configured, you’re ready to create your first project. In the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start — using the terminal.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-create-project.html",
    "href": "intro-to-git/03-create-project.html",
    "title": "4  Connecting your project to Git",
    "section": "",
    "text": "(instructions to create a new project)",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Connecting your project to Git</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html",
    "href": "intro-to-git/04-git-status.html",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "5.1 🛠 Step 1: Create a Repository on GitHub\n#️ Save to Github: Pushing the Initial Commit\nNow that your project has been committed locally, let’s put it on GitHub so you can back it up and collaborate with others.\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-gitignore.html",
    "href": "intro-to-git/05-gitignore.html",
    "title": "6  Gitignore files",
    "section": "",
    "text": "6.1 Add a .gitignore File",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gitignore files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/06-stage-commit.html",
    "href": "intro-to-git/06-stage-commit.html",
    "title": "8  Stage and Commit the Initial Files",
    "section": "",
    "text": "(commands for git add and git commit)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Stage and Commit the Initial Files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/07-push-to-github.html",
    "href": "intro-to-git/07-push-to-github.html",
    "title": "9  Push the Initial Commit to GitHub",
    "section": "",
    "text": "(connect remote and push)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Push the Initial Commit to GitHub</span>"
    ]
  },
  {
    "objectID": "intro-to-git/08-edit-stage-commit-push.html",
    "href": "intro-to-git/08-edit-stage-commit-push.html",
    "title": "10  Make a Change, Stage It, Commit It, and Push It",
    "section": "",
    "text": "(exercise flow)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Make a Change, Stage It, Commit It, and Push It</span>"
    ]
  },
  {
    "objectID": "intro-to-git/09-collaboration-basics.html",
    "href": "intro-to-git/09-collaboration-basics.html",
    "title": "11  Collaborating with Others",
    "section": "",
    "text": "(branches, merging, resolving conflicts)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaborating with Others</span>"
    ]
  },
  {
    "objectID": "intro-to-git/10-final-tips.html",
    "href": "intro-to-git/10-final-tips.html",
    "title": "12  Final Tips, Troubleshooting, and What’s Next",
    "section": "",
    "text": "(important command references)",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Final Tips, Troubleshooting, and What’s Next</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#step-1-install-the-tools",
    "href": "intro-to-git/01-why-git-github.html#step-1-install-the-tools",
    "title": "3  Installation and setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-why-git-github.html#step-2-set-up-git-in-the-terminal",
    "href": "intro-to-git/01-why-git-github.html#step-2-set-up-git-in-the-terminal",
    "title": "3  Installation and setup",
    "section": "3.2 Step 2: Set Up Git in the Terminal",
    "text": "3.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#prerequisites",
    "href": "intro-to-git/00-introduction.html#prerequisites",
    "title": "1  Introduction",
    "section": "2.1 Prerequisites:",
    "text": "2.1 Prerequisites:\nBefore we move on to working with Git and Github, we need to make sure you have what you need to successfully complete the exercises in this guide. The guide assumes you already have the following installed on your computer:\n\nR\nRStudio\nQuarto\n\nIf you are missing any these, please go to the links listed and make sure to install before moving on to the next chapter!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#introduction-what-is-version-control",
    "href": "intro-to-git/00-introduction.html#introduction-what-is-version-control",
    "title": "2  Introduction to Git",
    "section": "3.1 Introduction: What Is Version Control?",
    "text": "3.1 Introduction: What Is Version Control?\nImagine you’re writing a paper and you want to:\n\nKeep track of versions as you go, but don’t want to save multiple files with messy names like: report_final_FINAL_reallyfinal.docx\nGo back in time when something breaks\nWork with a teammate and see who changed what\n\nGit helps you track and save versions.\nGitHub lets you store those versions online and share them with others.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Git</span>"
    ]
  },
  {
    "objectID": "intro-to-git/00-introduction.html#you-can-think-of-git-like-a-very-smart-save-game-system-for-your-projects.-unlike-in-google-docs-our-versions-arent-automatically-saved-for-us.-we-have-to-tell-our-computers-when-and-how-to-save-a-new-version.",
    "href": "intro-to-git/00-introduction.html#you-can-think-of-git-like-a-very-smart-save-game-system-for-your-projects.-unlike-in-google-docs-our-versions-arent-automatically-saved-for-us.-we-have-to-tell-our-computers-when-and-how-to-save-a-new-version.",
    "title": "2  Introduction to Git",
    "section": "3.1 You can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.",
    "text": "3.1 You can think of Git like a very smart “save game” system for your projects. Unlike in Google docs, our versions aren’t automatically saved for us. We have to tell our computers when and how to save a new version.\nHow GitHub fits into this:\nGitHub is a website that hosts Git repositories (your project + its history) online.\nIt lets you:\n\nStore your Git project safely in the cloud.\nShare your project with others.\nCollaborate with other people (even if they are far away).\nKeep a backup in case your computer crashes.\n\nIf Git is your notebook where you track all your work, GitHub is like an online library where you can store a copy of your notebook — and invite others to read it or even help you write it.\n\nIn short:\n\nGit = tool you use on your computer to track changes.\nGitHub = website where you can upload (and share) your Git projects.",
    "crumbs": [
      "Intro to Git",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Git</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html",
    "href": "intro-to-git/02-making-a-repo.html",
    "title": "3  Making a repository",
    "section": "",
    "text": "3.1 Step 1: Create a new RStudio Project\nOpen RStudio and make a new Quarto project by going to:\nIn the project wizard, do the following:\nYou’ll now have a project with a .qmd file (Quarto), and RStudio will open into a new window for this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "href": "intro-to-git/02-making-a-repo.html#step-1-create-a-new-rstudio-project",
    "title": "3  Making a repository",
    "section": "",
    "text": "File → New Project → New Directory → Quarto Project\n\n\nSelect New directory in Create Project.\nSelect Quarto project as the Project Type.\nGive your directory a descriptive name like my-first-git-project.\nCheck the Create project as a subdirectory of to make sure you’re creating your project in the directory where you keep your class or coding projects (ideally a projects folder inside your home directory).\nFinallay, click Create Project.\n\n\n\n\n3.1.1 Exercise 1: Run a Quarto File\nBefore we get into Git, let’s test Quarto by creating a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…)\nAdd a title like “Intro to Git”, and click Create\nSave the file and name it something like 01-index.qmd when prompted\nClick Render in the top bar\n\nYou should see an HTML preview with sample content. Great! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#exercise-1-run-a-quarto-file",
    "href": "intro-to-git/02-making-a-repo.html#exercise-1-run-a-quarto-file",
    "title": "3  Making a repository",
    "section": "3.2 Exercise 1: Run a Quarto File",
    "text": "3.2 Exercise 1: Run a Quarto File\nBefore we get into Git, let’s test Quarto by creating a new file.\n\nClick the new file icon at the top left of R Studio and click “Quarto document…” (or go to File &gt; New File &gt; Quarto document…)\nAdd a title like “Intro to Git”, and click Create\nSave the file and name it something like `01-index.qmd\nClick Render (top bar)\n\nYou should see an HTML preview with sample content. Great! You’re ready to start version-controlling this project.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-2-initialize-git-for-the-project",
    "href": "intro-to-git/02-making-a-repo.html#step-2-initialize-git-for-the-project",
    "title": "3  Making a repository",
    "section": "3.2 Step 2: Initialize Git for the Project",
    "text": "3.2 Step 2: Initialize Git for the Project\nIf we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need initialize git inside of our Quarto project.\nTo initialize Git in your Quarto project, Click the Terminal tab in RStudio (usually lower-left)\nInside Terminal, type the following command and run it (by hitting enter):\ngit init\nIn basic terms, this tells Git “I want you to start tracking this folder.”\nIf it works, you’ll see Terminal respond with something like:\nInitialized empty Git repository in /Users/yourname/my-quarto-project/.git/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/02-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "href": "intro-to-git/02-making-a-repo.html#step-3-tell-git-what-files-to-track",
    "title": "3  Making a repository",
    "section": "3.3 🗂️ Step 3: Tell Git What Files to Track",
    "text": "3.3 🗂️ Step 3: Tell Git What Files to Track\nNow that we’ve let Git know that we want it to start watching our project, we’ll also need to tell git what files we would like it to keep track of.\nFirst, let’s ask Git what it “sees” in our project folder by running:\ngit status\nTerminal will return something like the following as a response:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nNow, let’s breakdown what this all means:\n\nOn branch main: You’re working on the main branch — the default starting line of development.\nNo commits yet: This means Git is ready, but you haven’t saved any versions yet.\nUntracked Files: These are files Git sees in your folder, but it’s not saving changes to them yet. They’re marked in red in the terminal and the RStudio Git tab.\n\nIn the next step, we’ll learn how to tell Git what files we’d like it to track and which files to ignore.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Making a repository</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html",
    "href": "intro-to-git/01-install-and-setup.html",
    "title": "2  Installation and setup",
    "section": "",
    "text": "2.1 Step 1: Install the Tools\nBefore we can get started, we’ll need to make sure that our computers (often referred to as our local machines) are set up correctly. Let’s do that by completing the following steps:",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#step-1-install-the-tools",
    "href": "intro-to-git/01-install-and-setup.html#step-1-install-the-tools",
    "title": "2  Installation and setup",
    "section": "",
    "text": "Install Git\n\nGo to: https://git-scm.com/downloads\nDownload and install Git\nDefault install settings are fine\n\nSign up for a Github account:\n\nGo to: https://github.com\nClick Sign up\nChoose a username and email you’ll remember (you’ll use this in Git config)",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "href": "intro-to-git/01-install-and-setup.html#step-2-set-up-git-in-the-terminal",
    "title": "2  Installation and setup",
    "section": "2.2 Step 2: Set Up Git in the Terminal",
    "text": "2.2 Step 2: Set Up Git in the Terminal\nAfter installing Git, you’ll need to configure it with your name and email. Open the terminal (you can find this in RStudio under the “Terminal” tab) and run the following commands:\nFirst, we’ll set up our username.\nAbout Git usernames:\nUsernames are what git uses to associate your work with your identity. For now, just know that the name you set here will be visible in any work you send to Github. You do not have to use your real name.\nSetting your Git username\nRun the following command from your Terminal, replacing “Your Name” with the username you’d like to use (including the quotation marks):\ngit config --global user.name \"Your Name\"\nCheck to see if you successfully set your name by running:\ngit config user.name\nYou should see a Terminal response message with the username you entered. If you didn’t get the response expected, then try again. Remember, be careful about punctuation.\nOnce you have your username set properly, we’ll set your email.\n\n\n\n\n\n\nCaution\n\n\n\nRemember, the username you set here will be visible (read: public) in any future commits you push to GitHub. If you choose to use a nickname or alias instead of your real name, keep it professional enough that you wouldn’t mind a future employer or colleague seeing it if you needed to share your work.\n\n\nSetting your git email\nThe email you enter needs to match the one you used to setup your Github account.\nSet your user email by running the following command, replacing “your.email@example.com” with your Github email:\ngit config --global user.email \"your.email@example.com\"\n\n\n\n\n\n\nImportant\n\n\n\nYour git email should be the same as the one you use on GitHub so your commits will be linked correctly",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "href": "intro-to-git/01-install-and-setup.html#exercise-1-confirm-your-git-setup",
    "title": "2  Installation and setup",
    "section": "2.3 Exercise 1: Confirm Your Git Setup",
    "text": "2.3 Exercise 1: Confirm Your Git Setup\nOpen RStudio’s terminal (bottom-left pane)\nType and execute the following command:\ngit --version\nYou should see something like:\ngit version 2.42.0\nThen check your Git config:\nbash git config --list\nLook for your name and email in the list. If you see them, you’re all set!\n\n2.3.1 ✅ If You See Your Name + Email, You’re Ready!\nIf not, go back and run:\ngit config --global user.name \"Your Name\" git config --global user.email \"your.email@example.com\"",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/01-install-and-setup.html#what-do-these-flags-mean",
    "href": "intro-to-git/01-install-and-setup.html#what-do-these-flags-mean",
    "title": "2  Installation and setup",
    "section": "2.4 🧠 What Do These Flags Mean?",
    "text": "2.4 🧠 What Do These Flags Mean?\nLet’s break down some of the options you’ve used:\n\n--global: This means “apply this setting for all projects on my computer.”\nYou usually only need to set your name and email globally once.\n--list: This tells Git to “show me my current configuration.”\n\n\n2.4.1 ✅ You’re Set!\nNow that Git is configured, you’re ready to create your first project. In the next chapter, we’ll walk you through creating a new Quarto project with Git tracking from the start — using the terminal.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-gitignore.html#add-a-.gitignore-file",
    "href": "intro-to-git/05-gitignore.html#add-a-.gitignore-file",
    "title": "6  Gitignore files",
    "section": "",
    "text": "6.1.0.1 🔍 Whoa — why is .html showing up?\nGood question! That .html file is the rendered output from Quarto. It changes every time you click “Render,” and you usually don’t want to save it in Git. It’s like saving every draft printout of a paper — not helpful.\n\n\n6.1.1 🙈 Introducing .gitignore\nIn a GitHub project, there are several types of files and directories that you typically want to want to keep out of our repositories to keep things clean, secure, and easy to manage. What you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what to ignore.\nFor R and Quarto projects, this will include the following files types: 1. Session and history files: .Rhistory, .RData, .Rproj.user/ 2. Knitting files: .utf8.md, .knit.md 3. Output/render folders: *_files/ ,_site/, _book/ 4. Editor and IDE Config Files .Rproj.user/\nLet’s make a .gitignore now using the command line. Type the following code into the Terminal to make your new file using the touch command:\ntouch .gitignore\nThen open .gitignore in the Files pane in RStudio. If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the icon at the top right of the file pane.\nOnce you have your blank .gitignore file open, add the following lines:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nSave the file, then check your Git status again:\ngit status\nNow the .html file should be gone from the list of red files Git “sees” because we’ve told it to ignore these types of files. ✨\nBefore moving forward, let’s add a few more things to the .gitignore to cover all our bases.\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gitignore files</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html",
    "href": "intro-to-git/03-add-files.html",
    "title": "4  Creating your first commit",
    "section": "",
    "text": "4.1 Ignoring files\nIn our last chapter, we ran the git status command to tell us what Git sees within our project.\nLet’s take another look at those files now by re-running:\nUnder untracked files you’ll see a list like:\nNotice that .html file in the list. This .html file is the rendered output from Quarto, which changes every time you click “Render.” We generally do not save these kinds of rendered files in our repositories since it’s like saving every draft printout of a paper — not helpful.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#ignoring-files",
    "href": "intro-to-git/03-add-files.html#ignoring-files",
    "title": "4  Creating your first commit",
    "section": "",
    "text": "git status\n\n        .Rproj.user/\n        .quarto/\n        _quarto.yml\n        my-first-git-project.Rproj\n        my-first-git-project.html\n        my-first-git-project.qmd\n        my-first-git-project_files/",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#add-the-files-you-do-want-staging",
    "href": "intro-to-git/03-add-files.html#add-the-files-you-do-want-staging",
    "title": "4  Creating your first commit",
    "section": "4.3 ✅ Add the Files You Do Want (Staging)",
    "text": "4.3 ✅ Add the Files You Do Want (Staging)\nNow that we’ve told Git what we don’t want to keep track of, we need to tell Git to track the rest of our files. We’ll do that by using the add command\nType the run the following command in your terminal:\ngit add .\nThe . after the add means “add everything in this folder” (ignoring anything listed in .gitignore.)\nRun git status again\nThe output should look something like this now:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   my-git-quarto-project.Rproj\n        new file:   my-git-quarto-project.qmd\nNotice that the heading has changed to “Changes to be committed” and files are now shown in green. This is called Staging.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#introducing-.gitignore",
    "href": "intro-to-git/03-add-files.html#introducing-.gitignore",
    "title": "4  Creating your first commit",
    "section": "4.2 🙈 Introducing .gitignore",
    "text": "4.2 🙈 Introducing .gitignore\nIn a Git project, there are several types of files and directories that you typically want to keep out of our repositories to keep things clean, secure, and easy to manage. What you ignore will depend on the type of project and the coding languages you’re using, but all Github projects use a file called .gitignore to let Git know what to ignore.\nIn general, the following kinds of files shouldn’t be tracked in Github:\n\nSensitive files: Files containing passwords or private information\nBig files: Git isn’t built to keep track of large files.\n\nFor R and Quarto projects, this will include the following common files types:\n\nSession and history files: .Rhistory, .RData, .Rproj.user/\nKnitting files: .utf8.md, .knit.md\nOutput/render folders: *_files/ ,_site/, _book/\nEditor and IDE Config Files: .Rproj.user/\n\nDon’t worry if you don’t fully understand what all of these files are yet. The important thing here is to know is that there are things we should and should not upload to Git, and the way we keep the things we don’t want in git out is by using a .gitignore file.\n\n4.2.1 Exercise 2: Make a .gitignore\nLet’s make a .gitignore now using the command line. Type the following code into the Terminal to make your new file using the touch command:\ntouch .gitignore\nThen open .gitignore in the Files pane in RStudio. If you don’t see the .gitignore in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.\nOnce you have your blank .gitignore file open, add the following lines:\n*.html \n_site/ \n.Rproj.user/\nLet’s break down what each of these mean:\n\n*.html : Ignore all .html files (rendered outputs)\n_site/: Ignore the entire contents of the _site folder\n.Rproj.user/: Ignore the hidden RStudio files\n\nSave the file, then check your Git status again:\ngit status\nNow the .html file should be gone from the list of red files Git “sees” because we’ve told it to ignore these types of files. ✨\nBefore moving forward, let’s add a few more things to the .gitignore to cover all our bases.\nCopy and paste the following code into your .gitignore file.\n# R\n.Rhistory\n.RData\n.Rproj.user/\n\n# Quarto\n*.html\n*_files/\n*.utf8.md\n*.knit.md\n_site/\n_book/\n\n# System\n.DS_Store\nSave and close the file.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/03-add-files.html#take-your-first-snapshot-commit",
    "href": "intro-to-git/03-add-files.html#take-your-first-snapshot-commit",
    "title": "4  Creating your first commit",
    "section": "4.4 📸 Take your first Snapshot (Commit)",
    "text": "4.4 📸 Take your first Snapshot (Commit)\nNow that you’ve told Git which files you care about, it’s time to take a “snapshot” of these files.\nRun the following in your command line:\ngit commit -m \"Initial commit: set up Quarto project\"\n✅ You’ve saved the first version of your project locally (AKA on your computer)! Next, we’ll learn how to send this “snapshot” of our project to Github for safe keeping.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating your first commit</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#save-to-github-pushing-the-initial-commit",
    "href": "intro-to-git/04-git-status.html#save-to-github-pushing-the-initial-commit",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "5.1.1 🛠 Step 1: Create a Repository on GitHub\n\nGo to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nFill out the form:\n\nRepository name: Use the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank or optional\nLeave the box unchecked that says “Initialize this repository with a README” (We’ll add this on our own later)\nClick Create repository\n\n\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.\n\n\n\n5.1.2 🔗 Step 2: Connect Your Local Git Project to GitHub\nIn your terminal (inside your project folder), run the following:\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPO-NAME.git\nReplace the URL with the one GitHub gives you — it should look something like:\ngit remote add origin https://github.com/jane-doe/my-quarto-project.git\nThen set the main branch name and push by running\ngit branch -M main git push -u origin main\nIf it asks for your username and password, you may need to set up a personal access token — GitHub no longer allows passwords for command-line pushes. We’ll walk through that in the appendix if you get stuck.\n\n5.1.2.1 🧩 Recap: What Do These Commands Do?\nLet’s breakdown what we just did in the last step:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: Uploads your local commits to GitHub and sets up a link between your local main branch and the main branch on GitHub.\n\n\n🎉 Congratulations: Now your project is on GitHub!\n![[Screenshot 2025-04-19 at 4.51.01 PM.png]]\n\n\n\n5.1.3 🎯 Exercise 2: Visit Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to information showing in the file list. You’ll see some helpful information about the project\nIn the Header area: 1. Which user made the most recent commit 2. The commit message 3. The commit number 4. The timestamp of the commit In the file list: 5. The commit message and timestamp will show from the most recent update made to each file or folder.\n🧠 Not every file will update with each git push. Git only keeps track of changes, so these timestamps help you track when updates were last made different parts of your project!\n\n\n\n5.1.4 🧠 Recap\nYou now know how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#step-1-create-a-repository-on-github",
    "href": "intro-to-git/04-git-status.html#step-1-create-a-repository-on-github",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nFill out the form:\n\nRepository name: Use the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank or optional\nLeave the box unchecked that says “Initialize this repository with a README” (We’ll add this on our own later)\nClick Create repository",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#step-2-connect-your-local-git-project-to-github",
    "href": "intro-to-git/04-git-status.html#step-2-connect-your-local-git-project-to-github",
    "title": "5  Pushing to Github",
    "section": "5.2 Step 2: Connect Your Local Git Project to GitHub",
    "text": "5.2 Step 2: Connect Your Local Git Project to GitHub\nIn your terminal (inside your project folder), run the following:\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPO-NAME.git\nReplace the URL with the one GitHub gives you — it should look something like:\ngit remote add origin https://github.com/jane-doe/my-quarto-project.git\nThen set the main branch name and push by running\ngit branch -M main git push -u origin main\nIf it asks for your username and password, you may need to set up a personal access token — GitHub no longer allows passwords for command-line pushes. We’ll walk through that in the appendix if you get stuck.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#recap-what-do-these-commands-do",
    "href": "intro-to-git/04-git-status.html#recap-what-do-these-commands-do",
    "title": "5  Pushing to Github",
    "section": "5.3 🧩 Recap: What Do These Commands Do?",
    "text": "5.3 🧩 Recap: What Do These Commands Do?\nLet’s breakdown what we just did in the last step:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: Uploads your local commits to GitHub and sets up a link between your local main branch and the main branch on GitHub.\n\n\n🎉 Congratulations: Now your project is on GitHub!\n![[Screenshot 2025-04-19 at 4.51.01 PM.png]]",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#exercise-3-visit-your-github-project",
    "href": "intro-to-git/04-git-status.html#exercise-3-visit-your-github-project",
    "title": "5  Pushing to Github",
    "section": "5.4 🎯 Exercise 3: Visit Your GitHub Project",
    "text": "5.4 🎯 Exercise 3: Visit Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to information showing in the file list. You’ll see some helpful information about the project\nIn the Header area: 1. Which user made the most recent commit 2. The commit message 3. The commit number 4. The timestamp of the commit In the file list: 5. The commit message and timestamp will show from the most recent update made to each file or folder.\n🧠 Not every file will update with each git push. Git only keeps track of changes, so these timestamps help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-git-status.html#recap",
    "href": "intro-to-git/04-git-status.html#recap",
    "title": "5  Pushing to Github",
    "section": "5.5 🧠 Recap",
    "text": "5.5 🧠 Recap\nYou now know how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html",
    "href": "intro-to-git/04-pushing-to-github.html",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "5.1 Step 1: Create a Repository on GitHub\nNow that your project has been committed locally, let’s put it on GitHub so you can back it up and collaborate with others.\nYou’ll now see a page with instructions on how to connect your local folder to this GitHub repository.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#step-1-create-a-repository-on-github",
    "href": "intro-to-git/04-pushing-to-github.html#step-1-create-a-repository-on-github",
    "title": "5  Pushing to Github",
    "section": "",
    "text": "Go to github.com and log in.\nClick the + in the upper right corner → choose “New repository”.\nComplete the form by doing the following:\n\nFill in the Repository name field, using the same name as your project folder (e.g. my-quarto-project)\nLeave Description blank or optional\nLeave the box unchecked that says “Initialize this repository with a README” (We’ll add this on our own later)\nClick Create repository",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "href": "intro-to-git/04-pushing-to-github.html#step-2-connect-your-local-git-project-to-github",
    "title": "5  Pushing to Github",
    "section": "5.2 Step 2: Connect Your Local Git Project to GitHub",
    "text": "5.2 Step 2: Connect Your Local Git Project to GitHub\nIn the Quick setup — if you’ve done this kind of thing before box, click the copy button next to the SSH URL box.\nNavigate to the Terminal tab inside your RStudio Quarto project, type the following command but replace the repo name with the one you just copied from Github:\ngit remote add origin git@github.com:your-name/your-repo-name.git\nNow run the command by hitting enter.\nNow we’ll set our main branch name to main by running:\ngit branch -M main\nLastly, we’ll push our main branch to Github by running:\ngit push -u origin main",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#recap-what-do-these-commands-do",
    "href": "intro-to-git/04-pushing-to-github.html#recap-what-do-these-commands-do",
    "title": "5  Pushing to Github",
    "section": "5.3 Recap: What Do These Commands Do?",
    "text": "5.3 Recap: What Do These Commands Do?\nOk, we just did a lot there. Let’s pause for a moment and breakdown everything we just did:\n\ngit remote add origin ...: Tells Git where your online repository lives (on GitHub).\ngit branch -M main: Renames your current branch to main (standard practice on GitHub).\ngit push -u origin main: Uploads your local commits to GitHub and sets up a link between your local main branch and the main branch on GitHub.\n\n\n🎉 Congratulations: Now your project is on GitHub!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#exercise-3-visit-your-github-project",
    "href": "intro-to-git/04-pushing-to-github.html#exercise-3-visit-your-github-project",
    "title": "5  Pushing to Github",
    "section": "5.4 🎯 Exercise 3: Visit Your GitHub Project",
    "text": "5.4 🎯 Exercise 3: Visit Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to information showing in the file list. You’ll see some helpful information about the project\nIn the Header area: 1. Which user made the most recent commit 2. The commit message 3. The commit number 4. The timestamp of the commit In the file list: 5. The commit message and timestamp will show from the most recent update made to each file or folder.\n🧠 Not every file will update with each git push. Git only keeps track of changes, so these timestamps help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#recap",
    "href": "intro-to-git/04-pushing-to-github.html#recap",
    "title": "5  Pushing to Github",
    "section": "5.5 🧠 Recap",
    "text": "5.5 🧠 Recap\nYou now know how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#exercise-3-explore-your-github-project",
    "href": "intro-to-git/04-pushing-to-github.html#exercise-3-explore-your-github-project",
    "title": "5  Pushing to Github",
    "section": "5.4 🎯 Exercise 3: Explore Your GitHub Project",
    "text": "5.4 🎯 Exercise 3: Explore Your GitHub Project\nGo to your repository page on GitHub. You should see all your project files, including .qmd, .gitignore, etc.\n✅ Your project is now tracked by Git and backed up on GitHub.\nPay attention to what’s showing in the file list. You’ll see some helpful information about the project.\nIncluding:\n\nWhich user made the most recent commit\nThe commit message\nThe commit number\nThe timestamp of the commit In the file list\nThe commit message and timestamp from the most recent update made to each file or folder.\n\n\n\n\n\n\n\nNote\n\n\n\nNot every file will update with each git push. Git only keeps track of changes to files. If you made no edits to a file in a commit, it won’t change. Timestamps will help you track when updates were last made different parts of your project!",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#chapter-recap",
    "href": "intro-to-git/04-pushing-to-github.html#chapter-recap",
    "title": "5  Pushing to Github",
    "section": "5.5 Chapter recap",
    "text": "5.5 Chapter recap\nYou now know how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/04-pushing-to-github.html#checkin-point.",
    "href": "intro-to-git/04-pushing-to-github.html#checkin-point.",
    "title": "5  Pushing to Github",
    "section": "5.5 Checkin point.",
    "text": "5.5 Checkin point.\nAt this point in the guide, you’ve learned how to:\n\nCreate a new RStudio project\nTurn on Git tracking with git init\nStage and commit changes\nConnect the project to GitHub\nPush your first commit\n\nNext up: we’ll learn how to make changes, track versions, and collaborate like pros.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pushing to Github</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html",
    "href": "intro-to-git/05-updating-your-repo.html",
    "title": "6  Making and pushing changes",
    "section": "",
    "text": "6.1 🎯 Goal\nBy the end of this chapter, you’ll know how to:\nYou’ll also practice writing good commit messages and checking your work.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#goal",
    "href": "intro-to-git/05-updating-your-repo.html#goal",
    "title": "6  Making and pushing changes",
    "section": "",
    "text": "Make a meaningful change to your project\nStage and commit that change using Git\nPush the change to GitHub to save your work.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-1-make-a-small-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-1-make-a-small-change",
    "title": "6  Making and pushing changes",
    "section": "6.2 🛠️ Step 1: Make a Small Change",
    "text": "6.2 🛠️ Step 1: Make a Small Change\nLet’s open your Quarto file you made in Chapter 1 (e.g., 01-index.qmd) and make a couple changes.\nReplace the auto-generated text and code blocks in the file with the following\n---\ntitle: \"Intro to Git\"\nformat: html\n---\n\n# Summary\n\nHere is a summary of the `mtcars` dataset.\nUnder the summary header and description, add a code chunk with the following:\nsummary(mtcars)\nSave the file. Now check the status in your Terminal again by running:\ngit status\nYou’ll see something like as a Terminal response:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   01-index.qmd\nLet’s break this down :\nThe red text tells us that Git sees something was modified in your 01-index.qmd. It’s under the Changes not staged for commit: section, which tells us that Git hasn’t staged it yet (so it won’t be saved in the next commit).",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-3-stage-the-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-3-stage-the-change",
    "title": "6  Making and pushing changes",
    "section": "6.3 📥 Step 3: Stage the Change",
    "text": "6.3 📥 Step 3: Stage the Change\nWe want to tell Git, “Hey, save this file in the next snapshot.”\nWe’ll do this by adding the modified file to the snapshot. We can do that by running:\ngit add 01-index.qmd\nNow, check the status again.\ngit status\nNow you’ll see your file in green and following message:\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n  modified:   01-index.qmd`\n🎉 Great! The change is now staged.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-4-commit-the-change",
    "href": "intro-to-git/05-updating-your-repo.html#step-4-commit-the-change",
    "title": "6  Making and pushing changes",
    "section": "6.4 Step 4: Commit the Change",
    "text": "6.4 Step 4: Commit the Change\nNow, we’ll save the snapshot (in Git’s memory). When we do so, we’ll want to include a descriptive commit message noting what we changed.\nType something like the following and git enter\ngit commit -m \"Add summary of mtcars dataset\"\nA few best practices for commit messages:\n✅ Use present tense: \"Add summary of...\", not \"Added...\"\n✅ Keep it short but descriptive\n✅ Think: “What changed in this version?”\n🕵️‍♀️ Good commit messages make it easier for you and others to pick up where you left off. If something breaks during an update or you need to go back to a prior version, commit messages will help your retrace your steps.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  },
  {
    "objectID": "intro-to-git/05-updating-your-repo.html#step-5-push-it-to-github",
    "href": "intro-to-git/05-updating-your-repo.html#step-5-push-it-to-github",
    "title": "6  Making and pushing changes",
    "section": "6.5 ☁️ Step 5: Push It to GitHub",
    "text": "6.5 ☁️ Step 5: Push It to GitHub\nNow, we’ll send the snapshot from your computer to GitHub by running:\ngit push\nNow go to your repository on GitHub.com — you’ll see your commit listed under the Commits tab and your file under Code!\n\n\n\n\n\n\nNote\n\n\n\nYou may be wondering why our push command is shorter than it was last time. In our last push, we needed to connect our remote main branch to the remote Github repository. Since we’re already connected our Quarto project to Github and set our branch to main, we can just use the git push command now.\n\n\n\n💡 GitHub is now your project’s cloud backup and collaboration hub.",
    "crumbs": [
      "Git basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Making and pushing changes</span>"
    ]
  }
]