[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git for R",
    "section": "",
    "text": "About this book\nI’m finding I’m not happy with existing resources on using Git with R, so I want to make a very opinionated guide specifically for my students.",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "terminal.html",
    "href": "terminal.html",
    "title": "1  Using a Terminal",
    "section": "",
    "text": "2 Terminal\nTerminal (Mac) and Git Bash (Windows) are programs that can run a shell, which is a text-based user interface where you type commands that your computer understands.\nDevelopers use a shell to issue commands to their computer to do things, like to install programs, change what folder their are in, etc. Using a terminal program to use your computer can be confusing at first, but it will become second-nature as you progress through this class.\nThe shell programming language we will use for these text-based interactions is called Bash. Bash is a Unix-based program and most of the Internet runs on Unix (or Linux) computers.\nWindows doesn’t understand Bash at all without the help of another program. This is why we installed Git and Git Bash so we can all speak the same language.\nMacs understand Bash natively, but some day they will change to a similar language called zsh. When you launch a shell on newer Macs you might get a message The default interactive shell is now zsh. To update your account to use zsh, please run chsh -s /bin/zsh. DON’T DO THIS! JUST IGNORE IT. We will continue to use Bash. Later we will add a command to disable this message.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#launch-your-terminal-in-rstudio",
    "href": "terminal.html#launch-your-terminal-in-rstudio",
    "title": "1  Using a Terminal",
    "section": "2.1 Launch your terminal in RStudio",
    "text": "2.1 Launch your terminal in RStudio\n\nI’ll show you how in person",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#the-terminal-prompt",
    "href": "terminal.html#the-terminal-prompt",
    "title": "1  Using a Terminal",
    "section": "2.2 The terminal prompt",
    "text": "2.2 The terminal prompt\nBefore I adjusted it, I would see this when I launched my terminal:\nCOMM-A54338:~ ccm346$\n\nThe first part before the ~ is my computer name.\nThe part after the ~ is is my username.\nLastly we have the $. This is the “prompt” where you type commands. You type your commands AFTER the $ and then hit Return on your keyboard to execute them.\n\nIn this book you might see examples of a command that includes an output. That first line will have the $ before the command so you know that it is a command, but DON’T TYPE IN THE $. For instance:\n$ pwd\n/Users/ccm346/icj/myproject\nMeans you type in just pwd and then hit return.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#typing-vs-copypaste",
    "href": "terminal.html#typing-vs-copypaste",
    "title": "1  Using a Terminal",
    "section": "2.3 Typing vs copy/paste",
    "text": "2.3 Typing vs copy/paste\nI encourage you to type commands into your terminal instead of copy and pasting them from the lessons. Build muscle and mind memory. Typing a command wrong and then having to figure out why it broke will help you learn it and remember it. If you just copy and paste blindly, then you won’t learn anything other than command-c and command-v.\n\n\n\n\n\n\nI use the terms “folder” and “directory” interchangeably here. They are the same thing.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#print-working-directory",
    "href": "terminal.html#print-working-directory",
    "title": "1  Using a Terminal",
    "section": "2.4 Print working directory",
    "text": "2.4 Print working directory\nOne of the hardest things to get a handle on when first working in the terminal is to figure out where you are on your computer. It’s important, because you can run commands on any file on your computer from where you are, but you gotta know where that is before you can do so. So, we’ll use pwd, or “print working directory”.\n\nIn your Terminal, type and execute:\n\npwd\nWhen I do this on my machine, here is what the command and response look like:\n$ pwd\n/Users/ccm346\nBecause I’m using my work computer my user directory is called “ccm346”. Yours might be your name or part of your name. This user directory is called your “home directory”. All of your computer files are stored inside your home directory.\nWhen you launch a new terminal it starts you out inside this directory.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#list-directory",
    "href": "terminal.html#list-directory",
    "title": "1  Using a Terminal",
    "section": "2.5 List directory",
    "text": "2.5 List directory\nLet’s see what is inside our home directory.\n\nDo this:\n\nls\nThis will list everything in the directory you are in. Mine looks like this:\n$ ls\nApplications        Library         google-cloud-sdk\nCreative Cloud Files    Movies          miniforge3\nDesktop         Music           thingy.html\nDocuments       Pictures\nDownloads       Public\nIt listed the names of all the folders and files of the directory I’m in. This is similar to opening a folder browser on your computer and then opening your home folder and looking inside of it.\n\n\n\nHome directory",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#flags",
    "href": "terminal.html#flags",
    "title": "1  Using a Terminal",
    "section": "2.6 Flags",
    "text": "2.6 Flags\nBut sometimes, I want to know more information about the files, like their modification date. To do this, we introduce something called flags, which add nuance or detail to a terminal command. They start with a dash, and you can pile them on, as I’ll demonstrate.\n\nFirst, try this:\n\nls -l\n\n\n\n\n\n\nImportant\n\n\n\nThat is “dash L”, not a number 1. Watch the spaces, too.\n\n\nMy output looks like this:\ncrit:~$ ls -l\ntotal 0\ndrwx------@   5 ccm346  AUSTIN\\Domain Users   160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users   128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users   256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users  3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users   192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users   128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users   160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users   128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users   672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users   480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     0 Nov 14  2022 thingy.html\nWell, that’s a lot of info, and much of it jibberish. Here is what each part of those lines means …\n\ndrwxr-xr-x and similar is the permission information for a that file or folder. We aren’t going to get into it here, but you can read more if you like.\nThe next number is the number of files inside the folder, sort of. If this is a file, the number will be “1”. If it is a folder, the number will always be at least “2”. We’ll come back to this.\nNext is the owner of the file or folder.\nNext is a permission level for the user when the file was created.\nNext is the file size in bytes.\nNext is the last modified date of the file or when a file was added to the folder.\nFile or folder name.\n\n\n2.6.1 Hidden files\nLet’s add another flag to your command.\n\nDo this:\n\nls -al\nMy list got a TON longer. I snipped out the middle part here:\ncrit:~$ ls -al\ntotal 352\ndrwxr-x---+  54 ccm346  AUSTIN\\Domain Users   1728 Jul 10 10:50 .\ndrwxr-xr-x    7 root    admin                  224 Jun 24 13:21 ..\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_EngineServer\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_StreemToSync\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_SyncToStreem\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_UIServer\n-r--------    1 ccm346  AUSTIN\\Domain Users      7 Nov  5  2021 .CFUserTextEncoding\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users  14340 Jul 11 09:31 .DS_Store\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     35 May 22 14:09 .Rapp.history\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users    510 Mar 30 11:45 .Renviron\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     73 Nov  5  2021 .Rhistory\n&lt;snip&gt;\ndrwx------@   5 ccm346  AUSTIN\\Domain Users    160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users    128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users    256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users   3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users    192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users    128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users    160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users    128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users    672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users    480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users      0 Nov 14  2022 thingy.html\n\nThe -a flag means “all” files and folders, including hidden ones. All the files or folders at the top that start with a dot like .Box_EngineServer are on the computer but not visible normally. There can be a lot of hidden them … I have 40+, far more than regular files and folders.\n\nLet’s list again with just the -a flag:\n\nls -a\nHere is the top of my list:\ncrit:~$ ls -a\n.\n..\n.Box_EngineServer\n.Box_StreemToSync\n.Box_SyncToStreem\n.Box_UIServer\n.CFUserTextEncoding\n.DS_Store\n\n\n2.6.2 Dot directories\nBut let’s consider the first two returns:\n$ ls -a\n.\n..\nThese are two special designations in the Unix world. A single period . designates “this directory” and two periods .. designates the “parent directory”, i.e. the folder “above” this one. Every directory has these, so that’s why the ls -l always shows two items inside a directory, even if it is “empty” of regular files or folders.\nWe can use these “dot” and “dot dot” designations to move around into different directories, and to manage files in our current directories. They become super important when we make “paths” between files in our programs and web pages.\nLet’s see this “dot” designation in action by opening our “current” folder in Finder. This command differs slightly depending on your OS.\n\nmacOSWindows\n\n\n\nDo this command:\n\nopen .\n\n\n\nDo this command:\n\nstart .\n\n\n\nSince you are inside your “home directory”, this should open that folder in your Finder.\n\n\n\n\n\n\niCloud and One Drive\n\n\n\nA word about cloud services like iCloud and OneDrive. We are going set up a place to store our projects so they are NOT backedup to cloud services. We do this for a couple of reasons:\n\nLater projects in this class will include thousands of tiny files. The process of writing them back forth to the cloud service can affect computer performance.\nOur projects use these files in order to function, and when they get off-loaded to the cloud then our code has problems working.\n\nDon’t worry … we’ll back up your class work through Github.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#make-directory",
    "href": "terminal.html#make-directory",
    "title": "1  Using a Terminal",
    "section": "2.7 Make directory",
    "text": "2.7 Make directory\nNext we are going to make a new empty folder to store all our class files using the mkdir command.\n\nDo this:\n\nmkdir icj\n\nThen use ls again to see your new directory amongst the others.\n\nCreating a directory like this is exactly the same as opening a desktop window on your Mac creating a new folder. Folders and directories are the same thing.\n\nCool, let’s make another directory inside of icj.\n\nmkdir icj/newdirectory\n\nNow you can do an ls on the “icj” folder to see what is inside it.\n\nls icj\nIt should show you newdirectory. Something like this:\n$ ls icj\nnewdirectory\nA couple of things about this:\nYou have listed the contents of the icj directory without being inside of it. You can list the contents of any folder on your computer if you know the path to it. In fact, you can do any command on any file or folder on your computer if you know its path. The path is the folder structure between where you “are” in the terminal to where the new file/folder is.\nIf you name a directory with a space in it, you’ll not get what you want unless you put quotes around it. Because of this, I avoid using spaces in files and folders and use - or _ instead. I avoid capitalization, too, because our folders become url names and sometimes caps mess it up, especially on PCs.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#change-directory",
    "href": "terminal.html#change-directory",
    "title": "1  Using a Terminal",
    "section": "2.8 Change directory",
    "text": "2.8 Change directory\nIt’s time to move into different folders within our terminal. The cd command lets us change directory.\n\nNow, let’s go inside the icj folder:\n\ncd icj\n\nLet’s see what is inside:\n\nls\nThat should show you a result with the newdirectory that we created earlier.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#parent-directories",
    "href": "terminal.html#parent-directories",
    "title": "1  Using a Terminal",
    "section": "2.9 Parent directories",
    "text": "2.9 Parent directories\nNow let’s get crazy. Let’s list the files “above” where we are.\n\nType and run this command.\n\n$ ls ../\nRemember I said that two dots means the parent directory? This should show you the list of files and folders in your home directory.\n\nNow, confirm where you are:\n\npwd\nWhich should still be icj. So you had listed the files for the folder “above” you.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#tab-completion",
    "href": "terminal.html#tab-completion",
    "title": "1  Using a Terminal",
    "section": "2.10 Tab completion",
    "text": "2.10 Tab completion\nIf you are doing ls or cd or otherwise referencing a path in the terminal, you don’t have to type the whole word for each directory. If you are trying to list the contents of “newdirectory”, then start with ls newd and then hit tab, and it will finish out the path as ls newdirectory. This is SUPER handy and you should use it often. Like all the time.\n\n\n\n\n\n\nImportant\n\n\n\nTab completion makes your programming live so much easier, and it works in more places than in our terminal. Use this skill.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "terminal.html#on-the-right-path",
    "href": "terminal.html#on-the-right-path",
    "title": "1  Using a Terminal",
    "section": "2.11 On the right path",
    "text": "2.11 On the right path\n\n2.11.1 Relative paths\nYou can ls files or cd into any directory relative to your current working directory using ../ to move “up” the folder structure and then use the name of the new directory to move inside it. So a path like this: ls ../../Users/Cory is to travel up two folders, then into Users then into Cory and then list all the files there.\nThis is very powerful in programming, because you might be writing and testing code on your own computer, but then run the program on another computer, so if file01.py needs to talk to file02.py, you don’t want to hard-code a path like http://utdata.cmcdonald.com/scripts/file02.py, because you might not always be on utdata.cmcdonald.com. If it’s in the same folder, you could use file02.py or ./file02.py.\n\n\n2.11.2 Root-relative paths\nYou can reference the “root” or the top level of whatever server or machine you are on even if you don’t know the name of it, by starting your path with a slash like this: /scripts/file01.py. That’s called a root-relative path. If you know the root-relative path to a file or folder, you can always find it no matter what directory you are currently in. We won’t use this much in this class.\n\n\n2.11.3 Absolute paths\nAn absolute path includes the domain or computer name. If I reference http://utdata.cmcdonald.com/scripts/file01.py in my code or script, it will only work if I’m on utdata.cmcdonald.com. If I move that script to another computer or server, it will still try to pull from utdata.cmcdonald.com instead of the version on the new computer. We avoid using absolute paths in this class for this reason.\n\n\n2.11.4 The home directory shortcut\nThere is also a path shortcut called ~/ that stands for “the home directory of the logged in person”. You might see that referenced in paths like ~/Documents/ but that would really take me to /Users/ccm346/Documents/ on my computer. But what’s cool is the same ~/Documents/ path works on YOUR computer, even though your user directory name is different.",
    "crumbs": [
      "Terminal",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Using a Terminal</span>"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "2  Installation",
    "section": "",
    "text": "2.1 GitHub\nGithub is a website where you can store your code and collaborate with others. It’s also a place where you can publish your code so that others can see it.\nIf you don’t already have a GitHub account, go to github.com and create an account.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "installation.html#github",
    "href": "installation.html#github",
    "title": "2  Installation",
    "section": "",
    "text": "Important\n\n\n\nChoose your Github username carefully and DON’T make the name specific to school or a project. This is profile is specific to you and will become a public facing display of your work. I would also avoid upper case characters as a matter of convention. Your name becomes part of a URL for your projects when we publish them.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "installation.html#git",
    "href": "installation.html#git",
    "title": "2  Installation",
    "section": "2.2 Git",
    "text": "2.2 Git\nYou have to install Git before you can use it. The Git program itself lives in the bowels of your computer and you use either the Terminal or another program to interact with it.\nOn a Mac, RStudio requires Git and bugs you until you install it, but we should test just to be sure. I’m not sure with Windows, but you can run the same test below.\n\n2.2.1 Test if you have it\nWe’ll use your Terminal within RStudio.\n\nLaunch RStudio.\nGo to the Terminal tab.\n\nIt’s usually in the same pane as Console and Background jobs on the bottom left.\n\nType git --version and press Enter.\n\nIt should respond with a version number.\n\n\n\n\n\nTeminal Window\n\n\nIf it doesn’t, then you’ll want to install it.\nIf you get a version number, move on to the next chapter.\n\n\n2.2.2 Installing Git\nThere are different approaches to installing git based on whether you use MacOS or Windows.\n\nMacOSWindows\n\n\nTo install Git, we’ll install something called Xcode tools.\n\nIn your Terminal,type and then run xcode-select --install.\n\nThis will prompt you to install the Xcode tools.\n\n\nIt might say it will take hours to install, but it usually does in 5 and 30 minutes, depending on how many people are trying to download at the same time.\n\n\n\nGo to Git Downloads and install it, using the defaults except for these items listed below.\n\nWhen asked to “Adjust your PATH environment” choose “Use Git from Git Bash only”.\nWhen it asks you to choose the default branch name, change it to main.\n\n\n\n2.2.2.0.1 Perhaps an alternative\nI’m wondering out loud here if I should instead point students to Git for Windows? How do they differ?",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "3  Setup",
    "section": "",
    "text": "3.1 Configure git\nHere we’ll update some settings within git on your machine.\nFirst we’ll set your user.name so Git knows who you are.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setup</span>"
    ]
  },
  {
    "objectID": "setup.html#configure-git",
    "href": "setup.html#configure-git",
    "title": "3  Setup",
    "section": "",
    "text": "In your Terminal, do this but use your name in quotes instead of “Mona Lisa”:\ngit config --global user.name \"Mona Lisa\"\nNow we’ll set your user.email.\nIn your Terminal do this but use your email:\ngit config --global user.email \"email@example.com\"\nYou will want to use the same email when you create your GitHub account.\nLastly we’ll set git to name your default branch “main” instead of “master” as this is a new standard.\nIn your terminal, run this:\ngit config --global init.defaultBranch main\nYou won’t get a response unless there was a problem.\nIn your terminal, run this:\ngit config --global pull.ff only\nThis sets a behaivor that is too complicated to explain now, but comes recommended in this very long but thorough explanation.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setup</span>"
    ]
  },
  {
    "objectID": "setup.html#ssh-keys",
    "href": "setup.html#ssh-keys",
    "title": "3  Setup",
    "section": "3.2 SSH Keys",
    "text": "3.2 SSH Keys\nThere are a couple of ways to authenticate with Github from your computer. The book Happy Git with R recommends using personal access tokens and I think that is fine, but I prefer the one-and-done nature of SSH keys, so that is the method we will use.\n\nAfter making sure git is installed, launch RStudio. (If it was already open, quit and re-launch it.)\nGo to the menu Tools &gt; Global Options, then click on the Git/SVN tab.\nCheck the Enable version control interface for RStudio button.\nThere should already be a path included in the Make sure the path to the git executable is correct.\n\nIf it is not, try quitting RStudio and relaunching it and do this step again.\nIf it is still not there, talk to the prof. We’ll find it.\n\n\n\n\n\nGit/SVN window\n\n\n\n3.2.1 Create a new SSH key\nIf you SSH Key path was already filled then you can skip to the next step.\nIf you’ve never used SSH keys before, you’ll have to create one, but RStudio makes that fairly painless.\n\nClick on the Create RSA Key button.\nYou should be able to leave all the defaults as they are. Leave the optional Passphrase field blank.\nClick Create.\nYou should see a message that says “Key Created Successfully” and it might show you a pretty picture. Click OK.\n\n\n\n\nSSH Key Creation window",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setup</span>"
    ]
  },
  {
    "objectID": "setup.html#saving-ssh-key-in-github",
    "href": "setup.html#saving-ssh-key-in-github",
    "title": "3  Setup",
    "section": "3.3 Saving SSH key in Github",
    "text": "3.3 Saving SSH key in Github\nNow we’ll save the contents of that secret file on your computer into your Github account so Github “knows” about your computer.\nFirst we need access to your “Public” key:\n\nIn the RStudio Git/SVN window, click on the View public key button.\nThis will open a new window with the contents of your public key.\n\n\n\n\nPublic key example\n\n\nYou’ll want access to copy that key to paste into Github in the next step:\n\nGo to github.com and click your user icon and choose Settings.\nIn the user settings sidebar on the left, click SSH and GPG keys.\nClick New SSH key or Add SSH key.\nIn the “Title” field, add a descriptive label for the new key. Name it after your computer, like “Personal MacBook Air” or something.\nIn the “Key” field, so Command-V to paste your key into the box.\n\nIt will look something like this:\n\n\n\nSaving the key\n\n\nAlmost done!\n\nClick Add SSH key.\nIf prompted, confirm your GitHub password.\n\n\n3.3.1 Test Github connection\n\nFrom your Terminal in RStudio, do the following command:\n\nssh -T git@github.com\n\nIf you are asked about “RSA key fingerprint”, type yes and hit return.\nIn the end, you should have a success message like: “Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.” If you get that message, you are good!",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Setup</span>"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "4  Git basics",
    "section": "",
    "text": "4.1 Explaining repositories, projects\nWhen we work in R, we typically create an R “project” that keeps together all our files for a specific project. When we start tracking that folder’s contents using version control, we call it a repository. So in reference to R, our repo (as we call them) is really just our project folder.\nIn addition to tracking a repo’s history on our computer, we can also push our changes to a remote server, like Github. This allows us to share our work with others, and collaborate on projects. This remote version will have the same historical record of our file changes as our local version.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#start-a-new-project",
    "href": "basics.html#start-a-new-project",
    "title": "4  Git basics",
    "section": "4.2 Start a new project",
    "text": "4.2 Start a new project\nLet’s start a new R project and create a Github repository for it. We’ll use the RStudio IDE to do this.\n\nCreate a new R project, using the Quarto Website option.\n\nWhen you name the project, use lowercase letters with dashes for spaces, like git-test-project.\n\nOpen the project in RStudio.\n\n\n4.2.1 Adding .gitignore\nBy default, git will track all the files in your project folder, even those that are hidden from view and don’t really have bearing on your project. We can tell git to ignore these files by creating a .gitignore file in the project folder.\nThere is a website called gitignore.io that can help you create a .gitignore file for your project. You can search for the type of project you are working on, and it will generate a .gitignore file for you.\nAs you build the file, you tell the website which programming language and such that you are using, and it will build the appropriate file for you. I have a standard set for R, but we need to make one change to it once it is build.\n\nGo to gitignore.io.\nIn the box, type in the following indicators: macOS, Windows, R.\nClick Create to create the file.\nCopy the contents of the file.\nCreate a new text file in your project folder called .gitignore.\nPaste the contents of the file into the .gitignore file.\nLook through that file and find this line.\n# pkgdown site\ndocs/\nAdd a hashtag before docs/ so it looks like this:\n# pkgdown site\n# docs/\nSave the file and close it.\n\nWe commented out this docs/ line because we don’t want to ignore that folder. We are going to purposefully use the docs folder later to publish our work on Github. This will make more sense later.\n\n\n4.2.2 Setting a new output directory\n\nI MIGHT MOVE THIS TO SOMEPLACE ELSE AS IT ISN’T THAT IMPORTANT NOW. THAT SAID, WE JUST ADJUSTED THE GITIGNRE TO HANDLE IT?\n\nTypically when you Render a Quarto Website, it stores the HTML files in a folder called _site. We want to adjust the _quarto.yml file to use a different folder that allows us to publish our site to Github Pages.\n\nOpen the _quarto.yml file in the project folder.\nAdd the following output-dir line as shown below:\nproject:\n  type: website\n  output-dir: docs\nNow when we Render our site, it will put all those files into a folder called docs. ## The git cycle\n\nWhen we add files to our git history, there are a couple of steps.\n\nWe first have to tell git to track the folder. We do this only once using git init.\nWe designate which files we to track by “adding” them to stage using git add. Stage is a weird term, but it basically means the list of files that are ready to be saved to the history. We often add all our files, but sometimes we want to just save specific ones.\nWhen we are ready to save that change to the history, we “commit” it using git commit. It’s required that we add a short message about why we are committing to our history at this point.\nWhen we are ready to send all our changes and history to Github, we “push” them using git push.\n\nOther than initializing, you repeat these steps often, especially git add and git commit.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#git-init-initialize-a-repo",
    "href": "basics.html#git-init-initialize-a-repo",
    "title": "4  Git basics",
    "section": "4.3 git init: Initialize a repo",
    "text": "4.3 git init: Initialize a repo\nTo start tracking our project in git, we have to initialize it. This is done by going to our Terminal in RStudio and running the following command:\ngit init\nThe command and response will look something like this in your Terminal:\ncrit:git-project-test$ git init\nInitialized empty Git repository in /Users/crit/git-project-test/.git/\nThis command creates a hidden folder called .git in the project folder. This folder contains all the information git needs to track changes in our project.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#git-status-check-status-of-files",
    "href": "basics.html#git-status-check-status-of-files",
    "title": "4  Git basics",
    "section": "4.4 git status: Check status of files",
    "text": "4.4 git status: Check status of files\nAfter initializing the repo, we can check the status of our files by running the following command:\ngit status\nThis command isn’t a required part of the git cycle, but it is very useful to see where you are in the cycle. Use it often.\nAt this point it will indicate that there are no files being tracked:\n$ git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        _quarto.yml\n        about.qmd\n        git-project-test.Rproj\n        index.qmd\n        styles.css\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThat’s fine. We’ll add them next.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#git-add-add-files-to-stage",
    "href": "basics.html#git-add-add-files-to-stage",
    "title": "4  Git basics",
    "section": "4.5 git add: Add files to stage",
    "text": "4.5 git add: Add files to stage\nWe will often want to add ALL the untracked files to staging, so we’ll do that now.\n\nIn your Terminal, type in:\ngit add .\n\nYou should get no response from the Terminal, but if you run git status again, you’ll see that the files are now being tracked:\n\nRun git status again to see the changes:\ngit status\n\nThe command and response should like this:\n$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   .gitignore\n        new file:   _quarto.yml\n        new file:   about.qmd\n        new file:   git-project-test.Rproj\n        new file:   index.qmd\n        new file:   styles.css\n\n4.5.1 Adding specific files to stage\nAdd specific files to stage:\ngit add index.qmd, about.qmd\nWe don’t need to do that here, but you should know how.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#git-commit-commit-changes-to-history",
    "href": "basics.html#git-commit-commit-changes-to-history",
    "title": "4  Git basics",
    "section": "4.6 git commit: Commit changes to history",
    "text": "4.6 git commit: Commit changes to history\nFinally we get to where we “commit” our changes to the history. Git requires that we include a short message to our future selves and colleges about why we are saving at this time. These messages become a way for us to find specific commits in our history later if we need them.\nThese messages should be short and sweet, like “Added index page” or “Fixed typo in about page”.\n\nUse the following command in your Terminal to commit your files now with a message:\ngit commit -m \"Initial commit\"\n\nAnd you should get a response something like this:\n$ git commit -m \"Initial commit\"\n[main (root-commit) 0f0a604] Initial commit\n 6 files changed, 176 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 _quarto.yml\n create mode 100644 about.qmd\n create mode 100644 git-project-test.Rproj\n create mode 100644 index.qmd\n create mode 100644 styles.css\n\nRun git status again to see the changes:\ngit status\n\nYou’ll get a response that there are no new changes to consider committing.\n$ git status\nOn branch main\nnothing to commit, working tree clean\n\n4.6.1 More about status\nTo be clear, we didn’t need to run git status so many times through that process, but doing so gives you insight into how your files are being tracked. It’s a good habit to get into.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "basics.html#git-remote-connecting-to-github",
    "href": "basics.html#git-remote-connecting-to-github",
    "title": "4  Git basics",
    "section": "4.7 git remote: Connecting to Github",
    "text": "4.7 git remote: Connecting to Github\nNow, at this point our own computer has a history of our files, but we want to push that history to Github so we can share it with others. We need to connect our local repo to a remote repo on Github.\n\nGo to Github.com\nLog in to your account.\nClick the + in the upper right corner and select New repository.\nName the repository the same as your project folder, like git-project-test.\nClick Create repository.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Git basics</span>"
    ]
  },
  {
    "objectID": "gui-rstudio.html",
    "href": "gui-rstudio.html",
    "title": "5  Git GUI in RStudio",
    "section": "",
    "text": "One trick you might have to do to get the Git GUI to work within R Studio:\nMake a change and get everything ready to push to Github.\nAs you are doing so, make sure you use the -u flag to push:\ngit push -u origin main\nOnce you’ve done this, Quit and relaunch RStudio and your project and it should the Pull/Push buttons should work.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git GUI in RStudio</span>"
    ]
  },
  {
    "objectID": "collaborating.html",
    "href": "collaborating.html",
    "title": "6  Collaborating",
    "section": "",
    "text": "Here we need to talk about branches, pull requests, merge conflicts and those types of things.\nGet it:\ngit clone git@github.com:utdata/git-for-r.git\nBranch:\nbut\ngit checkout -b branchname\nMove to a branch:\ngit checkout branchname\nThen git cycle as normal.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collaborating</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Appendix A — Resources",
    "section": "",
    "text": "This book is a work in progress. I actually wanted to point to existing resources instead of writing a new one, but I found I wanted to be more opinionated with the workflow I want students to use.\nThat said, here are the resources I’m working from, which might also be useful to students.\n\nHappy Git and Github for the useR by Jenny Bryant is a great on working with Git/Github and RStudio.\nThe first four chapters of my book Intro to Coding for Journalists were not written with RStudio in mind, but it is a beginner look at Terminal, Git and Github. Once understood, moving that knowledge into RStudio isn’t too much of a stretch.\nAnother way to go about it is to start with Github’s Docs. It’s comprehensive, but it’s a lot. There is way more than the basic minimum knowledge there.\n\nIf you can stand some adult language, the site oh $4it git is actually useful.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  }
]