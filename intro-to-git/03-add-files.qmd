# Creating your first commit

## Ignoring files

In our last chapter, we ran the `git status` command to tell us what Git sees within our project.

Let's take another look at those files now by re-running:

``` bash
git status
```
Under `untracked files` you'll see a list like:

```
        .Rproj.user/
        .quarto/
        _quarto.yml
        my-first-git-project.Rproj
        my-first-git-project.html
        my-first-git-project.qmd
        my-first-git-project_files/
```

Notice that `.html` file in the list. This `.html` file is the **rendered output** from Quarto, which changes every time you click â€œRender." We generally do not save these kinds of rendered files in our repositories since itâ€™s like saving every draft printout of a paper â€” not helpful.

## ðŸ™ˆ Introducing `.gitignore`

In a Git project, there are several types of files and directories that you typically want to keep *out* of our repositories to keep things clean, secure, and easy to manage. What you ignore will depend on the type of project and the coding languages you're using, but all Github projects use a file called `.gitignore` to let Git know **what to ignore**.

In general, the following kinds of files shouldn't be tracked in Github:

1. **Sensitive files**: Files containing passwords or private information
2. **Big files**: Git isn't built to keep track of large files. 

For R and Quarto projects, this will include the following common files types:

1.  **Session and history files**: .Rhistory, .RData, .Rproj.user/
2.   **Knitting files**: *.utf8.md,* .knit.md
3.  **Output/render folders**: \*\_files/ ,\_site/, \_book/
4.  **Editor and IDE Config Files**: `.Rproj.user/`

Don't worry if you don't fully understand what all of these files are yet. The important thing here is to know is that there are things we *should* and *should not* upload to Git, and the way we keep the things we don't want in git out is by using a `.gitignore` file.

### Exercise 2: Make a `.gitignore`

Letâ€™s make a `.gitignore` now using the command line. Type the following code into the Terminal to make your new file using the touch command:

`touch .gitignore`

Then open `.gitignore` in the **Files pane** in RStudio. If you don't see the `.gitignore` in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.

Once you have your blank `.gitignore` file open, add the following lines:

``` bash         
*.html 
_site/ 
.Rproj.user/
```

Let's break down what each of these mean:

1.  `*.html` : Ignore all `.html` files (rendered outputs)
2.  `_site/`: Ignore the entire contents of the `_site` folder
3.  `.Rproj.user/`: Ignore the hidden RStudio files

Save the file, then check your Git status again:

`git status`

Now the `.html` file should be gone from the list of red files Git "sees" because we've told it to ignore these types of files. âœ¨

Before moving forward, let's add a few more things to the `.gitignore` to cover all our bases.

Copy and paste the following code into your .gitignore file.

```         
# R
.Rhistory
.RData
.Rproj.user/

# Quarto
*.html
*_files/
*.utf8.md
*.knit.md
_site/
_book/

# System
.DS_Store
```

Save and close the file.

## âœ… Add the Files You *Do* Want (Staging)

Now that we've told Git what we *don't* want to keep track of, we need to tell Git to track the rest of our files. We'll do that by using the `add` command

Type the run the following command in your terminal:

``` bash 
git add .
```

The `.` after the `add` means â€œadd everything in this folder" (ignoring anything listed in `.gitignore`.)

Run `git status` again

The output should look something like this now:

```         
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   _quarto.yml
        new file:   my-git-quarto-project.Rproj
        new file:   my-git-quarto-project.qmd
```

Notice that the heading has changed to "Changes to be committed" and files are now shown in green. This is called **Staging**.


## ðŸ“¸ Take your first Snapshot (Commit)

Now that you've told Git which files you care about, it's time to take a "snapshot" of these files.

Run the following in your command line: 

``` bash
git commit -m "Initial commit: set up Quarto project"
```

âœ… Youâ€™ve saved the first version of your project locally (AKA on your computer)! Next, we'll learn how to send this "snapshot" of our project to Github for safe keeping. 
