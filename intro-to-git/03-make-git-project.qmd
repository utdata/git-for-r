---
title: "Make our Git project"
---

> üéØ Goal: By the end of this chapter, you‚Äôll have a brand-new RStudio project tracked by Git.

## Create a new RStudio Project

Before you can add anything to Github, you need to create the Quarto project you'll be tracking.

Make a new Quarto project in RStudio by going to:

``` bash
File ‚Üí New Project ‚Üí New Directory ‚Üí Quarto Project
```

In the "Create Quarto Project" window, do the following:

1.  **Directory Name field:** Give your directory a descriptive name like `my-first-git-project`.
2.  **Create project as a subdirectory of**: Mke sure you're creating your project in the directory where you keep your class or coding projects (ideally a `projects` folder inside your home directory).
3.  **Checkboxes:** Make sure none of the boxes are checked.
4.  Finally, click **Create Project.**

You‚Äôll now have a project with a `.qmd` file (Quarto).

## Run a Quarto File

Before we get into Git, let‚Äôs quickly make sure Quarto is working as expected by creating and rendering a new file.

1.  Click the new file icon at the top left of R Studio and click "**Quarto document...**" (or go to File \> New File \> Quarto document...).
2.  Add a title like "Intro to Git", and click **Create.**
3.  Save the file, and name it something like `01-index.qmd` when prompted.
4.  Click **Render** in the top bar.

A new browser window should open with an HTML preview of your file.

Great! You‚Äôre ready to start version-controlling this project.

## Initialize Git for the Project

If we want Git to start watching our files and keeping track of our changes, we have to make sure Git is connected to our project. To do this, we need to **initialize** git inside of our Quarto project.

In basic terms, **initializing** tells Git "I want you to start tracking this folder.‚Äù

**Initialize Git in our new project:**

To initialize Git in your Quarto project, Click the `Terminal` tab in RStudio (usually lower-left)

Type the following command and run it (by hitting enter):

``` bash
git init
```

If it works, you‚Äôll see Terminal respond with something like:

`Initialized empty Git repository in /Users/yourname/my-quarto-project/.git/`

## Tell Git What Files to Track

Now that we've let Git know that we want it to start *watching* our project, we'll also need to tell git *what files* we would like it to keep track of.

First, let‚Äôs ask Git what it "sees" in our project folder by running the following command in the Terminal tab:

``` bash
git status
```

Terminal will return something like the following as a response:

```         
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .Rproj.user/
        .quarto/
        _quarto.yml
        my-first-git-project.Rproj
        my-first-git-project.html
        my-first-git-project.qmd
        my-first-git-project_files/

nothing added to commit but untracked files present (use "git add" to track)
```

**Let's quickly breakdown what this all means:**

1.  **On branch main**: You're working on the `main` branch ‚Äî the default starting branch for development.
2.  **No commits yet**: This means Git is ready, but you haven‚Äôt saved any versions yet.
3.  **Untracked Files**: These are files Git sees in your folder, but it‚Äôs not saving changes to them yet. These files are marked in **red** in the terminal.

## üéØ Checkpoint

In this chapter you've:

 - Made a new git project
 - Initialized git inside your project

---

**Next up**

In the next step, we'll learn how to tell Git what files we'd like it to track and which files to ignore. Then we'll take our first "snapshot" of our project.
