---
title: "Add, ignore, and commit files"
---

> In this chapter you'll learn how to tell Git which files you'd like to track and which ones to ignore. Lastly, you'll take your first "snapshot" (commit) of your project to send to Github.

## Ignoring files

In our last chapter, we ran the `git status` command to tell us what Git sees within our project.

Let's take another look at those files now by re-running:

``` bash
git status
```

Under `untracked files` you'll see a list like:

```         
        .Rproj.user/
        .quarto/
        _quarto.yml
        my-first-git-project.Rproj
        my-first-git-project.html
        my-first-git-project.qmd
        my-first-git-project_files/
```

Notice those `.html` files in the list? HTML files are the **rendered output** from Quarto, and they change every time you make a change and click “Render."

Generally-speaking, we don't save these kinds of rendered files in our repositories because they change so frequently and can cause a lot of headaches during collaboration.

There are some notable exceptions here...

1. They're small, essential, and need to be *versioned* for a specific reason

2. You're outputting human-readable deliverables (like a PDF report or documentation site)

3. You're working on a static site or book.

*Note for Crit: obviously let's chat about this part and addressing the Github pages thing...My general thought with teaching people about github is that we should try our best to teach them best practices before teaching them exceptions to rules because it will help them be better prepared for real-world dev environments*

## Introducing `.gitignore`

In a Git project, there are several types of files and directories that you typically want to keep *out* of our repositories to keep things clean, secure, and easy to manage.

What you ignore will depend on the type of project and the coding languages you're using, but all Github projects use a file called `.gitignore` to let Git know **what it shouldn't be tracking** in the project.

In general, the following kinds of files *shouldn't* be tracked in Github:

1.  **Sensitive files**: Files containing passwords or private information
2.  **Big files**: Git isn't built to keep track of large files.

For R and Quarto projects, this will include the following common files types:

1.  **Session and history files**: .Rhistory, .RData, .Rproj.user/
2.  **Knitting files**: *.utf8.md,* .knit.md
3.  **Output/render folders**: \*\_files/ ,\_site/, \_book/
4.  **Editor and IDE Config Files**: `.Rproj.user/`

Don't worry if you don't fully understand what all of these files are yet. The important thing here is to know is that there are things we *should* and *should not* upload to Git, and the way we keep the things we **don't want tracked** out of Github is by using a `.gitignore` file.

We'll set one up for our new project in the next step.

## 📝 Exercise: Make a `.gitignore`

Let’s make a `.gitignore` for your new Git project from the command line using the `touch` command.

In the terminal, run:

``` bash
touch .gitignore
```

In the RStudio **Files** pane, click on the new `.gitignore` file to open it.

> Tip: If you don't see the `.gitignore` in your file pane, you may need to refresh by clicking the refresh icon at the top right of the file pane.

Once you have your blank `.gitignore` file open, add the following lines and save the file:

``` bash
*.html 
_site/ 
.Rproj.user/
```

**Let's break down what each of these mean:**

1.  `*.html` : Ignore all `.html` files (rendered outputs)
2.  `_site/`: Ignore the entire contents of the `_site` folder
3.  `.Rproj.user/`: Ignore the hidden RStudio files

Check your Git status again by running:

``` bash
git status
```

Remember when we ran git status before and saw our `.html` files? Now the `.html` files should be gone from the list of files Git "sees" because we've told it to ignore these types of files with the `*.html` line in our ignore file.

Before moving forward, let's add a few more things to the `.gitignore` to cover some additional things we want to ignore (don't worry about understanding what all of these are right now).

Copy and paste the following code into your .gitignore file.

``` bash        
# R
.Rhistory
.RData
.Rproj.user/

# Quarto
*.html
*_files/
*.utf8.md
*.knit.md
_site/
_book/

# System
.DS_Store
```

Save and close the file.

## Staging: Adding the files you *do* want

Now that we've told Git what we *don't* want to keep track of, we need to tell Git to track the rest of our files. We'll do that by using the `add` command.

Type the run the following command in your terminal:

``` bash
git add .
```

The `.` after the `add` means “add everything in this folder" (ignoring anything listed in `.gitignore`.)

Run `git status` again

The output should look something like this now:

```         
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   _quarto.yml
        new file:   my-git-quarto-project.Rproj
        new file:   my-git-quarto-project.qmd
```

Notice that the heading has changed to "Changes to be committed" and files are now shown in green. This is called **Staging**.

## Committing: take your first Snapshot

Now that you've told Git which files you care about, it's time to take a "snapshot" of these files.

Run the following in your command line:

``` bash
git commit -m "Initial commit: set up Quarto project"
```

## 🎯 Checkpoint

In this chapter you:

- Created a `.gitignore` file
- Added the files you wanted to track (staged your files)
- Took your first project snapshot (committed your files)


Great job! You’ve saved the first version of your project *locally* (AKA on your computer). Now, the snapshot needs to be saved to a *remote* project (AKA Github).

---

**Next up**

You'll learn how to send this "snapshot" of our project to Github for safe keeping.
