---
title: "Dealing with conflicts"
---

> Merge conflicts are an inevitable part of the collaboration process in Git. Knowing what to do when you encounter them will go a long way toward making your shared projects run smoothly.

## What if you both edit the same file?

When you run `git pull`, Git will automatically try to **merge** your local changes with the most-recent version of the file on the Github repo.

Sometimes, two people (or even just you on two different branches) will make different changes to the **same lines** of a file.

When you try to run `git pull`, Git gets confused and says:

> “I don’t know which version you want to keep — you have to decide.”

This is called a **merge conflict**.

------------------------------------------------------------------------

### What’s Really Happening?

Git is trying to **combine** the changes from two versions of a file into one. Most of the time, if the changes are in *different parts* of the files, Git can handle it automatically.

But if two people made edits to the *same part* of a file (like the same sentence or section), Git doesn’t want to **guess** who’s right — so it stops and asks you to make the call.

Think of it like this:

-   You're merging two Word documents together.

-   One version says "The sky is blue."

-   The other version says "The sky is purple."

-   Git says: “You can’t have both. Which one do you want?”

In Git world, this is a **merge conflict**, and Git needs your help to resolve it.

### How will Git let me know there's a conflict?

When Git encounters a merge conflict, two things will happen:

1.  In your **Terminal**, you'll see a message like:

    > *Auto-merging filename.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.*

2.  In the **file with the conflict**, Git will mark the conflicted lines like this:

    `<<<<<<< HEAD This is your version. ======= This is your teammate’s version. >>>>>>> abc123`

You’ll need to manually choose which version (or both!) to keep and then commit the right changes to Git. We'll walk you through the process of resolving these conflicts in the section below.

------------------------------------------------------------------------

### Step-by-Step: Resolving a Merge Conflict

Let’s say both you and a collaborator edited the same section of `analysis.qmd` and now Git is confused when you try to pull or merge.

**Step 1: See the Conflict**

When you run:

`git pull`

Git might respond:

`Auto-merging analysis.qmd CONFLICT (content): Merge conflict in analysis.qmd Automatic merge failed; fix conflicts and then commit the result.`

**Step 2: Open the Conflicted File**

Open `analysis.qmd` in RStudio or your code editor. You’ll see something like:

`<<<<<<< HEAD The sky is blue. ======= The sky is purple. >>>>>>> origin/main`

This is Git saying:

-   `<<<<<<< HEAD` = your local version

-   `=======` = the separator

-   `>>>>>>> origin/main` = the version from GitHub (or your teammate)

In other words:

-   Anything between `<<<<<<< HEAD` and the `=======` separator are **your** current changes.

-   Anything between the `=======` and `>>>>>>> origin/main` is what's on the **Github version**.

**Step 3: Choose What to Keep**

Decide what version is correct. You can:

-   Keep one

-   Combine them

-   Rewrite it entirely

`The sky is blue and sometimes purple at sunset.`

Note: make sure to delete the conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`) when you’re done.

**Step 4: Mark the Conflict as Resolved**

Once you’ve fixed the file, you need to tell Git it’s ready:

``` bash
git add analysis.qmd
```

**Step 5: Commit the Merge**

Now complete the merge:

``` bash
git commit -m "Resolve merge conflict in analysis.qmd"
```

🎉 That’s it — you’ve handled a merge conflict like a pro.

------------------------------------------------------------------------

## Tips for Smooth Collaboration

-   **Communicate!** Decide who is editing what and when.

-   Always `git pull` before you start working.

-   Commit and push **frequently** — don’t wait until the end of the day.

-   Avoid working on the same file at the same time.
