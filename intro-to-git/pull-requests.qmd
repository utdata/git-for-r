---
title: "Pull requests"
---

> üéØ Goal: By the end of this chapter, you'll have understand the basic process of reviewing and merging pull requests in Github.

## Suggest and Review Changes with Pull Requests

**Pull Requests** (often abbreviated to just "PR" in the programming world) are GitHub‚Äôs way of saying, ‚ÄúHey, I‚Äôve made some changes. Can we look them over and maybe merge them into the main project?‚Äù

Even if you‚Äôre working solo, they‚Äôre a great habit because they give you a space to:

-   Review your changes before merging.

-   Track a discussion about the changes you're making with your collaborators.

-   Ensure everything looks good before merging.

We'll walk through the basic pull request workflow below.

## Step 1: Create a Branch and push to Github

First, make sure you‚Äôre on a new branch (just like we did in [Working with Feature Branches](/intro-to-git/working-with-branches.html))

1.  Create a new feature branch by running: `bash     git checkout -b improve-plot`

2.  Make some edits to your plot file(e.g., tweak a plot or add new text)

3.  Stage and commit the changes:

    ``` bash
    git add filename.qmd 
    git commit -m "Improve plot aesthetics"
    ```

4.  Push the branch to GitHub:

``` bash
git push -u origin improve-plot
```

## Step 2: Open pull request (PR) on GitHub

Instead of merging our changes from the command like like we did in the last chapter, we're going to handle the merging process in Github so we can take advantage of some of the nice features it offers for code reviews.

Once your branch is on GitHub, you‚Äôll see a banner like

![Github repo Pull Request banner](../images/pr-banner-example.png)

To begin the pull request process:

1.  Click the blue ‚ÄúCompare & pull request‚Äù button! (Tip: You can also find this button under the ‚ÄúPull requests‚Äù tab at the top.)

On the **Open a pull request** page, do the following:

1.  **Review what‚Äôs changing:** underneath the form at the top of the page, Github will show you a list of commits and the files on the feature branch that are *different* than the `main` branch. These are the changes you will be merging into the main project. Before making the PR, you'll want to make sure that all the changes showing are intentional and ready to merge.
2.  **Add a title description**: After confirming your changes are ready to merge, add a title to the PR and description with more details about what you're changing. The description and title should let others on your team know *exactly* what the changes are that they will be reviewing. See an example below.

> Note: Github has added a lot of features to help pre-fill out the title based on what it thinks your PR is. Sometimes it's accurate, sometimes it's not so always double-check.

3.  Click the **Create pull request** button.

Now others (or future you) can review the change.

![Pull request form](../images/pr-form-example.png)

------------------------------------------------------------------------

### Step 3: review and discuss changes

If you're collaborating, your teammates can:

-   Leave comments on specific lines

-   Ask questions or suggest edits

-   Approve or request changes

Even if you‚Äôre working alone, reviewing your changes with ‚Äúfresh eyes‚Äù before merging can help you catch mistakes.

Sometimes your collaborators will suggest changes to files or code before "approving" the code to be merged. During the pull review process, you'll discuss your changes and make sure everyone is on board for your code changes *before* incorporating them into the main project. This process is called a **code review** in the programming world and it's an important part of the development process, especially for user-facing, live projects.

------------------------------------------------------------------------

### Step 4: Merge the Pull Request

Once everything looks good, you can proceed to merging your branch.

To merge in your branch:

1.  click **Merge pull request** ‚Üí **Confirm merge.** GitHub will combines the branch into `main`.
2.  Now go back to your project in RStudio, and run:

    ``` bash
    git checkout main
    ```

Now that you're back on your main branch, you will also need to **"pull down"** the changes you made to your plot and merged into your main branch with your PR.

Pull the merged PR changes:

1. Run the following:

  ``` bash
  git pull
  ```

Now when you navigate to your `01-plot.qmd` file, you should see your plot improvements.

## Cleanup old branches

Since we have merged our feature branch, let's remember to keep our repository clean by deleting the local and remote versions of our merged branches.

1. First, we'll delete the branch locally, by running:
    
    ``` bash
    git branch -d improve-plot
    ```
2. Next, we'll delete the remote branch on Github, by running:
    
    ``` bash
    git push origin --delete improve-plot
    ```

---

## Remember: Keep your `main` branch up to date

After merging a PR (especially someone else‚Äôs), sync your local main branch:

``` bash
git checkout main git pull
```

Now you have all the latest changes from GitHub.
