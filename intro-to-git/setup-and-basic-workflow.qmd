---
title: "Project setup and basic workflow"
---

Now that you can push your changes to GitHub, it’s time to talk about how to **collaborate** with others on the same project.

One of the best things about using keeping your code in a Github repository is that it allows you to collaborate with other people on the same coding project. Now, to make this collaboration work smoothly, there are some best practices and processes you will need to follow.

## Basic Git workflow with a team

When working in a Git project with other people, the collaboration process builds upon the basic workflow we laid out in the [Updating Your Repo](/intro-to-git/updating-your-repo.html) chapter. 

![Each team member goes through the process of pushing their own changes and pulling their collaborator's changes from the shared source on Github](../images/collaboration-git-team-workflow-example.png) 
Before working on your own changes in your local repo, you will **pull** down the most recent version of the Github project to make sure you're incorporating the most recent changes to the project. This helps you stay in sync with your team and prevents you from overwriting each others' work and creating major conflicts later.

After grabbing the most recent version, each member of your team will then follow the basic git workflow of make changes to files on your local repositories, committing your changes, and pushing your changes to your shared remote project stored in Github.

We'll go over the basics of setting up this kind of shared project below. 

## Setting up the shared Github project

### Create the repo

Only **one** group member needs to create the GitHub repo (you already know how—see [Push the Initial Commit to GitHub](05-pushing-to-github.html#create-a-repository-on-github)).

Once the repo is created, the owner can add team members.

To **add team members**, the owner will:

1.  Go to the repository on GitHub.

2.  Click **Settings → Collaborators.**

3.  Add the teammate’s GitHub username.

> Note: This sends them an invitation. They must accept it before they can push changes.

------------------------------------------------------------------------

### Step 2: The collaborator clones the repo

Once added as a collaborator, the second person can make a copy of the repo on their machine. This process of copying a repository onto your computer is called **cloning** in the Git world.

We'll walk through *how* to clone a repo in a moment, but first, let's make sure you know *where* you should clone things.

#### Choose where to clone the repo

Using the `cd` command, navigate **in your terminal** to the folder where you keep your coding projects. For example, a good place for this might be in a `projects` folder inside your home directory or your Documents folder.

If you need to **create** a folder for your projects, you can do this in the terminal like this:

``` bash        
cd ~              # Go to your home folder 
mkdir projects    # Make a folder called 'projects' (if it doesn't already exist) 
cd projects       # Move into that folder`
```

#### Clone the repo

Now that you're in the right place, you're ready to copy the repo onto your local machine following the steps below.

**In Github:**

1.  Navigate to the repo you want to clone.

2.  Click the big, blue `<> CODE` button (at the top right).

3.  Navigate to the `SSH` tab in the dropdown.

4.  You will see a box with something like: `git@github.com:username/repository-name`. Click the icon next to this box to copy it to your clipboard.

**In your Terminal window,** type:

``` bash
git clone 
```

then paste the URL you copied from Github, making sure there is a *space* between the word "clone" and the URL.

Your complete command should look something like:

``` bash
git clone git@github.com:username/my-first-git-repo
```

Hit `enter` to run the command.

This creates a local folder with the repo’s contents and Git history within the projects folder on your computer.

Check to make sure this worked by running list (`ls`) command from inside the folder where you cloned your project. 

```bash 
ls
```

You should see the name of your newly-cloned repo in the list.

### Step 3: Everyone pulls *before* they work

Now that you have the copy of your repo on your local machine, make sure you navigate *into* your project folder by running:

``` bash
cd folder_name
```

Before making changes in the project, always run:

``` bash
git pull
```

This downloads any changes your teammate pushed to GitHub since you last worked.

> ⚠️ Skipping `git pull` can lead to **merge conflicts** when Git sees two people changed the same thing differently.

------------------------------------------------------------------------

## Each Person Works, Commits, and Pushes

When working collaboratively on a coding project, your team will follow the basic Git workflow to keep things smooth, clean, and easy to manage.

**The basic Git workflow:**

You and your teammates take turns:

1.  Making changes locally to project files

2.  Staging and committing them (`git add`, `git commit -m`)

3.  Pushing to GitHub (`git push`)


And remember, every time you go to work on your project, you and your teammates should **pull** before making your own edits:

`git pull`
