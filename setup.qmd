---
title: "Setup"
---

The process of configuring Git and GitHub is a one-time setup and it can be a little esoteric. There will be a part where we describe to Git who you are, and then another to set up authentication to Github.


## Configure git

Here we'll update some settings within git on your machine.

First we'll [set your user.name](https://help.github.com/en/github/using-git/setting-your-username-in-git#setting-your-git-username-for-every-repository-on-your-computer) so Git knows who you are.

1. In your Terminal, do this but use _**your name in quotes**_ instead of "Mona Lisa":

    ```bash
    git config --global user.name "Mona Lisa"
    ```
    
    Now we'll [set your user.email](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address#setting-your-commit-email-address-in-git).

1. In your Terminal do this but **use your email**:

    ```bash
    git config --global user.email "email@example.com"
    ```
    
    You will want to use the same email when you create your GitHub account.
    
    Lastly we'll set git to name your default branch "main" instead of "master" as this is a [new standard](https://sfconservancy.org/news/2020/jun/23/gitbranchname/).

1. In your terminal, run this:

    ```bash
    git config --global init.defaultBranch main
    ```
    
    You won't get a response unless there was a problem.


## SSH Keys

There are a couple of ways to authenticate with Github from your computer. The book [Happy Git with R](https://happygitwithr.com/https-pat) recommends using personal access tokens and I think that is fine, but I prefer the one-and-done nature of SSH keys.

::: callout-important
If you have ever set up SSH keys before, find the instructor. (If you don't understand that sentence, you likely haven't.)
:::

We're going to create a special file on your computer so that your machine can connect to your GitHub account. (GitHub doesn't like sending your password around). It will seem complicated, but it's not really.

These directions come from  ([macOS](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=mac) |  [Windows](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=windows)) but use the steps below as they are streamlined.

- During this process, you'll be asked to save the location of the rsa_id. **Just hit return to save the default location.**
- You'll also be asked to set a password for the file. **JUST LEAVE THE PASSWORD BLANK** and hit return. It will ask you a couple of times.
- At the end of the installation, it will give a path to the rsa_id file. We might need to open this file in the next step to copy it. Ask for help at this step.

1. In your terminal, run the following command **but with your email**:

    ```bash
    ssh-keygen -t ed25519 -C "your_email@example.com"
    ```

1. When it prompts you about a location, **JUST HIT RETURN** to accept the default.
1. when it prompts you for a passphrase, **JUST HIT RETURN** to leave it blank.

You should get a nice little art looking return on your terminal, eventually.

What those steps did is create a file on your computer and put inside of it a bunch of random characters.

To "copy" the contents of this file, the command differs between macOS and Windows:

::: {.panel-tabset}

### macOS

4. Once you are through the steps above, do the following command:

```bash
pbcopy < ~/.ssh/id_ed25519.pub
```

### Windows

4. Once you are through the steps above, do the following command:

```bash
clip < ~/.ssh/id_ed25519.pub
```
:::

This copies the contents of that file you created to your clipboard. It's like opening the file and copying the contents.

## Saving SSH key in Github

Now we'll save the contents of that secret file on your computer into your Github account so Github "knows" about your computer.

1. Go to [github.com](https://github.com/) and click your user icon and choose **Settings**.
2. In the user settings sidebar on the left, click **SSH and GPG keys**.
3. Click **New SSH key** or **Add SSH key**.
4. In the "Title" field, add a descriptive label for the new key. Name it after your computer, like "Personal MacBook Air" or something.
5. In the "Key" field, so Command-V to paste your key into the box.

It will look something like this (but the contents will be different):

![Saving the key](images/git-adding-key.png)

Almost done!

6. Click Add SSH key.
7. If prompted, confirm your GitHub password.

### Test Github connection

1. From your Terminal, do the following command:

```bash
ssh -T git@github.com
```

- If you are asked about "RSA key fingerprint", type **yes** and hit return.
- In the end, you should have a success message like: "Hi username! You've successfully authenticated, but GitHub does not provide shell access." If you get that message, you are good!
